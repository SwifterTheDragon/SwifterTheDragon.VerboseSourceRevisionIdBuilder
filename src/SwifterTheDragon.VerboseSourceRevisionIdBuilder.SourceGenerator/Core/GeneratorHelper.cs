// Copyright SwifterTheDragon, and the SwifterTheDragon.VerboseSourceRevisionIdBuilder contributors, 2024-2025. All Rights Reserved.
// SPDX-License-Identifier: MIT

using System.Diagnostics;
using System.Text;

namespace SwifterTheDragon.VerboseSourceRevisionIdBuilder.SourceGenerator.Core
{
    /// <summary>
    /// Provides helper methods for source generation,
    /// such as making auto-generated code header comments.
    /// </summary>
    internal static class GeneratorHelper
    {
        #region Fields & Properties
        /// <summary>
        /// The name of this tool.
        /// </summary>
        internal static string ToolName
        {
            get
            {
                return typeof(GeneratorHelper).Assembly.GetName().Name;
            }
        }
        /// <summary>
        /// The version of this tool.
        /// </summary>
        internal static string ToolVersion
        {
            get
            {
                return FileVersionInfo.GetVersionInfo(typeof(GeneratorHelper).Assembly.Location).ProductVersion;
            }
        }
        #endregion Fields & Properties
        #region Methods
        /// <summary>
        /// Makes a code header comment to label auto-generated code.
        /// </summary>
        /// <param name="sourceFileName">
        /// The name of the source file that generated the code.
        /// </param>
        /// <returns>
        /// A header comment for labelling auto-generated code as auto-generated
        /// when scanning the contents of a source code file.
        /// </returns>
        internal static string MakeAutoGeneratedCodeHeader(
            string sourceFileName = null)
        {
            StringBuilder headerBuilder = new StringBuilder()
                .AppendLine(
                    value: "// -----------------------------------------------------------------------------")
                .AppendLine(
                    value: "// <auto-generated>")
                .Append(
                    value: "//     This code was generated by \"")
                .Append(
                    value: ToolName)
                .AppendLine(
                    value: "\"")
                .Append(
                    value: "//     Version: ")
                .AppendLine(
                    value: ToolVersion);
            if (!string.IsNullOrWhiteSpace(
                value: sourceFileName))
            {
                headerBuilder.Append(
                    value: "//     from ")
                    .AppendLine(
                        value: sourceFileName);
            }
            headerBuilder.AppendLine(
                value: "//")
                .AppendLine(
                    value: "//     Changes to this file may cause incorrect behaviour and will be lost if")
                .AppendLine(
                    value: "//     the code is regenerated.")
                .AppendLine(
                    value: "// </auto-generated>")
                .AppendLine(
                    value: "// -----------------------------------------------------------------------------");
            return headerBuilder.ToString();
        }
        /// <summary>
        /// Makes a code footer comment to label auto-generated code.
        /// </summary>
        /// <param name="generatorClassName">
        /// The name of the class that generated the code.
        /// </param>
        /// <returns>
        /// A footer comment for labelling auto-generated
        /// code as auto-generated.
        /// </returns>
        internal static string MakeAutoGeneratedFooter(
            string generatorClassName)
        {
            StringBuilder footerBuilder = new StringBuilder()
                .Append(
                    value: "// Generated by \"")
                .Append(
                    value: ToolName)
                .Append(
                    value: "\"'s \"")
                .Append(
                    value: generatorClassName)
                .AppendLine(
                    value: "\" class.");
            return footerBuilder.ToString();
        }
        #endregion Methods
    }
}
