# Copyright SwifterTheDragon, and the SwifterTheDragon.VerboseSourceRevisionIdBuilder contributors, 2024-2025. All Rights Reserved.
# SPDX-License-Identifier: MIT
# This .editorconfig file should be placed in the root directory of the repository.
# SwifterTheDragon's .editorconfig for SwifterTheDragon.VerboseSourceRevisionIdBuilder.
# Please do not overwrite this file with a template!

# EditorConfig is incredible: https://EditorConfig.org
# Made with VS2022. https://learn.microsoft.com/en-us/visualstudio/ide/reference/options-text-editor-csharp-formatting?view=vs-2022
# Support for EditorConfig files requires Visual Studio 2019 16.3 or later.

# Opening .editorconfig files with VS2022 by default will use a visual editor for EditorConfig files.
# Doing so will also significantly modify the .editorconfig merely upon opening the file,
# By tacking on all user preferences defined by VS2022 settings for any configurations that apply to both C# & VB files.
# To avoid this undesired behaviour, please follow the instructions here to change the default editor by file extension:
# https://github.com/dotnet/roslyn/issues/53120#issuecomment-1625718954

# Lines starting with '#' are treated as comment lines.

# Core EditorConfig Options
# https://learn.microsoft.com/en-us/visualstudio/ide/create-portable-custom-editor-options?view=vs-2022#supported-settings

# Remove the line below if you want to inherit .editorconfig settings from higher directories
root = true

# All files
[*]

# Please don't specify an indent_size here; that has too many unintended consequences.

# Spell Checking
# Support for Spell Checking requires Visual Studio 2022 17.5 or later.
# https://learn.microsoft.com/en-us/visualstudio/ide/text-spell-checker

# Set language to English (World).
spelling_languages = en-001
# Enable spell checking of all available types.
spelling_checkable_types = strings,identifiers,comments
# Please keep the severity of spelling errors above silent to actively avoid spelling errors.
spelling_error_severity = information
# Enable the language-specific default exclusion dictionary.
spelling_use_default_exclusion_dictionary = true
# Defines a custom exclusion dictionary location and file.
spelling_exclusion_path = exclusion.dic

# XML project files
[*.csproj]

# An indent of 4x spaces offers the best compatiblity for easily readable code when customisation is unavailable.
indent_style = space
indent_size = 4
tab_width = 4
# File character encoding
# UTF-8 is widely supported.
# See https://en.wikipedia.org/wiki/UTF-8 for details.
charset = utf-8
# Trailing whitespace is redundant and should be removed.
trim_trailing_whitespace = true
# EOLs are normalised by .gitattributes so that version control always receives LF EOLs,
# while local files receive the most compatible EOL character for the user's operating system.
# Since end_of_line cannot provide OS-specific EOLs, please don't specify an end_of_line.
end_of_line = unset
# See .gitattributes instead.

# A final new line offers the best compatibility.
# See https://stackoverflow.com/a/67337745 for details.
insert_final_newline = true

# XML configuration files
[*.xml]

# An indent of 4x spaces offers the best compatiblity for easily readable code when customisation is unavailable.
indent_style = space
indent_size = 4
tab_width = 4
# File character encoding
# UTF-8 is widely supported.
# See https://en.wikipedia.org/wiki/UTF-8 for details.
charset = utf-8
# Trailing whitespace is redundant and should be removed.
trim_trailing_whitespace = true
# EOLs are normalised by .gitattributes so that version control always receives LF EOLs,
# while local files receive the most compatible EOL character for the user's operating system.
# Since end_of_line cannot provide OS-specific EOLs, please don't specify an end_of_line.
end_of_line = unset
# See .gitattributes instead.

# A final new line offers the best compatibility.
# See https://stackoverflow.com/a/67337745 for details.
insert_final_newline = true

# C# files
[*.cs]

# An indent of 4x spaces offers the best compatiblity for easily readable code when customisation is unavailable.
indent_style = space
indent_size = 4
tab_width = 4
# File character encoding
# UTF-8 is widely supported.
# See https://en.wikipedia.org/wiki/UTF-8 for details.
charset = utf-8
# Trailing whitespace is redundant and should be removed.
trim_trailing_whitespace = true
# EOLs are normalised by .gitattributes so that version control always receives LF EOLs,
# while local files receive the most compatible EOL character for the user's operating system.
# Since end_of_line cannot provide OS-specific EOLs, please don't specify an end_of_line.
end_of_line = unset
# See .gitattributes instead.

# A final new line offers the best compatibility.
# See https://stackoverflow.com/a/67337745 for details.
insert_final_newline = true

# Configures how many columns until a vertical line appears as a line length guideline, similar to max_line_length.
# See https://github.com/chemodax/EditorConfigGuidelines for details.
guidelines = 80 solid, 100 dashed, 128 dotted

# .NET formatting options
# https://learn.microsoft.com/en-us/visualstudio/ide/reference/code-styles-refactoring-options?view=vs-2022

# Expression-level preferences
dotnet_style_operator_placement_when_wrapping = beginning_of_line

# Naming rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/naming-rules

# Naming rules should be ordered from most specific to least specific.
# Please keep the severity of naming rule violations above silent to actively avoid improperly named identifiers.

dotnet_naming_rule.non_externally_visible_constant_fields_should_be_begins_with_k__pascalcase.severity = suggestion
dotnet_naming_rule.non_externally_visible_constant_fields_should_be_begins_with_k__pascalcase.symbols = non_externally_visible_constant_fields
dotnet_naming_rule.non_externally_visible_constant_fields_should_be_begins_with_k__pascalcase.style = begins_with_k__pascalcase

dotnet_naming_rule.non_externally_visible_static_fields_should_be_begins_with_s__camelcase.severity = suggestion
dotnet_naming_rule.non_externally_visible_static_fields_should_be_begins_with_s__camelcase.symbols = non_externally_visible_static_fields
dotnet_naming_rule.non_externally_visible_static_fields_should_be_begins_with_s__camelcase.style = begins_with_s__camelcase

dotnet_naming_rule.non_externally_visible_fields_should_be_begins_with_i__camelcase.severity = suggestion
dotnet_naming_rule.non_externally_visible_fields_should_be_begins_with_i__camelcase.symbols = non_externally_visible_fields
dotnet_naming_rule.non_externally_visible_fields_should_be_begins_with_i__camelcase.style = begins_with_i__camelcase

dotnet_naming_rule.interfaces_should_be_begins_with_i_pascalcase.severity = suggestion
dotnet_naming_rule.interfaces_should_be_begins_with_i_pascalcase.symbols = interfaces
dotnet_naming_rule.interfaces_should_be_begins_with_i_pascalcase.style = begins_with_i_pascalcase

dotnet_naming_rule.externally_visible_constant_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.externally_visible_constant_fields_should_be_pascalcase.symbols = externally_visible_constant_fields
dotnet_naming_rule.externally_visible_constant_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.local_variable_constants_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.local_variable_constants_should_be_pascalcase.symbols = local_variable_constants
dotnet_naming_rule.local_variable_constants_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.local_variables_should_be_camelcase.severity = suggestion
dotnet_naming_rule.local_variables_should_be_camelcase.symbols = local_variables
dotnet_naming_rule.local_variables_should_be_camelcase.style = camelcase

dotnet_naming_rule.parameters_should_be_camelcase.severity = suggestion
dotnet_naming_rule.parameters_should_be_camelcase.symbols = parameters
dotnet_naming_rule.parameters_should_be_camelcase.style = camelcase

dotnet_naming_rule.type_parameters_should_be_begins_with_t_pascalcase.severity = suggestion
dotnet_naming_rule.type_parameters_should_be_begins_with_t_pascalcase.symbols = type_parameters
dotnet_naming_rule.type_parameters_should_be_begins_with_t_pascalcase.style = begins_with_t_pascalcase

dotnet_naming_rule.async_methods_should_be_ends_with_async_pascalcase.severity = suggestion
dotnet_naming_rule.async_methods_should_be_ends_with_async_pascalcase.symbols = async_methods
dotnet_naming_rule.async_methods_should_be_ends_with_async_pascalcase.style = ends_with_async_pascalcase

dotnet_naming_rule.all_but_any_parameters___local_variables_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.all_but_any_parameters___local_variables_should_be_pascalcase.symbols = all_but_any_parameters___local_variables
dotnet_naming_rule.all_but_any_parameters___local_variables_should_be_pascalcase.style = pascalcase

# Symbol specifications

dotnet_naming_symbols.interfaces.applicable_kinds = interface
dotnet_naming_symbols.interfaces.applicable_accessibilities = *
dotnet_naming_symbols.interfaces.required_modifiers = 

dotnet_naming_symbols.externally_visible_constant_fields.applicable_kinds = field
dotnet_naming_symbols.externally_visible_constant_fields.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.externally_visible_constant_fields.required_modifiers = const

dotnet_naming_symbols.all_but_any_parameters___local_variables.applicable_kinds = namespace, property, field, event, class, struct, interface, enum, delegate, method, local_function
dotnet_naming_symbols.all_but_any_parameters___local_variables.applicable_accessibilities = *
dotnet_naming_symbols.all_but_any_parameters___local_variables.required_modifiers = 

dotnet_naming_symbols.non_externally_visible_fields.applicable_kinds = field
dotnet_naming_symbols.non_externally_visible_fields.applicable_accessibilities = internal, private, private_protected
dotnet_naming_symbols.non_externally_visible_fields.required_modifiers = 

dotnet_naming_symbols.local_variables.applicable_kinds = local
dotnet_naming_symbols.local_variables.applicable_accessibilities = local
dotnet_naming_symbols.local_variables.required_modifiers = 

dotnet_naming_symbols.type_parameters.applicable_kinds = type_parameter
dotnet_naming_symbols.type_parameters.applicable_accessibilities = *
dotnet_naming_symbols.type_parameters.required_modifiers = 

dotnet_naming_symbols.non_externally_visible_static_fields.applicable_kinds = field
dotnet_naming_symbols.non_externally_visible_static_fields.applicable_accessibilities = internal, private, private_protected
dotnet_naming_symbols.non_externally_visible_static_fields.required_modifiers = static

dotnet_naming_symbols.non_externally_visible_constant_fields.applicable_kinds = field
dotnet_naming_symbols.non_externally_visible_constant_fields.applicable_accessibilities = internal, private, private_protected
dotnet_naming_symbols.non_externally_visible_constant_fields.required_modifiers = const

dotnet_naming_symbols.parameters.applicable_kinds = parameter
dotnet_naming_symbols.parameters.applicable_accessibilities = *
dotnet_naming_symbols.parameters.required_modifiers = 

dotnet_naming_symbols.local_variable_constants.applicable_kinds = local
dotnet_naming_symbols.local_variable_constants.applicable_accessibilities = local
dotnet_naming_symbols.local_variable_constants.required_modifiers = const

dotnet_naming_symbols.async_methods.applicable_kinds = method, local_function
dotnet_naming_symbols.async_methods.applicable_accessibilities = *
dotnet_naming_symbols.async_methods.required_modifiers = async

# Naming styles

dotnet_naming_style.begins_with_t_pascalcase.required_prefix = T
dotnet_naming_style.begins_with_t_pascalcase.required_suffix = 
dotnet_naming_style.begins_with_t_pascalcase.word_separator = 
dotnet_naming_style.begins_with_t_pascalcase.capitalization = pascal_case

dotnet_naming_style.begins_with_i__camelcase.required_prefix = i_
dotnet_naming_style.begins_with_i__camelcase.required_suffix = 
dotnet_naming_style.begins_with_i__camelcase.word_separator = 
dotnet_naming_style.begins_with_i__camelcase.capitalization = camel_case

dotnet_naming_style.camelcase.required_prefix = 
dotnet_naming_style.camelcase.required_suffix = 
dotnet_naming_style.camelcase.word_separator = 
dotnet_naming_style.camelcase.capitalization = camel_case

dotnet_naming_style.pascalcase.required_prefix = 
dotnet_naming_style.pascalcase.required_suffix = 
dotnet_naming_style.pascalcase.word_separator = 
dotnet_naming_style.pascalcase.capitalization = pascal_case

dotnet_naming_style.begins_with_i_pascalcase.required_prefix = I
dotnet_naming_style.begins_with_i_pascalcase.required_suffix = 
dotnet_naming_style.begins_with_i_pascalcase.word_separator = 
dotnet_naming_style.begins_with_i_pascalcase.capitalization = pascal_case

dotnet_naming_style.begins_with_s__camelcase.required_prefix = s_
dotnet_naming_style.begins_with_s__camelcase.required_suffix = 
dotnet_naming_style.begins_with_s__camelcase.word_separator = 
dotnet_naming_style.begins_with_s__camelcase.capitalization = camel_case

dotnet_naming_style.begins_with_k__pascalcase.required_prefix = k_
dotnet_naming_style.begins_with_k__pascalcase.required_suffix = 
dotnet_naming_style.begins_with_k__pascalcase.word_separator = 
dotnet_naming_style.begins_with_k__pascalcase.capitalization = pascal_case

dotnet_naming_style.ends_with_async_pascalcase.required_prefix = 
dotnet_naming_style.ends_with_async_pascalcase.required_suffix = Async
dotnet_naming_style.ends_with_async_pascalcase.word_separator = 
dotnet_naming_style.ends_with_async_pascalcase.capitalization = pascal_case

# Roslyn Analyser Rule Severity Level Configuration

# Syntax:

# Single rule:
# dotnet_diagnostic.<Analyser Prefix><Rule ID>.severity = <error/warning/suggestion/silent/none/default>

# Category of rules:
# dotnet_analyzer_diagnostic.category-<Rule Category>.severity = <error/warning/suggestion/silent/none/default>

# All rules:
# dotnet_analyzer_diagnostic.severity = <error/warning/suggestion/silent/none/default>

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-options#severity-level

# option = value
# Avoid 'option = value:severity'. Option severity will be ignored in build.
# As of .NET 9+, option severities are always respected.

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules#option-format

# Formatting:

# <Analyser Prefix><Rule ID>: <Rule Title>
# Explanation for why the severity is chosen.
# Rule severity configuration goes here.
# Explanation for why the option value(s) has/have been chosen.
# Rule option configuration goes here.
# If a rule has been disabled in favour for another rule, mention the replacement rule.
# Immediately configure the next analyser rule on the next line,
# unless the previous rule has been disabled in favour for another rule. In this case, add a blank line.

# Example:

# Swifter0000: Don't do the thing
# The thing should not be done because it is less readable to do so.
# Please keep this rule's severity above silent to actively avoid doing the thing for readability.
# dotnet_diagnostic.Swifter0000.severity = suggestion
# Swifter0000: Don't do the thing
# Other0000 should control doing the thing preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
# dotnet_diagnostic.Swifter0000.severity = none
# Please see Other0000 instead.

# Swifter0000: Don't do the thing
# The thing should not be done because it is less performant to do so.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
# dotnet_diagnostic.Swifter0000.severity = warning
# Generated code should not be analysed.
# Swifter0000.ignore_generated_code = true

# End of example.

# Built-in analysers

# Compiler Messages, included with the C# compiler.
# https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp
# https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/

# IDE-only code style rules

# JSON001: Invalid JSON pattern
# https://learn.microsoft.com/en-us/visualstudio/ide/reference/json001
# JSON patterns should conform to required syntax.
# Please keep this rule's severity above suggestion to actively avoid invalid JSON patterns.
dotnet_diagnostic.JSON001.severity = warning
# JSON002: Probable JSON string detected
# https://learn.microsoft.com/en-us/visualstudio/ide/reference/json002
# JSON literal strings should be explicitly identified.
# Please keep this rule's severity above silent to actively encourage explicitly identifying JSON strings for readability.
dotnet_diagnostic.JSON002.severity = suggestion
# RE0001: Invalid regex pattern
# https://learn.microsoft.com/en-us/visualstudio/ide/reference/re0001
# Regular expression patterns should conform to required syntax.
# Please keep this rule's severity above suggestion to actively avoid invalid regex patterns.
dotnet_diagnostic.RE0001.severity = warning

# Code Style rules, included with .NET.
# https://www.nuget.org/packages/Microsoft.CodeAnalysis.Features
# https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp.Features
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/code-style-rule-options

# Language & Unnecessary Code Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules

# using directive preferences
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules#using-directive-preferences

# .NET style rules:

# IDE0073: Require file header
# Every file should use a header.
# Please keep this rule's severity above suggestion to actively encourage file headers.
dotnet_diagnostic.IDE0073.severity = warning
# Prefer the string as the required file header.
file_header_template = Copyright SwifterTheDragon, and the SwifterTheDragon.VerboseSourceRevisionIdBuilder contributors, 2024-2025. All Rights Reserved.\nSPDX-License-Identifier: MIT

# C# style rules:

# IDE0005: Remove unnecessary import
# Imports should be minimised for auto-completion efficiency & readability.
# If an 'unnecessary' import is used exclusively within inactive conditional compilation,
# Then make sure to wrap the import in conditional compilation pre-processor directives too.
# See https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0005 for how to enable this rule on build.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.IDE0005.severity = warning
# IDE0065: `using` directive placement
# Placing using directives outside namespaces reduces the risk of potential naming collisions.
# See https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions#place-the-using-directives-outside-the-namespace-declaration for details.
# Please keep this rule's severity above suggestion to actively avoid naming collisions.
dotnet_diagnostic.IDE0065.severity = warning
# Prefer using directives to be placed outside the namespace.
csharp_using_directive_placement = outside_namespace

# Code-block preferences
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules#code-block-preferences

# C# style rules:

# IDE0011: Add braces
# Avoiding braces has potential to complicate debugging.
# Please keep this rule's severity above suggestion to actively encourage code that's easier to debug.
dotnet_diagnostic.IDE0011.severity = warning
# Prefer curly braces even for one line of code.
csharp_prefer_braces = true
# IDE0063: Use simple `using` statement
# Simple using statements have a wider scope. Avoiding them minimises scope.
# Please keep this rule's severity above suggestion to actively encourage minimising scope.
dotnet_diagnostic.IDE0063.severity = warning
# Prefer to use a using statement with curly braces.
csharp_prefer_simple_using_statement = false
# IDE0160: Use block-scoped namespace
# IDE0161: Use file-scoped namespace
# Block-scoped namespaces minimises scope & file-scoped namespaces are C# 10+ only.
# Please keep this rule's severity above suggestion to actively encourage minimising scope.
dotnet_diagnostic.IDE0160.severity = warning
dotnet_diagnostic.IDE0161.severity = none
# Namespace declarations should be block scoped.
csharp_style_namespace_declarations = block_scoped
# IDE0200: Remove unnecessary lambda expression
# Simplifies code for readability.
# Please keep this rule's severity disabled to avoid using C# 10+ features.
dotnet_diagnostic.IDE0200.severity = none
# Prefer to convert a lambda expression to a method group.
csharp_style_prefer_method_group_conversion = true
# IDE0200 is for C# 11+ only.

# IDE0210: Convert to top-level statements
# IDE0211: Convert to 'Program.Main' style programme
# Top-level statements should be avoided in long-term code for consistency & maintainability.
# Please keep this rule's severity above suggestion to actively encourage consistent code.
dotnet_diagnostic.IDE0210.severity = none
dotnet_diagnostic.IDE0211.severity = warning
# Prefer Program.Main style programme.
csharp_style_prefer_top_level_statements = false
# IDE0290: Use primary constructor
# Simplifies code for readability.
# Please keep this rule's severity disabled to avoid using C# 10+ features.
dotnet_diagnostic.IDE0290.severity = none
# Prefer to use primary constructors.
csharp_style_prefer_primary_constructors = true
# IDE0290 is for C# 12+ only.

# IDE0330: Prefer 'System.Threading.Lock'
# This rule is for C# 13+ & .NET 9+ only.
# Please keep this rule's severity disabled to avoid using C# 13+ & .NET 9+ features.
dotnet_diagnostic.IDE0330.severity = none
# Disables the rule.
csharp_prefer_system_threading_lock = false
# IDE0330 is for C# 13+ & .NET 9+ only.

# Expression-bodied members
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules#expression-bodied-members

# C# style rules:

# IDE0021: Use expression body for constructors
# Expression bodies has potential to complicate debugging.
# Please keep this rule's severity above suggestion to actively encourage code that's easier to debug.
dotnet_diagnostic.IDE0021.severity = warning
# Prefer block bodies for constructors.
csharp_style_expression_bodied_constructors = false
# IDE0022: Use expression body for methods
# Expression bodies has potential to complicate debugging.
# Please keep this rule's severity above suggestion to actively encourage code that's easier to debug.
dotnet_diagnostic.IDE0022.severity = warning
# Prefer block bodies for methods.
csharp_style_expression_bodied_methods = false
# IDE0023: Use expression body for conversion operators
# IDE0024: Use expression body for operators
# Expression bodies has potential to complicate debugging.
# Please keep these rules' severities above suggestion to actively encourage code that's easier to debug.
dotnet_diagnostic.IDE0023.severity = warning
dotnet_diagnostic.IDE0024.severity = warning
# Prefer block bodies for operators.
csharp_style_expression_bodied_operators = false
# IDE0025: Use expression body for properties
# Expression bodies has potential to complicate debugging.
# Please keep this rule's severity above suggestion to actively encourage code that's easier to debug.
dotnet_diagnostic.IDE0025.severity = warning
# Prefer block bodies for properties.
csharp_style_expression_bodied_properties = false
# IDE0026: Use expression body for indexers
# Expression bodies has potential to complicate debugging.
# Please keep this rule's severity above suggestion to actively encourage code that's easier to debug.
dotnet_diagnostic.IDE0026.severity = warning
# Prefer block bodies for indexers.
csharp_style_expression_bodied_indexers = false
# IDE0027: Use expression body for accessors
# Expression bodies has potential to complicate debugging.
# Please keep this rule's severity above suggestion to actively encourage code that's easier to debug.
dotnet_diagnostic.IDE0027.severity = warning
# Prefer block bodies for accessors.
csharp_style_expression_bodied_accessors = false
# IDE0053: Use expression body for lambdas
# Expression bodies has potential to complicate debugging.
# Please keep this rule's severity above suggestion to actively encourage code that's easier to debug.
dotnet_diagnostic.IDE0053.severity = warning
# Prefer block bodies for lambdas.
csharp_style_expression_bodied_lambdas = false
# IDE0061: Use expression body for local functions
# Expression bodies has potential to complicate debugging.
# Please keep this rule's severity above suggestion to actively encourage code that's easier to debug.
dotnet_diagnostic.IDE0061.severity = warning
# Prefer block bodies for local functions.
csharp_style_expression_bodied_local_functions = false

# Expression-level preferences
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules#expression-level-preferences

# .NET style rules:

# IDE0001: Simplify name
# Harmless to functionality, but helps readability.
# Sometimes it's better to avoid simplifying name for readability though.
# Wrap these edge cases in pragma warning pre-processor directives.
# This rule is never enabled on build.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.IDE0001.severity = suggestion
# IDE0002: Simplify member access
# Harmless to functionality, but helps readability.
# Sometimes it's better to avoid simplifying name for readability though.
# Wrap these edge cases in pragma warning pre-processor directives.
# This rule is never enabled on build.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.IDE0002.severity = suggestion
# IDE0004: Remove unnecessary cast
# May indicate problematic functionality.
# Please keep this rule's severity above silent to avoid problematic functionality.
dotnet_diagnostic.IDE0004.severity = warning
# IDE0010: Add missing cases to switch statement
# Likely indicates problematic functionality.
# Please keep this rule's severity above silent to avoid problematic functionality.
dotnet_diagnostic.IDE0010.severity = warning
# IDE0017: Use object initialisers
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0017.severity = suggestion
# Prefer objects to be initialised using object initialisers when possible.
dotnet_style_object_initializer = true
# IDE0028: Use collection initialisers
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0028.severity = suggestion
# Prefer to use collection initialisers.
dotnet_style_collection_initializer = true
# Prefer to use collection expressions.
dotnet_style_prefer_collection_expression = true
# IDE0029: Null check can be simplified (ternary conditional check)
# IDE0030: Null check can be simplified (nullable ternary conditional check)
# IDE0270: Null check can be simplified (if null check)
# Simplifies code for readability.
# Please keep these rules' severities above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0029.severity = suggestion
dotnet_diagnostic.IDE0030.severity = suggestion
dotnet_diagnostic.IDE0270.severity = suggestion
# Prefer null-coalescing expressions.
dotnet_style_coalesce_expression = true
# IDE0031: Use null propagation
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0031.severity = suggestion
# Prefer to use null-conditional operator when possible.
dotnet_style_null_propagation = true
# IDE0032: Use auto-implemented property
# Auto-implemented properties have potential to complicate debugging.
# Please keep this rule's severity above suggestion to actively encourage code that's easier to debug.
dotnet_diagnostic.IDE0032.severity = warning
# Prefer properties with private backing fields.
dotnet_style_prefer_auto_properties = false
# IDE0033: Use explicitly provided tuple name
# Improves readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.IDE0033.severity = suggestion
# Prefer tuple names to ItemX properties.
dotnet_style_explicit_tuple_names = true
# IDE0035: Remove unreachable code
# CS0162 should control unreachable code preferences.
# This rule is never enabled on build.
# This rule's severity cannot be configured.
# Please see CS0162 instead.

# IDE0037: Use inferred member names
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0037.severity = suggestion
# Prefer inferred tuple element names.
dotnet_style_prefer_inferred_tuple_names = true
# Prefer inferred anonymous type member names.
dotnet_style_prefer_inferred_anonymous_type_member_names = true
# IDE0041: Use 'is null' check
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0041.severity = suggestion
# Prefer is null check.
dotnet_style_prefer_is_null_check_over_reference_equality_method = true
# IDE0045: Use conditional expression for assignment
# If-else statements are easier to read than ternary conditionals.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.IDE0045.severity = suggestion
# Prefer assignments with an if-else statement.
dotnet_style_prefer_conditional_expression_over_assignment = false
# IDE0046: Use conditional expression for return
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0046.severity = suggestion
# Prefer return statements to use an if-else statement.
dotnet_style_prefer_conditional_expression_over_return = false
# IDE0050: Convert anonymous type to tuple
# This rule is deprecated.
# Please keep this rule's severity disabled to avoid using deprecated rules.
dotnet_diagnostic.IDE0050.severity = none
# IDE0050 is deprecated. It has been converted to a Visual Studio refactoring in VS2022.

# IDE0051: Remove unused private member
# Likely indicates problematic functionality.
# Please keeps this rule's severity above suggestion to avoid problematic functionality.
dotnet_diagnostic.IDE0051.severity = warning
# IDE0052: Remove unread private member
# Likely indicates problematic functionality.
# Please keep this rule's severity above suggestion to avoid problematic functionality.
dotnet_diagnostic.IDE0052.severity = warning
# IDE0054: Use compound assignment
# IDE0074: Use coalesce compound assignment
# Simplifies code for readability.
# Please keep these rules' severities above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0054.severity = suggestion
dotnet_diagnostic.IDE0074.severity = suggestion
# Prefer compound assignment expressions.
dotnet_style_prefer_compound_assignment = true
# IDE0058: Remove unnecessary expression value
# Improves readability by explicitly discarding expression values.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.IDE0058.severity = suggestion
# Prefer to assign an unused expression to a discard.
csharp_style_unused_value_expression_statement_preference = discard_variable
# IDE0059: Remove unnecessary value assignment
# Improves readability by explicitly discarding expression values.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.IDE0059.severity = suggestion
# Prefer to use a discard when assigning a value that's not used.
csharp_style_unused_value_assignment_preference = discard_variable
# IDE0070: Use `System.HashCode.Combine`
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0070.severity = suggestion
# IDE0071: Simplify interpolation
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0071.severity = suggestion
# Prefer simplified interpolated strings.
dotnet_style_prefer_simplified_interpolation = true
# IDE0075: Simplify conditional expression
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0075.severity = suggestion
# Prefer simplified conditional expressions.
dotnet_style_prefer_simplified_boolean_expressions = true
# IDE0082: Convert `typeof` to `nameof`
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0082.severity = suggestion
# IDE0100: Remove unnecessary equality operator
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0100.severity = suggestion
# IDE0120: Simplify LINQ expression
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0120.severity = suggestion
# IDE0130: Namespace does not match folder structure
# Matching namespaces with folder structure helps organise namespaces.
# See https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0130 for how to enable this rule on build.
# Please keep this rule's severity above suggestion to actively encourage organising namespaces.
dotnet_diagnostic.IDE0130.severity = warning
# Prefer namespace naming to match folder structure.
dotnet_style_namespace_match_folder = true

# C# style rules:

# IDE0016: Use throw expression
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0016.severity = suggestion
# Prefer to use throw expressions instead of throw statements.
csharp_style_throw_expression = true
# IDE0018: Inline variable declaration
# Minimises variable scope, simplifying code for readability.
# Please keep this rule's severity above suggestion to actively encourage minimising scope.
dotnet_diagnostic.IDE0018.severity = warning
# Prefer out variables to be declared inline in the argument list of a method call when possible.
csharp_style_inlined_variable_declaration = true
# IDE0034: Simplify `default` expression
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0034.severity = suggestion
# Prefer default over default(T).
csharp_prefer_simple_default_expression = true
# IDE0039: Use local function instead of lambda
# Local functions have better performance & functionality than lambdas.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.IDE0039.severity = warning
# Prefer local functions over anonymous functions.
csharp_style_prefer_local_over_anonymous_function = true
# IDE0042: Deconstruct variable declaration
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0042.severity = suggestion
# Prefer deconstructed variable declaration.
csharp_style_deconstructed_variable_declaration = true
# IDE0056: Use index operator
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0056.severity = suggestion
# Prefer to use the ^ operator when calculating an index from the end of a collection.
csharp_style_prefer_index_operator = true
# IDE0057: Use range operator
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0057.severity = suggestion
# Prefer to use the range operator .. when extracting a "slice" of a collection.
csharp_style_prefer_range_operator = true
# IDE0072: Add missing cases to switch expression
# Likely indicates problematic functionality.
# Please keep this rule's severity above suggestion to avoid problematic functionality.
dotnet_diagnostic.IDE0072.severity = warning
# IDE0080: Remove unnecessary suppression operator
# Likely indicates problematic functionality.
# Please keep this rule's severity above suggestion to avoid problematic functionality.
dotnet_diagnostic.IDE0080.severity = warning
# IDE0090: Simplify `new` expression
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0090.severity = suggestion
# Prefer target-typed new expressions when created type is apparent.
csharp_style_implicit_object_creation_when_type_is_apparent = true
# IDE0110: Remove unnecessary discard
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0110.severity = suggestion
# IDE0150: Prefer `null` check over type check
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0150.severity = suggestion
# Prefer null check over type check.
csharp_style_prefer_null_check_over_type_check = true
# IDE0180: Use tuple to swap values
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0180.severity = suggestion
# Prefer using a tuple to swap two values.
csharp_style_prefer_tuple_swap = true
# IDE0220: Add explicit cast in foreach loop
# The absence of explicit casts can lead to incorrectly typed values.
# Please keep this rule's severity above suggestion to actively encourage code that's easier to debug.
dotnet_diagnostic.IDE0220.severity = warning
# Prefer explicit casts for strongly typed (generic) collections but not for legacy collections, such as ArrayList.
dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed
# IDE0230: Use UTF-8 string literal
# Improves readability.
# Please keep this rule's severity disabled to avoid using C# 10+ features.
dotnet_diagnostic.IDE0230.severity = none
# Prefer UTF-8 string literals to byte arrays.
csharp_style_prefer_utf8_string_literals = true
# IDE0230 is for C# 11+ only.

# IDE0240: Nullable directive is redundant
# Potentially indicates problematic functionality.
# Please keep this rule's severity above suggestion to avoid problematic functionality.
dotnet_diagnostic.IDE0240.severity = warning
# IDE0241: Nullable directive is unnecessary
# Potentially indicates problematic functionality.
# Please keep this rule's severity above suggestion to avoid problematic functionality.
dotnet_diagnostic.IDE0241.severity = warning
# IDE0300: Use collection expression for array
# IDE0301: Use collection expression for empty
# IDE0302: Use collection expression for stackalloc
# IDE0303: Use collection expression for Create()
# IDE0304: Use collection expression for builder
# IDE0305: Use collection expression for fluent
# Simplifies code for readability.
# Please keep these rules' severities disabled to avoid using C# 10+ features.
dotnet_diagnostic.IDE0300.severity = none
dotnet_diagnostic.IDE0301.severity = none
dotnet_diagnostic.IDE0302.severity = none
dotnet_diagnostic.IDE0303.severity = none
dotnet_diagnostic.IDE0304.severity = none
dotnet_diagnostic.IDE0305.severity = none
# Prefer to use collection expressions only when types match exactly, for example, int[] i = new int[] { 1, 2, 3 };.
dotnet_style_prefer_collection_expression = true
# IDE0300, IDE0301, IDE0302, IDE0303, IDE0304 & IDE0305 are for C# 12+ only.
# IDE0302 is .NET 8+ only.
# dotnet_style_prefer_collection_expression's default changes in .NET 9+.

# Visual Basic style rules:

# IDE0081: Remove `ByVal`
# IDE0084: Use pattern matching (IsNot operator)
# IDE0140: Simplify object creation
# These rules only applies to Visual Basic.
# There is no C# equivalent for any of these rules, though similar rules do exist.

# Field preferences
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules#field-preferences

# .NET style rules:

# IDE0044: Add readonly modifier
# Improves readability by explicitly labelling fields to not be assigned to.
# Otherwise more complex to read and debug.
# Please keep this rule's severity above suggestion to actively encourage more readable & easier to debug code.
dotnet_diagnostic.IDE0044.severity = warning
# Prefer that private fields be marked readonly if they're only ever assigned inline or in a constructor.
dotnet_style_readonly_field = true

# Language keyword vs. framework types preferences
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules#language-keyword-vs-framework-types-preferences

# .NET style rules:

# IDE0049: Use language keywords instead of framework type names for type references
# Simplifies code for readability.
# This rule is never enabled on build.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0049.severity = suggestion
# Prefer the language keyword for local variables, method parameters, and class members
dotnet_style_predefined_type_for_locals_parameters_members = true
# Prefer the language keyword for member access expressions
dotnet_style_predefined_type_for_member_access = true

# Modifier preferences
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules#modifier-preferences

# .NET style rules:

# IDE0036: Order modifiers
# Consistent modifiers allows easier searching.
# Please keep this rule's severity above suggestion to actively encourage consistent code.
dotnet_diagnostic.IDE0036.severity = warning
# Specifies the desired modifier order for C#.
csharp_preferred_modifier_order = public,private,protected,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,required,volatile,async
# IDE0040: Add accessibility modifiers
# Improves readability and potentially indicates problematic functionality.
# Please keep this rule's severity above suggestion to actively encourage more readable code & avoid problematic functionality.
dotnet_diagnostic.IDE0040.severity = warning
# Prefer accessibility modifiers to be specified.
dotnet_style_require_accessibility_modifiers = always

# C# style rules:

# IDE0062: Make local function static
# Marking local functions as static reduces code complexity, easing debugging.
# Please keep this rule's severity above silent to actively encourage code that's easier to debug.
dotnet_diagnostic.IDE0062.severity = suggestion
# Prefer local functions to be marked static.
csharp_prefer_static_local_function = true
# IDE0064: Make struct fields writable
# May indicate problematic functionality.
# Please keep this rule's severity above suggestion to avoid problematic functionality.
dotnet_diagnostic.IDE0064.severity = warning
# IDE0250: Struct can be made 'readonly'
# Marking structs as readonly reduces code complexity.
# Please keep this rule's severity above silent to actively encourage code that's easier to debug.
dotnet_diagnostic.IDE0250.severity = suggestion
# Prefer to make a struct readonly when all its fields are readonly.
csharp_style_prefer_readonly_struct = true
# IDE0251: Member can be made 'readonly'
# Marking members as readonly reduces code complexity.
# Please keep this rule's severity above silent to actively encourage code that's easier to debug.
dotnet_diagnostic.IDE0251.severity = suggestion
# Prefer to make struct members readonly.
csharp_style_prefer_readonly_struct_member = true
# IDE0320: Make anonymous function static
# Marking anonymous functions as static avoids unintentionally capturing state from the enclosing context.
# Please keep this rule's severity above suggestion to actively encourage marking anonymous functions as static.
dotnet_diagnostic.IDE0320.severity = warning
# Prefer anonymous functions to be marked static
csharp_prefer_static_anonymous_function = true

# New-line preferences
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules#new-line-preferences

# IDE2000: Allow multiple blank lines
# Whitespace should be minimised for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.IDE2000.severity = suggestion
# Avoid multiple blank lines.
dotnet_style_allow_multiple_blank_lines_experimental = false
# IDE2001: Allow embedded statements on same line
# Embedded statements on the same line is less readable.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.IDE2001.severity = suggestion
# Embedded statements must be on their own line.
csharp_style_allow_embedded_statements_on_same_line_experimental = false
# IDE2002: Allow blank lines between consecutive braces
# Whitespace should be minimised for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.IDE2002.severity = suggestion
# Consecutive braces must not have blank line between them.
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false
# IDE2003: Allow statement immediately after block
# A blank line between a block and a statement is not necessary for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.IDE2003.severity = suggestion
# Blank line not required between block and subsequent statement.
dotnet_style_allow_statement_immediately_after_block_experimental = true
# IDE2004: Allow blank line after colon in constructor initialiser
# The colon of a constructor initialiser being on a new line is not necessary for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.IDE2004.severity = suggestion
# Blank line allowed after constructor initialiser colon.
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true
# IDE2005: Allow blank line after token in conditional expression
# The token after a conditional expression being on a new line is not necessary for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.IDE2005.severity = suggestion
# Blank line allowed after conditional expression token.
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true
# IDE2006: Allow blank line after token in arrow expression
# The token after an arrow expression being on a new line is not necessary for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.IDE2006.severity = suggestion
# Blank line allowed after arrow expression clause token.
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true

# Null-checking preferences
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules#null-checking-preferences

# C# style rules:

# IDE1005: Use conditional delegate call
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE1005.severity = suggestion
# Prefer to use the conditional coalescing operator (?.) when invoking a lambda expression.
csharp_style_conditional_delegate_call = true

# Parameter preferences
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules#parameter-preferences

# .NET style rules:

# IDE0060: Remove unused parameters
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively avoid unused parameters.
dotnet_diagnostic.IDE0060.severity = suggestion
# Flag methods with any accessibility that contain unused parameters.
dotnet_code_quality_unused_parameters = all
# IDE0280: Use 'nameof'
# Using 'nameof' in attributes avoids hard-coding magic strings.
# Please keep this rule's severity above suggestion to avoid magic strings in attributes.
dotnet_diagnostic.IDE0280.severity = warning

# Parentheses preferences
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules#parentheses-preferences

# .NET style rules:

# IDE0047: Remove unnecessary parentheses
# Likely indicates problematic functionality.
# Please keep this rule's severity above silent to avoid problematic functionality.
# IDE0048: Add parentheses for clarity
# Improves readability.
# Please keep this rule's severity above suggestion to actively encourage more readable code.
dotnet_diagnostic.IDE0047.severity = warning
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.IDE0048.severity = suggestion
# Prefer parentheses to clarify arithmetic operator precedence.
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity
# Prefer parentheses to clarify relational operator precedence.
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity
# Prefer parentheses to clarify other binary operator precedence.
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity
# Prefer parentheses to clarify other operator precedence.
dotnet_style_parentheses_in_other_operators = always_for_clarity

# Pattern-matching preferences
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules#pattern-matching-preferences

# C# style rules:

# IDE0019: Use pattern matching to avoid `as` followed by a `null` check
# IDE0078: Use pattern matching
# IDE0260: Use pattern matching
# Simplifies code for readability.
# Please keep this rule's severity above suggestion to actively encourage minimising scope.
dotnet_diagnostic.IDE0019.severity = warning
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0078.severity = suggestion
# Please keep this rule's severity above suggestion to actively encourage minimising scope.
dotnet_diagnostic.IDE0260.severity = warning
# Prefer to use pattern matching constructs, when possible.
csharp_style_prefer_pattern_matching = true
# Prefer pattern matching over as expression with null-conditional member access.
csharp_style_pattern_matching_over_as_with_null_check = true
# IDE0020: Use pattern matching to avoid `is` check followed by a cast (with variable)
# IDE0038: Use pattern matching to avoid `is` check followed by a cast (without variable)
# Simplifies code for readability.
# Please keep these rules' severities above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0020.severity = suggestion
dotnet_diagnostic.IDE0038.severity = suggestion
# Prefer pattern matching instead of is expressions with type casts.
csharp_style_pattern_matching_over_is_with_cast_check = true
# IDE0066: Use switch expression
# Switch expressions lack braces which can complicate debuggability.
# Please keep this rule's severity above silent to actively encourage switch statements over switch expressions for debuggability.
dotnet_diagnostic.IDE0066.severity = suggestion
# Prefer to use a switch statement.
csharp_style_prefer_switch_expression = false
# IDE0083: Use pattern matching (`not` operator)
# Improves readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.IDE0083.severity = suggestion
# Prefer to use the not pattern, when possible.
csharp_style_prefer_not_pattern = true
# IDE0170: Simplify property pattern
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.IDE0170.severity = suggestion
# Prefer the extended property pattern.
csharp_style_prefer_extended_property_pattern = true

# Suppression preferences
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules#suppression-preferences

# .NET style rules:

# IDE0079: Remove unnecessary suppression
# Likely indicates problematic functionality.
# This rule is never enabled on build.
# Please keep this rule's severity above suggestion to avoid problematic functionality.
dotnet_diagnostic.IDE0079.severity = warning
# Enables the rule for all rules (no exclusions).
dotnet_remove_unnecessary_suppression_exclusions = none

# This. and me. preferences
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules#this-and-me-preferences

# .NET style rules:

# IDE0003: Remove `this` or `Me` qualification
# IDE0009: Add `this` or `Me` qualification
# Harmless to functionality, but avoiding `this` can encourage better variable names.
# These rules are never enabled on build.
# Please keep these rules' severities above silent to actively encourage better naming schemes.
dotnet_diagnostic.IDE0003.severity = suggestion
dotnet_diagnostic.IDE0009.Severity = suggestion
# Prefer fields not to be prefaced with this. or Me.
dotnet_style_qualification_for_field = false
# Prefer properties not to be prefaced with this. or Me..
dotnet_style_qualification_for_property = false
# Prefer methods not to be prefaced with this. or Me..
dotnet_style_qualification_for_method = false
# Prefer events not to be prefaced with this. or Me..
dotnet_style_qualification_for_event = false

# var preferences
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules#var-preferences

# C# style rules:

# IDE0007: Use `var` instead of explicit type
# IDE0008: Use explicit type instead of `var`
# `var` should only be used if the type is apparent.
# Otherwise significantly harms readability.
# Please keep these rules' severities above silent to actively encourage better naming schemes.
dotnet_diagnostic.IDE0007.severity = suggestion
dotnet_diagnostic.IDE0008.severity = suggestion
# Prefer explicit type over var to declare variables with built-in system types such as int.
csharp_style_var_for_built_in_types = false
# Prefer explicit type when the type is already mentioned on the right-hand side of a declaration expression.
csharp_style_var_when_type_is_apparent = true
# Prefer explicit type over var in all cases, unless overridden by another code style rule.
csharp_style_var_elsewhere = false

# Miscellaneous Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/miscellaneous-rules

# IDE0076: Remove invalid global `SuppressMessageAttribute`
# Likely indicates problematic functionality.
# Please keep this rule's severity above suggestion to avoid problematic functionality.
dotnet_diagnostic.IDE0076.severity = warning
# IDE0077: Avoid legacy format target in global `SuppressMessageAttribute`
# Legacy format is known to have performance issues.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.IDE0077.severity = warning

# Formatting Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0055

# IDE0055: Fix formatting
# Significantly improves readability.
# Please keep this rule's severity above silent to actively encourage properly formatted code.
dotnet_diagnostic.IDE0055.severity = suggestion

# .NET Formatting Options
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/dotnet-formatting-options

# Using directive options
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/dotnet-formatting-options#using-directive-options

# Do not place System.* using directives before other using directives.
dotnet_sort_system_directives_first = false
# Do not place a blank line between using directive groups.
dotnet_separate_import_directive_groups = false

# C# Formatting Options
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/csharp-formatting-options

# New-line options
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/csharp-formatting-options#new-line-options

# Require braces to be on a new line for all expressions ("Allman" style).
csharp_new_line_before_open_brace = all
# Place else statements on a new line.
csharp_new_line_before_else = true
# Place catch statements on a new line.
csharp_new_line_before_catch = true
# Require finally statements to be on a new line after the closing brace.
csharp_new_line_before_finally = true
# Require members of object initialisers to be on separate lines
csharp_new_line_before_members_in_object_initializers = true
# Require members of anonymous types to be on separate lines
csharp_new_line_before_members_in_anonymous_types = true
# Require elements of query expression clauses to be on separate lines
csharp_new_line_between_query_expression_clauses = true

# Indentation options
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/csharp-formatting-options#indentation-options

# Indent switch case contents
csharp_indent_case_contents = true
# Indent switch labels
csharp_indent_switch_labels = true
# Labels are placed at the leftmost column
csharp_indent_labels = flush_left
# Indent block contents.
csharp_indent_block_contents = true
# Don't indent curly braces.
csharp_indent_braces = false
# When it's a block, don't indent the statement list and curly braces for a case in a switch statement.
csharp_indent_case_contents_when_block = false

# Spacing options
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/csharp-formatting-options#spacing-options

# Remove space between the cast and the value
csharp_space_after_cast = false
# Place a space character after a keyword in a control flow statement such as a for loop
csharp_space_after_keywords_in_control_flow_statements = true
# Never add spaces between parentheses
csharp_space_between_parentheses = false
# Place a space character before the colon for bases or interfaces in a type declaration
csharp_space_before_colon_in_inheritance_clause = true
# Place a space character after the colon for bases or interfaces in a type declaration
csharp_space_after_colon_in_inheritance_clause = true
# Insert space before and after the binary operator
csharp_space_around_binary_operators = before_and_after
# Remove space characters after the opening parenthesis and before the closing parenthesis of a method declaration parameter list
csharp_space_between_method_declaration_parameter_list_parentheses = false
# Remove space within empty parameter list parentheses for a method declaration
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
# Remove space characters between the method name and opening parenthesis in the method declaration
csharp_space_between_method_declaration_name_and_open_parenthesis = false
# Remove space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
# Remove space within empty argument list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false
# Remove space between method call name and opening parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
# Insert space after a comma
csharp_space_after_comma = true
# Remove space before a comma
csharp_space_before_comma = false
# Remove space after a dot
csharp_space_after_dot = false
# Remove space before a dot
csharp_space_before_dot = false
# Insert space after each semicolon in a for statement
csharp_space_after_semicolon_in_for_statement = true
# Remove space before each semicolon in a for statement
csharp_space_before_semicolon_in_for_statement = false
# Remove extra space characters in declaration statements
csharp_space_around_declaration_statements = false
# Remove space before opening square brackets [
csharp_space_before_open_square_brackets = false
# Remove space between empty square brackets []
csharp_space_between_empty_square_brackets = false
# Remove space characters in non-empty square brackets [0]
csharp_space_between_square_brackets = false

# Wrap options
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/csharp-formatting-options#wrap-options

# Leave statements and member declarations on different lines
csharp_preserve_single_line_statements = false
# Leave code block on separate lines
csharp_preserve_single_line_blocks = false

# Naming Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/naming-rules

# IDE1006: Naming styles
# Code styles make searching & organisation easier.
# Please keep this rule's severity above silent to actively encourage naming styles.
dotnet_diagnostic.IDE1006.severity = suggestion

# End of built-in analysers.
# First-party analysers:

# Code Quality Rules, .NET 5+ uses these by default, so they're recommended.
# https://www.nuget.org/packages/Microsoft.CodeAnalysis.NetAnalyzers
# https://learn.microsoft.com/en-ca/dotnet/fundamentals/code-analysis/quality-rules/
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/code-quality-rule-options

# Design Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/design-warnings

# CA1000: Do not declare static members on generic types
# Static members on generic types are highly confusing.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.CA1000.severity = suggestion
dotnet_code_quality.CA1000.api_surface = all
# CA1001: Types that own disposable fields should be disposable
# Classes should implement the IDisposable interface to dispose of the unmanaged resource that it owns once the resource is no longer in use.
# Please keep this rule's severity above suggestion to avoid problematic functionality.
dotnet_diagnostic.CA1001.severity = warning
# CA1002: Do not expose generic lists
# Generic lists are designed for performance, not inheritance.
# Please keep this rule's severity above suggestion to actively encourage using types that are designed for inheritance where applicable.
dotnet_diagnostic.CA1002.severity = warning
dotnet_code_quality.CA1002.api_surface = public, internal
# CA1003: Use generic event handler instances
# As of .NET Framework 2.0, there is an easier way to pass custom info to the event handler.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.CA1003.severity = suggestion
dotnet_code_quality.CA1003.api_surface = all
# CA1005: Avoid excessive parameters on generic types
# Generic types with too many parameters are difficult to understand.
# Please keep this rule's severity above suggestion to actively avoid diffficult to understand types.
dotnet_diagnostic.CA1005.severity = warning
dotnet_code_quality.CA1005.api_surface = all
# CA1008: Enums should have zero value
# The default value of an enum should always be valid.
# Please keep this rule's severity above suggestion to avoid problematic functionality.
dotnet_diagnostic.CA1008.severity = warning
dotnet_code_quality.CA1008.api_surface = all
# CA1010: Collections should implement generic interface
# To broaden the usability of a collection, implement one of the generic collection interfaces. Then the collection can be used to populate generic collection types.
# Please keep this rule's severity above suggestion to actively encourage broadening the usability of a collection.
dotnet_diagnostic.CA1010.severity = warning
dotnet_code_quality.CA1010.api_surface = all
# CA1012: Abstract types should not have public constructors
# Public constructors create instances of a type, but you cannot create instances of abstract types.
# Please keep this rule's severity above suggestion to avoid problematic functionality.
dotnet_diagnostic.CA1012.severity = warning
dotnet_code_quality.CA1012.api_surface = all
# CA1014: Mark assemblies with CLSCompliantAttribute
# Good design dictates that all assemblies explicitly indicate CLS compliance with CLSCompliantAttribute.
# Please keep this rule's severity above suggestion to actively encourage marking assemblies with CLSCompliantAttribute.
dotnet_diagnostic.CA1014.severity = warning
# CA1016: Mark assemblies with AssemblyVersionAttribute
# Versions are used to bind to types in strongly named assemblies & ensure the application only runs with the proper assembly version.
# Please keep this rule's severity above suggestion to actively encourage versioning assemblies.
dotnet_diagnostic.CA1016.severity = warning
# CA1017: Mark assemblies with ComVisibleAttribute
# Good design dictates that assemblies explicitly indicate COM visibility.
# Please keep this rule's severity above suggestion to actively encourage marking assemblies with ComVisibleAttribute.
dotnet_diagnostic.CA1017.severity = warning
# CA1018: Mark attributes with AttributeUsageAttribute
# Attributes should be marked with [AttributeUsage] to explicitly specify how the attribute is to be used.
# Please keep this rule's severity above suggestion to actively encourage properly implementing attributes.
dotnet_diagnostic.CA1018.severity = warning
# CA1019: Define accessors for attribute arguments
# Defining accessors for arguments allows the value of the argument to be retrieved at runtime.
# Please keep this rule's severity above suggestion to actively encourage more easily debuggable code.
dotnet_diagnostic.CA1019.severity = warning
# CA1021: Avoid out parameters
# Out parameters in public code indicate poorly designed code & harm readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.CA1021.severity = suggestion
dotnet_code_quality.CA1021.api_surface = public
# CA1024: Use properties where appropriate
# Defining a method prefixed with 'Get' likely indicates a property.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.CA1024.severity = suggestion
dotnet_code_quality.CA1024.api_surface = all
# CA1027: Mark enums with FlagsAttribute
# Enums applicable to be considered as bit flags should be marked with FlagsAttribute.
# Please keep this rule's severity above suggestion to actively encourage properly marking bit field enums.
dotnet_diagnostic.CA1027.severity = warning
dotnet_code_quality.CA1027.api_surface = all
# CA1028: Enum storage should be Int32
# No significant performance gain is achieved by altering the underlying type of enums.
# Please keep this rule's severity above suggestion to actively encourage recommended enum design.
dotnet_diagnostic.CA1028.severity = warning
dotnet_code_quality.CA1028.api_surface = all
# CA1030: Use events where appropriate
# Naming a method 'AddOn', 'RemoveOn', 'Fire' or 'Raise' likely indicates that an event should be used.
# Please keep this rule's severity above suggestion to actively encourage more readable code.
dotnet_diagnostic.CA1030.severity = warning
dotnet_code_quality.CA1030.api_surface = all
# CA1031: Do not catch general exception types
# Catching general exception types can hide run-time problems from the library user and can make debugging more difficult.
# Please keep this rule's severity above suggestion to actively encourage more easily debuggable code.
dotnet_diagnostic.CA1031.severity = warning
# CA1032: Implement standard exception constructors
# Failure to provide the full set of constructors can make it difficult to correctly handle exceptions.
# Please keep this rule's severity above suggestion to actively encourage avoiding handling exceptions difficult.
dotnet_diagnostic.CA1032.severity = warning
# CA1033: Interface methods should be callable by child types
# Interface methods not callable by child types can cause recursion & stack overflow.
# Please keep this rule's severity above suggestion to avoid stack overflows.
dotnet_diagnostic.CA1033.severity = warning
# CA1034: Nested types should not be visible
# Nested types should not be visible, otherwise the type should not be nested.
# Please keep this rule's severity above suggestion to actively encourage more readable code.
dotnet_diagnostic.CA1034.severity = warning
# CA1036: Override methods on comparable types
# Comparable types are to override methods for comparisons.
# Please keep this rule's severity above suggestion to actively encourage properly implementing comparable types.
dotnet_diagnostic.CA1036.severity = warning
dotnet_code_quality.CA1036.api_surface = all
# CA1040: Avoid empty interfaces
# Empty interfaces are redundant. Custom attributes should be used instead to label a set of types instead.
# Please keep this rule's severity above suggestion to actively discourage empty interfaces.
dotnet_diagnostic.CA1040.severity = warning
dotnet_code_quality.CA1040.api_surface = all
# CA1041: Provide ObsoleteAttribute message
# Providing a message for ObsoleteAttribute documents the obsoletion of the type or member.
# Please keep this rule's severity above suggestion to actively encourage documenting obsoletions.
dotnet_diagnostic.CA1041.severity = warning
dotnet_code_quality.CA1041.api_surface = all
# CA1043: Use integral or string argument for indexers
# Indexers should use standard types for the index.
# Please keep this rule's severity above suggestion to actively encourage standard design for indexers.
dotnet_diagnostic.CA1043.severity = warning
dotnet_code_quality.CA1043.api_surface = all
# CA1044: Properties should not be write only
# Write-only properties are not useful.
# Please keep this rule's severity above suggestion to actively discourage useless code.
dotnet_diagnostic.CA1044.severity = warning
dotnet_code_quality.CA1044.api_surface = all
# CA1045: Do not pass types by reference
# Ref parameters in public code indicate poorly designed code & harm readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.CA1045.severity = suggestion
dotnet_code_quality.CA1045.api_surface = public
# CA1046: Do not overload operator equals on reference types
# The default implementation of the equality operator is almost always correct.
# Please keep this rule's severity above silent to actively discourage potentially undesired functionality.
dotnet_diagnostic.CA1046.severity = suggestion
dotnet_code_quality.CA1046.api_surface = all
# CA1047: Do not declare protected members in sealed types
# Sealed types cannot be inherited. A protected member is no different than a private member for a sealed type.
# Please keep this rule's severity above suggestion to actively discourage useless code.
dotnet_diagnostic.CA1047.severity = warning
dotnet_code_quality.CA1047.api_surface = all
# CA1050: Declare types in namespaces
# Types should always be placed into namespaces for organisation.
# Please keep this rule's severity above silent to actively discourage declaring types into default namespaces.
dotnet_diagnostic.CA1050.severity = suggestion
# CA1051: Do not declare visible instance fields
# Fields should be exposed via properties.
# Please keep this rule's severity above silent to actively encourage using properties over visible instance fields.
dotnet_diagnostic.CA1051.severity = suggestion
dotnet_code_quality.CA1051.api_surface = all
# CA1052: Static holder types should be Static or NotInheritable
# Static holder types should not be inheritable.
# Please keep this rule's severity above suggestion to actively encourage properly implementing static holder types.
dotnet_diagnostic.CA1052.severity = warning
dotnet_code_quality.CA1052.api_surface = all
# CA1053: Static holder types should not have default constructors
# CA1053 has been combined with CA1052.
# Please see CA1052 instead.

# CA1054: URI parameters should not be strings
# CA1055: URI return values should not be strings
# CA1056: URI properties should not be strings
# The URI class is safer than using strings.
# Please keep these rules' severities above suggestion to actively avoid security vulnerabilities.
dotnet_diagnostic.CA1054.severity = warning
dotnet_code_quality.CA1054.api_surface = all
dotnet_diagnostic.CA1055.severity = warning
dotnet_code_quality.CA1055.api_surface = all
dotnet_diagnostic.CA1056.severity = warning
dotnet_code_quality.CA1056.api_surface = all
# CA1058: Types should not extend certain base types
# Exceptions should derive from System.Exception. Use generic collections where possible.
# Please keep this rule's severity above suggestion to actively avoid misusing certain base types.
dotnet_diagnostic.CA1058.severity = warning
dotnet_code_quality.CA1058.api_surface = all
# CA1060: Move P/Invokes to NativeMethods class
# Moving P/Invokes to a more appropriate class is a safer approach.
# Please keep this rule's severity above suggestion to actively discourage unsafe code.
dotnet_diagnostic.CA1060.severity = warning
# CA1061: Do not hide base class methods
# Base class methods should never be hidden.
# Please keep this rule's severity above suggestion to actively discourage hiding base class methods.
dotnet_diagnostic.CA1061.severity = warning
# CA1062: Validate arguments of public methods
# Arguments for public methods should always be validated.
# Please keep this rule's severity above suggestion to actively encourage validating arguments of public methods.
dotnet_diagnostic.CA1062.severity = warning
dotnet_code_quality.CA1062.api_surface = all
# CA1063: Implement IDisposable correctly
# Disposable types should always be implemented correctly.
# Please keep this rule's severity above suggestion to actively discourage implementing disposable types improperly.
dotnet_diagnostic.CA1063.severity = warning
dotnet_code_quality.CA1063.api_surface = all
# CA1064: Exceptions should be public
# Making exceptions public make them easier to handle.
# Please keep this rule's severity above suggestion to actively encourage easy to use exceptions.
dotnet_diagnostic.CA1064.severity = warning
# CA1065: Do not raise exceptions in unexpected locations
# Exceptions should not be raised in unexpected locations.
# Please keep this rule's severity above suggestion to actively avoid raising exceptions in unexpected locations.
dotnet_diagnostic.CA1065.severity = warning
# CA1066: Implement IEquatable when overriding Equals
# Implementing IEquatable when overriding Equals improves performance.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1066.severity = warning
# CA1067: Override Equals when implementing IEquatable
# Overriding equals when implementing IEquatable ensures that IEquatable is properly implemented.
# Please keep this rule's severity above suggestion to actively encourage properly implementing IEquatable.
dotnet_diagnostic.CA1067.severity = warning
# CA1068: CancellationToken parameters must come last
# Placing the CancellationToken parameter at the end is expected API design.
# Please keep this rule's severity above suggestion to actively encourage expected API design.
dotnet_diagnostic.CA1068.severity = warning
dotnet_code_quality.CA1068.api_surface = all
# CA1069: Enums should not have duplicate values
# Duplicate values in enums likely indicate undesired functionality.
# Please keep this rule's severity above suggestion to actively discourage undesired functionality.
dotnet_diagnostic.CA1069.severity = warning
# CA1070: Do not declare event fields as virtual
# It's unpredictable whether a subscriber to the derived event will actually be subscribing to the base class event.
# Please keep this rule's severity above suggestion to actively discourage problematic functionality.
dotnet_diagnostic.CA1070.severity = warning
dotnet_code_quality.CA1070.api_surface = all

# Documentation Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/documentation-warnings

# CA1200: Avoid using cref tags with a prefix
# Prefixing cref tags prevents refactorings & compiler reference verification.
# Please keep this rule's severity above silent to actively discourage improper cref syntax.
dotnet_diagnostic.CA1200.severity = suggestion

# Globalisation Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/globalization-warnings

# CA1303: Do not pass literals as localised parameters
# String literals that are embedded in source code are difficult to localise.
# Please keep this rule's severity above suggestion to actively discourage magic strings.
dotnet_diagnostic.CA1303.severity = warning
# Configures whether parameters or property names containing Text, Message, or Caption will trigger this rule.
dotnet_code_quality.CA1303.use_naming_heuristic = true
# CA1304: Specify CultureInfo
# CA1305: Specify IFormatProvider
# When CultureInfo/IFormatProvider is not specified, the default value may have unintended behaviour.
# Please keep these rules' severities above suggestion to actively avoid unintended behaviour.
dotnet_diagnostic.CA1304.severity = warning
dotnet_diagnostic.CA1305.severity = warning
# CA1307: Specify StringComparison for clarity
# Comparing strings without providing a StringComparison enum value is less readable.
# Please keep this rule's severity above suggestion to actively encourage more readable code.
dotnet_diagnostic.CA1307.severity = warning
# CA1308: Normalise strings to uppercase
# A small group of characters, when they are converted to lowercase, cannot make a round trip.
# Please keep this rule's severity above suggestion to actively avoid unintended behaviour.
dotnet_diagnostic.CA1308.severity = warning
# CA1309: Use ordinal StringComparison
# Specifying StringComparison improves performance & reliability.
# Please keep this rule's severity above suggestion to actively encourage more performant & reliable code.
dotnet_diagnostic.CA1309.severity = warning
# CA1310: Specify StringComparison for correctness
# Specifying StringComparison avoids using the default value based on the user's locale.
# Please keep this rule's severity above suggestion to actively discourage relying on default locale values.
dotnet_diagnostic.CA1310.severity = warning
# CA1311: Specify a culture or use an invariant version
# Avoids relying on the application's current culture.
# Please keep this rule's severity above suggestion to actively discourage relying on the application's current culture.
dotnet_diagnostic.CA1311.severity = warning
# CA2101: Specify marshalling for P/Invoke string arguments
# Unspecified marshalling results in uncontrollable character substitution, which can lead to security flaws.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities.
dotnet_diagnostic.CA2101.severity = warning

# Portability & Interopability Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/interoperability-warnings

# CA1401: P/Invokes should not be visible
# Visible P/Invokes allows callers to access unmanaged APIs.
# Please keep this rule's severity above suggestion to actively discourage breaching security.
dotnet_diagnostic.CA1401.severity = warning
# CA1416: Validate platform compatibility
# Platform-specific APIs should not be in platform-neutral code.
# Please keep this rule's severity above suggestion to actively discourage using platform-specific APIs on all platforms.
dotnet_diagnostic.CA1416.severity = warning
# CA1417: Do not use OutAttribute on string parameters for P/Invokes
# It is not safe to use OutAttribute on string parameters for P/Invokes.
# Please keep this rule's severity above suggestion to actively discourage unsafe code.
dotnet_diagnostic.CA1417.severity = warning
# CA1418: Validate platform compatibility
# Invalid platform compatibility is not recommended.
# Please keep this rule's severity above suggestion to actively discourage invalid syntax.
dotnet_diagnostic.CA1418.severity = warning
# CA1419: Provide a parameterless constructor that is as visible as the containing type for concrete types derived from 'System.Runtime.InteropServices.SafeHandle'
# Doing so improves performance.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1419.severity = warning
# CA1420: Property, type, or attribute requires runtime marshalling
# Requiring marshalling when disabled causes runtime exceptions.
# Please keep this rule's severity above suggestion to actively avoid runtime exceptions.
dotnet_diagnostic.CA1420.severity = warning
# CA1421: Method uses runtime marshalling when DisableRuntimeMarshallingAttribute is applied
# Doing so causes unexpected behaviour differences.
# Please keep this rule's severity above suggestion to avoid problematic functionality.
dotnet_diagnostic.CA1421.severity = warning
# CA1422: Validate platform compatibility - obsoleted APIs
# Obsoleted APIs should not be called.
# Please keep this rule's severity above suggestion to actively discourage calling obsoleted APIs.
dotnet_diagnostic.CA1422.severity = warning

# Maintainability Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/maintainability-warnings

# CA1501: Avoid excessive inheritance
# Excessive inheritance is difficult to understand.
# This rule's threshold can be configured via an AdditionalFile named "CodeMetricsConfig.txt".
# Please keep this rule's severity above silent to avoid excessive inheritance for maintainability.
dotnet_diagnostic.CA1501.severity = suggestion
# CA1502: Avoid excessive complexity
# Complex code is difficult to read.
# This rule's threshold can be configured via an AdditionalFile named "CodeMetricsConfig.txt".
# Please keep this rule's severity above silent to actively avoid excessive complexity for maintainability.
dotnet_diagnostic.CA1502.severity = suggestion
# CA1505: Avoid unmaintainable code
# Complicated code is difficult to maintain.
# This rule's threshold can be configured via an AdditionalFile named "CodeMetricsConfig.txt".
# Please keep this rule's severity above silent to actively avoid unmaintainable code for maintainability.
dotnet_diagnostic.CA1505.severity = suggestion
# CA1506: Avoid excessive class coupling
# Excessive class coupling is difficult to maintain.
# This rule's threshold can be configured via an AdditionalFile named "CodeMetricsConfig.txt".
# Please keep this rule's severity above silent to actively avoid excessive class coupling for maintainability.
dotnet_diagnostic.CA1506.severity = suggestion
# CA1507: Use nameof in place of string
# Magic strings are to be avoided where possible.
# Please keep this rule's severity above suggestion to actively avoid magic strings for maintainability.
dotnet_diagnostic.CA1507.severity = warning
# CA1508: Avoid dead conditional code
# Dead conditional code is unreachable.
# Please keep this rule's severity above suggestion to actively avoid dead conditional code for maintainability.
dotnet_diagnostic.CA1508.severity = warning
# CA1509: Invalid entry in code metrics configuration file
# Invalid entries prevent other code quality analyser rules from functioning properly.
# Please keep this rule's severity above suggestion to avoid invalid entries in code metrics config file for maintainability.
dotnet_diagnostic.CA1509.severity = warning
# CA1510: Use ArgumentNullException throw helper
# CA1511: Use ArgumentException throw helper
# CA1512: Use ArgumentOutOfRangeException throw helper
# CA1513: Use ObjectDisposedException throw helper
# Throw helpers are unavailable in .NET 4.x.
# Please keep these rules' severities disabled to avoid using .NET 5+ features.
dotnet_diagnostic.CA1510.severity = none
dotnet_diagnostic.CA1511.severity = none
dotnet_diagnostic.CA1512.severity = none
dotnet_diagnostic.CA1513.severity = none
# Throw helpers are .NET 7+, except for ArgumentOutOfRangeException throw helpers, which are .NET 8+.

# CA1514: Avoid redundant length argument
# Redundant length arguments can be removed to simplify code for maintainability.
# Please keep this rule's severity above suggestion to actively avoid redundant length arguments for maintainability.
dotnet_diagnostic.CA1514.severity = warning
# CA1515: Consider making public types internal
# Application API isn't typically referenced publicly.
# Please keep this rule's severity above silent to actively encourage simplifying which analysers are active for maintainability.
dotnet_diagnostic.CA1515.severity = suggestion

# Naming Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/naming-warnings

# CA1700: Do not name enum values 'Reserved'
# Naming enum values "Reserved" does not improve functionality.
# Please keep this rule's severity above suggestion to actively encourage properly naming enum values.
dotnet_diagnostic.CA1700.severity = warning
dotnet_code_quality.CA1700.api_surface = all
# CA1707: Identifiers should not contain underscores
# Avoiding underscores simplifies code.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.CA1707.severity = suggestion
dotnet_code_quality.CA1707.api_surface = public
# CA1708: Identifiers should differ by more than case
# Identifiers that do not differ beyond case are confusing.
# Please keep this rule's severity above suggestion to actively encourage properly naming identifiers.
dotnet_diagnostic.CA1708.severity = warning
dotnet_code_quality.CA1708.api_surface = all
# CA1710: Identifiers should have correct suffix
# CA1711: Identifiers should not have incorrect suffix
# Providing suffixes to identifiers improves readability.
# Please keep these rules' severities above suggestion to actively encourage properly naming identifiers.
dotnet_diagnostic.CA1710.severity = warning
dotnet_code_quality.CA1710.api_surface = all
dotnet_diagnostic.CA1711.severity = warning
dotnet_code_quality.CA1711.api_surface = all
# CA1712: Do not prefix enum values with type name
# Enum values should not be prefixed with type names.
# Please keep this rule's severity above suggestion to actively encourage properly naming enum values.
dotnet_diagnostic.CA1712.severity = warning
# CA1713: Events should not have before or after prefix
# Events should be named with descriptive words, not "Before" / "After".
# Please keep this rule's severity above suggestion to actively encourage properly naming events.
dotnet_diagnostic.CA1713.severity = warning
# CA1715: Identifiers should have correct prefix
# Interfaces should start with I & type parameters should start with T.
# Please keep this rule's severity above suggestion to actively encourage properly naming identifiers.
dotnet_diagnostic.CA1715.severity = warning
dotnet_code_quality.CA1715.api_surface = all
# CA1716: Identifiers should not match keywords
# Identifier names that match keywords harm readability.
# Please keep this rule's severity above suggestion to actively encourage properly naming identifiers.
dotnet_diagnostic.CA1716.severity = warning
dotnet_code_quality.CA1716.api_surface = all
# CA1720: Identifiers should not contain type names
# Placing type names into identifiers harms readability.
# Please keep this rule's severity above suggestion to actively encourage properly naming identifiers.
dotnet_diagnostic.CA1720.severity = warning
dotnet_code_quality.CA1720.api_surface = all
# CA1721: Property names should not match get methods
# Property names matching get methods can be confusing.
# Please keep this rule's severity above suggestion to actively encourage properly naming identifiers.
dotnet_diagnostic.CA1721.severity = warning
dotnet_code_quality.CA1721.api_surface = all
# CA1724: Type names should not match namespaces
# Type names matching namespaces harms readability.
# Please keep this rule's severity above suggestion to actively encourage properly naming identifiers.
dotnet_diagnostic.CA1724.severity = warning
# CA1725: Parameter names should match base declaration
# Parameter names should be consistent between method overrides for readability.
# Please keep this rule's severity above suggestion to actively encourage properly naming parameters.
dotnet_diagnostic.CA1725.severity = warning
dotnet_code_quality.CA1725.api_surface = all
# CA1727: Use PascalCase for named placeholders
# Named placeholders should always use PascalCase for readability.
# Please keep this rule's severity above suggestion to actively encourage properly naming identifiers.
dotnet_diagnostic.CA1727.severity = warning

# Performance Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/performance-warnings

# CA1802: Use Literals Where Appropriate
# Constants do not need to be computed at runtime, unlike static readonly values.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1802.severity = warning
dotnet_code_quality.CA1802.api_surface = all
dotnet_code_quality.CA1802.required_modifiers = static, readonly
# CA1805: Do not initialise unnecessarily
# Initialising fields to default values is redundant.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1805.severity = warning
# CA1806: Do not ignore method results
# Ignoring method results is redundant.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1806.severity = warning
# CA1810: Initialise reference type static fields inline
# Initialising reference type static fields via cctor reduces performance.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1810.severity = warning
# CA1812: Avoid uninstantiated internal classes
# Uninstantiated internal classes are redundant.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1812.severity = warning
dotnet_code_quality.CA1812.ignore_internalsvisibleto = true
# CA1813: Avoid unsealed attributes
# Attributes should always be sealed to remove them from search results.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1813.severity = warning
# CA1814: Prefer jagged arrays over multidimensional
# Jagged arrays can result in less wasted space for some sets of data.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1814.severity = warning
# CA1815: Override equals and operator equals on value types
# The default implementation of Equals uses reflection.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1815.severity = warning
dotnet_code_quality.CA1815.api_surface = all
# CA1819: Properties should not return arrays
# Arrays are not write-protected & returning a new array is expensive.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1819.severity = warning
dotnet_code_quality.CA1819.api_surface = all
# CA1820: Test for empty strings using string length
# String.Length or String.IsNullOrEmpty is significantly faster than Equals.
# Please keep this rule's severity above suggestion to actively encourage significantly more performant code.
dotnet_diagnostic.CA1820.severity = warning
# CA1821: Remove empty finalisers
# Empty finalisers are redundant.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1821.severity = warning
# CA1822: Mark members as static
# MAS0001: Suppress CA1822 on methods decorated with BenchmarkDotNet attributes.
# MAS0002: Suppress CA1822 on methods decorated with a System.Text.Json attribute such as [JsonPropertyName] or [JsonInclude].
# If a member does not access instance data, marking as static improves performance.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1822.severity = warning
dotnet_code_quality.CA1822.api_surface = all
# CA1823: Avoid unused private fields
# Unused private fields are redundant.
# Please keep this rule's severity above suggestion to actively encourage more perfotmant code.
dotnet_diagnostic.CA1823.severity = warning
# CA1824: Mark assemblies with NeutralResourcesLanguageAttribute
# Assemblies with ResX-based resources benefit from having the neutral resources language specified.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1824.severity = warning
# CA1825: Avoid zero-length array allocations
# Zero-length arrays always allocate memory, unlike Array.Empty.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1825.severity = warning
# CA1826: Use property instead of Linq Enumerable method
# A more efficient property is available.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1826.severity = warning
# CA1827: Do not use Count()/LongCount() when Any() can be used
# Any is more performant than Count/LongCount.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1827.severity = warning
# CA1828: Do not use CountAsync/LongCountAsync when AnyAsync can be used
# AnyAsync is more performant than CountAsync/LongCountAsync.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1828.severity = warning
# CA1829: Use Length/Count property instead of Enumerable.Count method
# A more efficient property is available.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1829.severity = warning
# CA1830: Prefer strongly-typed Append and Insert method overloads on StringBuilder
# A more efficient method to add data to string is available.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1830.severity = warning
# CA1831: Use AsSpan instead of Range-based indexers for string when appropriate
# AsSpan over range-based indexers avoids creating a new string.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1831.severity = warning
# CA1832: Use AsSpan or AsMemory instead of Range-based indexers for getting ReadOnlySpan or ReadOnlyMemory portion of an array
# AsSpan/AsMemory over Range-based indexers avoids creating a new array.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1832.severity = warning
# CA1833: Use AsSpan or AsMemory instead of Range-based indexers for getting Span or Memory portion of an array
# AsSpan/AsMemory over Range-based indexers avoids creating a new array.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1833.severity = warning
# CA1834: Use StringBuilder.Append(char) for single character strings
# StringBuilder.Append(char) has better performance than single character strings.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1834.severity = warning
# CA1835: Prefer the memory-based overloads of ReadAsync/WriteAsync methods in stream-based classes
# The memory-based overloads are more efficient.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1835.severity = warning
# CA1836: Prefer IsEmpty over Count when available
# IsEmpty is more efficient than Count.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1836.severity = warning
# CA1837: Use Environment.ProcessId instead of Process.GetCurrentProcess().Id
# Environment.ProcessId is more performant than Process.GetCurrentProcess().Id.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1837.severity = warning
# CA1838: Avoid StringBuilder parameters for P/Invokes
# StringBuilder parameters for P/Invokes always causes multiple allocations.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1838.severity = warning
# CA1839: Use Environment.ProcessPath instead of Process.GetCurrentProcess().MainModule.FileName
# Environment.ProcessPath is more performant than Process.GetCurrentProcess().MainModule.FileName.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1839.severity = warning
# CA1840: Use Environment.CurrentManagedThreadId instead of Thread.CurrentThread.ManagedThreadId
# Environment.CurrentManagedThreadId is more performant than Thread.CurrentThread.ManagedThreadId.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1840.severity = warning
# CA1841: Prefer Dictionary Contains methods
# Calling Contains on Keys/Values is often worse than calling ContainsKey/ContainsValue directly.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1841.severity = warning
# CA1842: Do not use 'WhenAll' with a single task
# Using WhenAll with a single task may result in performance loss.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1842.severity = warning
# CA1843: Do not use 'WaitAll' with a single task
# Using WaitAll with a single task may result in performance loss.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1843.severity = warning
# CA1844: Provide memory-based overrides of async methods when subclassing 'Stream'
# Doing so improves performance.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1844.severity = warning
# CA1845: Use span-based 'string.Concat'
# It's more performant to use AsSpan & string.Concat over Substring & concatenation operator.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1845.severity = warning
# CA1846: Prefer AsSpan over Substring
# AsSpan is more performant than Substring.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1846.severity = warning
# CA1847: Use string.Contains(char) instead of string.Contains(string) with single characters
# string.Contains(char) is more performant than string.Contains(string) for single characters.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1847.severity = warning
# CA1848: Use the LoggerMessage delegates
# The LoggerMessage delegates have better performance over Logger extension methods.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1848.severity = warning
# CA1849: Call async methods when in an async method
# Calling async versions of methods improves performance.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1849.severity = warning
# CA1850: Prefer static HashData method over ComputeHash
# HashData method is more efficient than ComputeHash.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1850.severity = warning
# CA1851: Possible multiple enumerations of IEnumerable collection
# Avoiding multiple enumerations increases performance.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1851.severity = warning
# CA1852: Seal internal types
# Types that are inaccessible from outside the assembly & have no subtypes within the containing assembly can be sealed.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1852.severity = warning
dotnet_code_quality.CA1852.ignore_internalsvisibleto = true
# CA1853: Unnecessary call to 'Dictionary.ContainsKey(key)'
# ContainsKey does not need to be checked before using Dictionary.Remove(key).
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1853.severity = warning
# CA1854: Prefer the IDictionary.TryGetValue(TKey, out TValue) method
# Using TryGetValue avoids an extra lookup.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1854.severity = warning
# CA1855: Use Span<T>.Clear() instead of Span<T>.Fill()
# Span.Clear is more performant than Span.Fill.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1855.severity = warning
# CA1856: Incorrect usage of ConstantExpected attribute
# Improper usage of ConstantExpected should always be corrected.
# Please keep this rule's severity above suggestion to actively avoid incorrect usage of ConstantExpected.
dotnet_diagnostic.CA1856.severity = warning
# CA1857: The parameter expects a constant for optimal performance
# Valid arguments should always be passed to parameters annotated with ConstantExpectedAttribute.
# Please keep this rule's severity above suggestion to actively avoid invalid arguments for parameters annotated with ConstantExpectedAttribute.
dotnet_diagnostic.CA1857.severity = warning
# CA1858: Use StartsWith instead of IndexOf
# StartsWith is more performant than IndexOf.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1858.severity = warning
# CA1859: Use concrete types when possible for improved performance
# Concrete types avoid unnecessary interface or virtual calls.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1859.severity = warning
dotnet_code_quality.CA1859.api_surface = all
# CA1860: Avoid using 'Enumerable.Any()' extension method
# Enumerable.Any is less readable & less performant than using Length, Count or IsEmpty.
# Please keep this rule's severity above suggestion to actively encourage more readable & performant code.
dotnet_diagnostic.CA1860.severity = warning
# CA1861: Avoid constant arrays as arguments
# Constant arrays as arguments implies overhead, consider static readonly instead.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1861.severity = warning
# CA1862: Use the 'StringComparison' method overloads to perform case-insensitive string comparisons
# Case insensitive string comparison is more performant than manually converting the case of both strings.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1862.severity = warning
# CA1863: Use 'CompositeFormat'
# CompositeFormat is more performant than parsing a format string at runtime.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1863.severity = warning
# CA1864: Prefer the 'IDictionary.TryAdd(TKey, TValue)' method
# TryAdd avoids a lookup from ContainsKey & Add together.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1864.severity = warning
# CA1865-CA1867: Use 'string.Method(char)' instead of 'string.Method(string)' for string with single char
# CA1865: Applies when a safe transformation can be performed automatically with a code fix.
# CA1866: Applies when there's no specified comparison.
# CA1867: Applies for any other string comparison not covered by the other two rules.
# string.Method(char) is more performant than string.Method(string) for single char.
# Please keep these rules' severities above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1865.severity = warning
dotnet_diagnostic.CA1866.severity = warning
dotnet_diagnostic.CA1867.severity = warning
# CA1868: Unnecessary call to 'Contains' for sets
# Add/Remove return a bool indicating if the operation was successful, rendering calling Contains unnecessary.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1868.severity = warning
# CA1869: Cache and reuse 'JsonSerialiserOptions' instances
# Not reusing a cached instance of JsonSerialiserOptions significantly harms performance.
# Please keep this rule's severity above suggestion to actively encourage significantly more performant code.
dotnet_diagnostic.CA1869.severity = warning
# CA1870: Use a cached 'SearchValues' instance
# Using a cached SearchValues<T> instance is more efficient than passing values to 'IndexOfAny' or 'ContainsAny' directly.
# Please keep this rule's severity above suggestion to actively encourage significantly more performant code.
dotnet_diagnostic.CA1870.severity = warning
# CA1871: Do not pass a nullable struct to 'ArgumentNullException.ThrowIfNull'
# Manually checking HasValue and throwing is more performant than passing a nullable struct to ArgumentNullException.ThrowIfNull.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1871.severity = warning
# CA1872: Prefer 'Convert.ToHexString' and 'Convert.ToHexStringLower' over call chains based on 'BitConverter.ToString'
# Convert.ToHexString & Convert.ToHexStringLower are more performant than call chains based on BitConverter.ToString.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.CA1872.severity = warning

# ! SingleFile Rules
# These rules have been moved to ILLink.
# https://github.com/dotnet/runtime/blob/main/docs/tools/illink/README.md
# https://learn.microsoft.com/en-us/dotnet/core/deploying/single-file/warnings/overview

# Reliability Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/reliability-warnings

# CA2000: Dispose objects before losing scope
# Objects should always be disposed before all references are out of scope.
# Please keep this rule's severity above suggestion to actively avoid undisposed objects.
dotnet_diagnostic.CA2000.severity = warning
# CA2002: Do not lock on objects with weak identity
# Locks should not be accessible across application domain boundaries.
# Please keep this rule's severity above suggestion to actively avoid locking on objects with weak identity.
dotnet_diagnostic.CA2002.severity = warning
# CA2007: Do not directly await a Task
# VSTHRD111 should control directly awaiting a Task preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.CA2007.severity = none
# Please see VSTHRD111 instead.

# CA2008: Do not create tasks without passing a TaskScheduler
# Creating a task without passing a TaskScheduler relies on the default value, which is unreliable.
# Please keep this rule's severity above suggestion to actively avoid problematic functionality.
dotnet_diagnostic.CA2008.severity = warning
# CA2009: Do not call ToImmutableCollection on an ImmutableCollection value
# The collection is already an immutable collection.
# Please keep this rule's severity above suggestion to actively discourage redundant code.
dotnet_diagnostic.CA2009.severity = warning
# CA2011: Do not assign property within its setter
# Doing so causes an infinite loop.
# Please keep this rule's severity above suggestion to actively avoid infinite loops.
dotnet_diagnostic.CA2011.severity = warning
# CA2012: Use ValueTasks correctly
# Improperly using ValueTasks can lead to exceptions or corruption.
# Please keep this rule's severity above suggestion to actively avoid using ValueTasks improperly.
dotnet_diagnostic.CA2012.severity = warning
# CA2013: Do not use ReferenceEquals with value types
# Using ReferenceEquals with value types boxes them first, always resulting in returning false.
# Please keep this rule's severity above suggestion to actively avoid problematic functionality.
dotnet_diagnostic.CA2013.severity = warning
# CA2014: Do not use stackalloc in loops
# Using stackalloc in loops can potentially lead to stack overflow.
# Please keep this rule's severity above suggestion to actively avoid stack overflows.
dotnet_diagnostic.CA2014.severity = warning
# CA2015: Do not define finalisers for types derived from MemoryManager<T>
# Adding a finaliser to a type derived from MemoryManager<T> may permit memory to be freed while it is still in use by a Span<T>.
# Please keep this rule's severity above suggestion to actively avoid freeing memory that is still in use.
dotnet_diagnostic.CA2015.severity = warning
# CA2016: Forward the CancellationToken parameter to methods that take one
# Doing so ensures the operation cancellation notifications gets properly propagated, or pass in CancellationToken.None explicitly to indicate intentionally not propagating the token.
# Please keep this rule's severity above suggestion to actively discourage improperly propagated operation cancellation notifications.
dotnet_diagnostic.CA2016.severity = warning
# CA2017: Parameter count mismatch
# The number of parameters supplied in logging messages should always match the number of named placeholders.
# Please keep this rule's severity above suggestion to actively avoid mismatching parameter count.
dotnet_diagnostic.CA2017.severity = warning
# CA2018: The count argument to Buffer.BlockCopy should specify the number of bytes to copy
# The count argument to Buffer.BlockCopy should always be the correct value.
# Please keep this rule's severity above suggestion to actively avoid copying unintended amounts of bytes.
dotnet_diagnostic.CA2018.severity = warning
# CA2019: ThreadStatic fields should not use inline initialisation
# ThreadStatic fields should be initialised lazily on use instead. A cctor only initialises the field on the thread that runs the type's cctor.
# Please keep this rule's severity above suggestion to actively avoid explicitly initialising static fields with ThreadStatic.
dotnet_diagnostic.CA2019.severity = warning
# CA2020: Prevent behavioral change caused by built-in operators of IntPtr/UIntPtr
# Certain built-in operators do/don't throw between different versions of .NET.
# Please keep this rule's severity above suggestion to actively avoid unexpected throws.
dotnet_diagnostic.CA2020.severity = warning
# CA2021: Don't call Enumerable.Cast<T> or Enumerable.OfType<T> with incompatible types
# Only call Enumerable.Cast<T> or Enumerable.OfType<T> with compatible types.
# Please keep this rule's severity above suggestion to actively avoid using incompatible types on Enumerable.Cast<T> or Enumerable.OfType<T>.
dotnet_diagnostic.CA2021.severity = warning
# CA2022: Avoid inexact read with Stream.Read
# Inexact reads with Stream.Read can cause the app to hang.
# Please keep this rule's severity above suggestion to actively avoid inexact reads with Stream.read.
dotnet_diagnostic.CA2022.severity = warning

# Security Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/security-warnings
# Please keep these rules' severities above suggestion to actively avoid security vulnerabilities.

# CA2100: Review SQL queries for security vulnerabilities
# A SQL command string built from user input is vulnerable to SQL injection attacks.
dotnet_diagnostic.CA2100.severity = warning
# CA2109: Review visible event handlers
# This rule has been deprecated, as the threat in question hasn't existed since .NET Framework 4.5.
# See https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2109.
# Please keep this rule's severity disabled to avoid using deprecated rules.
dotnet_diagnostic.CA2109.severity = none
# There is no replacement for this rule.

# CA2119: Seal methods that satisfy private interfaces
# Providing an overridable method implementation of an internal interface crates a security vulnerability.
dotnet_diagnostic.CA2119.severity = warning
# CA2153: Avoid handling Corrupted State Exceptions
# Handling Corrupted State Exceptions can allow security vulnerabilities.
dotnet_diagnostic.CA2153.severity = warning
# CA2300: Do not use insecure deserialiser BinaryFormatter
# CA2301: Do not call BinaryFormatter.Deserialise without first setting BinaryFormatter.Binder
# CA2302: Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialise
# CA2305: Do not use insecure deserialiser LosFormatter
# CA2310: Do not use insecure deserialiser NetDataContractSerialiser
# CA2311: Do not deserialise without first setting NetDataContractSerialiser.Binder
# CA2312: Ensure NetDataContractSerialiser.Binder is set before deserialising
# CA2315: Do not use insecure deserialiser ObjectStateFormatter
# CA2321: Do not deserialise with JavaScriptSerialiser using a SimpleTypeResolver
# CA2322: Ensure JavaScriptSerialiser is not initialised with SimpleTypeResolver before deserialising
# CA2326: Do not use TypeNameHandling values other than None
# CA2327: Do not use insecure JsonSerialiserSettings
# CA2328: Ensure that JsonSerialiserSettings are secure
# CA2329: Do not deserialise with JsonSerialiser using an insecure configuration
# CA2330: Ensure that JsonSerialiser has a secure configuration when deserialising
# Insecure deserialisers are vulnerable to security vulnerabilities.
dotnet_diagnostic.CA2300.severity = warning
dotnet_diagnostic.CA2301.severity = warning
dotnet_diagnostic.CA2302.severity = warning
dotnet_diagnostic.CA2305.severity = warning
dotnet_diagnostic.CA2310.severity = warning
dotnet_diagnostic.CA2311.severity = warning
dotnet_diagnostic.CA2312.severity = warning
dotnet_diagnostic.CA2315.severity = warning
dotnet_diagnostic.CA2321.severity = warning
dotnet_diagnostic.CA2322.severity = warning
dotnet_diagnostic.CA2326.severity = warning
dotnet_diagnostic.CA2327.severity = warning
dotnet_diagnostic.CA2328.severity = warning
dotnet_diagnostic.CA2329.severity = warning
dotnet_diagnostic.CA2330.severity = warning
# CA2350: Ensure DataTable.ReadXml()'s input is trusted
# CA2351: Ensure DataSet.ReadXml()'s input is trusted
# CA2352: Unsafe DataSet or DataTable in serialisable type can be vulnerable to remote code execution attacks
# CA2353: Unsafe DataSet or DataTable in serialisable type
# CA2354: Unsafe DataSet or DataTable in deserialised object graph can be vulnerable to remote code execution attack
# CA2355: Unsafe DataSet or DataTable in deserialised object graph
# CA2356: Unsafe DataSet or DataTable type in web deserialised object graph
# CA2361: Ensure autogenerated class containing DataSet.ReadXml() is not used with untrusted data
# CA2362: Unsafe DataSet or DataTable in autogenerated serialisable type can be vulnerable to remote code execution attacks
# Deserialising DataTables or DataSets with untrusted input leads to security vulnerabilities.
dotnet_diagnostic.CA2350.severity = warning
dotnet_diagnostic.CA2351.severity = warning
dotnet_diagnostic.CA2352.severity = warning
dotnet_diagnostic.CA2353.severity = warning
dotnet_diagnostic.CA2354.severity = warning
dotnet_diagnostic.CA2355.severity = warning
dotnet_diagnostic.CA2356.severity = warning
dotnet_diagnostic.CA2361.severity = warning
dotnet_diagnostic.CA2362.severity = warning
# CA3001: Review code for SQL injection vulnerabilities
# An SQL injection attack can execute malicious SQL commands, compromising the security and integrity of your application.
dotnet_diagnostic.CA3001.severity = warning
# CA3002: Review code for XSS vulnerabilities
# An XSS attack injects untrusted input into raw HTML output, allowing the attacker to execute malicious scripts or maliciously modify content in your web page.
dotnet_diagnostic.CA3002.severity = warning
# CA3003: Review code for file path injection vulnerabilities
# File path injections could disclose sensitive data or write to an unintended file.
dotnet_diagnostic.CA3003.severity = warning
# CA3004: Review code for information disclosure vulnerabilities
# Disclosing exception information gives attackers insight into the internals of your application, which can help attackers find other vulnerabilities to exploit.
dotnet_diagnostic.CA3004.severity = warning
# CA3005: Review code for LDAP injection vulnerabilities
# An attacker can potentially run malicious LDAP statements against information directories. 
dotnet_diagnostic.CA3005.severity = warning
# CA3006: Review code for process command injection vulnerabilities
# A command injection attack can execute malicious commands on the underlying operating system.
dotnet_diagnostic.CA3006.severity = warning
# CA3007: Review code for open redirect vulnerabilities
# Redirect vulnerabilities can put unsuspecting visitors on a phising or otherwise malicious webpage.
dotnet_diagnostic.CA3007.severity = warning
# CA3008: Review code for XPath injection vulnerabilities
# XPath injection vulnerabilities could disclose the contents of the queried XML.
dotnet_diagnostic.CA3008.severity = warning
# CA3009: Review code for XML injection vulnerabilities
# When working with untrusted input, be mindful of XML injection attacks.
dotnet_diagnostic.CA3009.severity = warning
# CA3010: Review code for XAML injection vulnerabilities
# When working with untrusted input, be mindful of XAML injection attacks.
dotnet_diagnostic.CA3010.severity = warning
# CA3011: Review code for DLL injection vulnerabilities
# When working with untrusted input, be mindful of loading untrusted code.
dotnet_diagnostic.CA3011.severity = warning
# CA3012: Review code for regex injection vulnerabilities
# When working with untrusted input, be mindful of regex injection attacks
dotnet_diagnostic.CA3012.severity = warning
# CA3061: Do not add schema by URL
# Do not use the unsafe overload of the Add method because it may cause dangerous external references.
dotnet_diagnostic.CA3061.severity = warning
# CA3075: Insecure DTD Processing
# The parser may accept untrusted input and disclose sensitive information to attackers.
dotnet_diagnostic.CA3075.severity = warning
# CA3076: Insecure XSLT Script Execution
# The processor may resolve untrusted URI references that could disclose sensitive information to attackers, leading to Denial of Service and Cross-Site attacks.
dotnet_diagnostic.CA3076.severity = warning
# CA3077: Insecure Processing in API Design, XML Document and XML Text Reader
# Doing so may lead to information disclosure.
dotnet_diagnostic.CA3077.severity = warning
# CA3147: Mark verb handlers with ValidateAntiForgeryToken
# A cross-site request forgery attack can send malicious requests from an authenticated user to your ASP.NET MVC controller.
dotnet_diagnostic.CA3147.severity = warning
# CA5350: Do Not Use Weak Cryptographic Algorithms
# TripleDES, SHA1, and RIPEMD160 should be avoided.
dotnet_diagnostic.CA5350.severity = warning
# CA5351 Do Not Use Broken Cryptographic Algorithms
# MD5 hash algorithm & DES or RC2 encryption algorithms should be avoided.
dotnet_diagnostic.CA5351.severity = warning
# CA5358: Do Not Use Unsafe Cipher Modes
# These modes are vulnerable to attacks and may cause exposure of sensitive information
dotnet_diagnostic.CA5358.severity = warning
# CA5359: Do not disable certificate validation
# A certificate can help authenticate the identity of the server. If the ServerCertificateValidationCallback always returns true, any certificate will pass validation.
dotnet_diagnostic.CA5359.severity = warning
# CA5360: Do not call dangerous methods in deserialisation
# Successful insecure deserialisation attacks could allow an attacker to carry out attacks such as DoS attacks, authentication bypasses, and remote code execution.
dotnet_diagnostic.CA5360.severity = warning
# CA5361: Do not disable SChannel use of strong crypto
# Setting Switch.System.Net.DontEnableSchUseStrongCrypto to true weakens the cryptography used in outgoing Transport Layer Security (TLS) connections.
dotnet_diagnostic.CA5361.severity = warning
# CA5362: Potential reference cycle in deserialised object graph
# An attacker could perform a Denial-of-Service attack with malicious data containing a reference cycle.
dotnet_diagnostic.CA5362.severity = warning
# CA5363: Do not disable request validation
# Request validation determines if HTTP requests lead to injection attacks.
dotnet_diagnostic.CA5363.severity = warning
# CA5364: Do not use deprecated security protocols
# Avoid older protocol versions to minimise risk.
dotnet_diagnostic.CA5364.severity = warning
# CA5365: Do Not Disable HTTP Header Checking
# Keeping HTTP Header Checking enabled can help to avoid injection attacks that exploit an application that echoes untrusted data contained by the header.
dotnet_diagnostic.CA5365.severity = warning
# CA5366: Use XmlReader For DataSet Read XML
# Using a DataSet to read XML with untrusted data may load dangerous external references.
dotnet_diagnostic.CA5366.severity = warning
# CA5367: Do not serialise types with pointer fields
# Pointers are not type safe, which means you cannot guarantee the correctness of the memory they point at.
dotnet_diagnostic.CA5367.severity = warning
# CA5368: Set ViewStateUserKey For Classes Derived From Page
# Setting the ViewStateUserKey property can help you prevent attacks on your application.
dotnet_diagnostic.CA5368.severity = warning
# CA5369: Use XmlReader for Deserialise
# CA5370: Use XmlReader for validating reader
# CA5371: Use XmlReader for schema read
# Processing untrusted DTD and XML schemas may enable loading dangerous external references.
dotnet_diagnostic.CA5369.severity = warning
dotnet_diagnostic.CA5370.severity = warning
dotnet_diagnostic.CA5371.severity = warning
# CA5372: Use XmlReader for XPathDocument
# Processing XML from untrusted data may load dangerous external references.
dotnet_diagnostic.CA5372.severity = warning
# CA5373: Do not use obsolete key derivation function
# These obsolete key derivation functions used a weak algorithm, PBKDF1.
dotnet_diagnostic.CA5373.severity = warning
# CA5374: Do not use XslTransform
# XslTransform is vulnerable when operating on untrusted input. An attack could execute arbitrary code.
dotnet_diagnostic.CA5374.severity = warning
# CA5375: Do not use account shared access signature
# Once malicious users get it, your storage account will be compromised easily.
dotnet_diagnostic.CA5375.severity = warning
# CA5376: Use SharedAccessProtocol HttpsOnly
# SAS is sensitive data that can't be transported in plain text on HTTP.
dotnet_diagnostic.CA5376.severity = warning
# CA5377: Use container level access policy
# It provides greater flexibility and control over the permissions that are granted.
dotnet_diagnostic.CA5377.severity = warning
# CA5378: Do not disable ServicePointManagerSecurityProtocols
# Doing so limits WCF's TLS connections to using a version that will be deprecated, 1.0.
dotnet_diagnostic.CA5378.severity = warning
# CA5379: Ensure key derivation function algorithm is sufficiently strong
# The Rfc2898DeriveBytes class defaults to using the SHA1 algorithm, which is weak.
dotnet_diagnostic.CA5379.severity = warning
# CA5380: Do not add certificates to root store
# CA5381: Ensure certificates are not added to root store
# A single vulnerable, malicious or coercible CA undermines the security of the entire system.
dotnet_diagnostic.CA5380.severity = warning
dotnet_diagnostic.CA5381.severity = warning
# CA5382: Use secure cookies in ASP.NET Core
# CA5383: Ensure use secure cookies in ASP.NET Core
# Applications available over HTTPS must use secure cookies.
dotnet_diagnostic.CA5382.severity = warning
dotnet_diagnostic.CA5383.severity = warning
# CA5384: Do not use digital signature algorithm (DSA)
# DSA is a weak asymmetric encryption algorithm.
dotnet_diagnostic.CA5384.severity = warning
# CA5385: Use Rivest–Shamir–Adleman (RSA) algorithm with sufficient key size
# An RSA key smaller than 2048 bits is more vulnerable to brute force attacks.
dotnet_diagnostic.CA5385.severity = warning
# CA5386: Avoid hardcoding SecurityProtocolType value
# To ensure that your application remains secure, avoid hardcoding a protocol version and target at least .NET Framework v4.7.1.
dotnet_diagnostic.CA5386.severity = warning
# CA5387: Do not use weak key derivation function with insufficient iteration count
# CA5388: Ensure sufficient iteration count when using weak key derivation function
# A higher iteration count can help mitigate against dictionary attacks that try to guess the generated cryptographic key.
dotnet_diagnostic.CA5387.severity = warning
dotnet_diagnostic.CA5388.severity = warning
# CA5389: Do not add archive item's path to the target file system path
# File path can be relative and can lead to file system access outside of the expected file system target path.
dotnet_diagnostic.CA5389.severity = warning
# CA5390: Do not hard-code encryption key
# For a symmetric algorithm to be successful, the secret key must be known only to the sender and the receiver.
dotnet_diagnostic.CA5390.severity = warning
# CA5391: Use antiforgery tokens in ASP.NET Core MVC controllers
# A cross-site request forgery attack can send malicious requests from an authenticated user to your ASP.NET Core MVC controller.
dotnet_diagnostic.CA5391.severity = warning
# CA5392: Use DefaultDllImportSearchPaths attribute for P/Invokes
# Failing to use DefaultDllImportSearchPaths is vulnerable to DLL hijacking.
dotnet_diagnostic.CA5392.severity = warning
# CA5393: Do not use unsafe DllImportSearchPath value
# There could be a malicious DLL in the default DLL search directories and assembly directories.
dotnet_diagnostic.CA5393.severity = warning
# CA5394: Do not use insecure randomness
# Using a cryptographically weak pseudo-random number generator may allow an attacker to predict what security-sensitive value will be generated.
dotnet_diagnostic.CA5394.severity = warning
# CA5395: Miss HttpVerb attribute for action methods
# All the action methods that create, edit, delete, or otherwise modify data needs to be protected with the antiforgery attribute from cross-site request forgery attacks.
dotnet_diagnostic.CA5395.severity = warning
# CA5396: Set HttpOnly to true for HttpCookie
# Injected malicious scripts are a common way of stealing cookies.
dotnet_diagnostic.CA5396.severity = warning
# CA5397: Do not use deprecated SslProtocols values
# Avoid older protocol versions to minimise risk.
dotnet_diagnostic.CA5397.severity = warning
# CA5398: Avoid hardcoded SslProtocols values
# To ensure that your application remains secure, avoid hardcoding a protocol version.
dotnet_diagnostic.CA5398.severity = warning
# CA5399: Definitely disable HttpClient certificate revocation list check
# CA5400: Ensure HttpClient certificate revocation list check is not disabled
# A revoked certificate could be used by attackers passing some malicious data or stealing sensitive data in HTTPS communication.
dotnet_diagnostic.CA5399.severity = warning
dotnet_diagnostic.CA5400.severity = warning
# CA5401: Do not use CreateEncryptor with non-default IV
# CA5402: Use CreateEncryptor with the default IV
# Symmetric encryption should always use a non-repeatable initialisation vector to prevent dictionary attacks.
dotnet_diagnostic.CA5401.severity = warning
dotnet_diagnostic.CA5402.severity = warning
# CA5403: Do not hard-code certificate
# A hard-coded certificate's private key is easily discovered.
dotnet_diagnostic.CA5403.severity = warning
# CA5404: Do not disable token validation checks
# TokenValidationParameters properties that control token validation should not be set to false.
dotnet_diagnostic.CA5404.severity = warning
# CA5405: Do not always skip token validation in delegates
# The callback assigned to AudienceValidator or LifetimeValidator always returns true.
dotnet_diagnostic.CA5405.severity = warning

# Usage Rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/usage-warnings

# CA1801: Review unused parameters
# This rule is deprecated.
# Please keep this rule's severity disabled to avoid using deprecated rules.
dotnet_diagnostic.CA1801.severity = none
# Please see IDE0060 instead.

# CA1816: Call GC.SuppressFinalise correctly
# GC.SuppressFinalise should always be called correctly.
# Please keep this rule's severity above suggestion to actively avoid calling GC.SuppressFinalise incorrectly.
dotnet_diagnostic.CA1816.severity = warning
# CA2200: Rethrow to preserve stack details
# Preserving the stack details makes debugging easier.
# Please keep this rule's severity above suggestion to actively avoid hard to debug code.
dotnet_diagnostic.CA2200.severity = warning
# CA2201: Do not raise reserved exception types
# This makes the original error hard to detect and debug.
# Please keep this rule's severity above suggestion to actively avoid hard to debug code.
dotnet_diagnostic.CA2201.severity = warning
# CA2207: Initialise value type static fields inline
# Explicit static constructors declared by value types are not guaranteed to run.
# Please keep this rule's severity above suggestion to avoid static constructors that aren't guaranteed to run.
dotnet_diagnostic.CA2207.severity = warning
# CA2208: Instantiate argument exceptions correctly
# Instantiating argument exceptions correctly makes debugging easier.
# Please keep this rule's severity above suggestion to actively encourage code that's easier to debug.
dotnet_diagnostic.CA2208.severity = warning
dotnet_code_quality.CA2208.api_surface = all
# CA2211: Non-constant fields should not be visible
# Static fields that are not constants or read-only are not thread-safe.
# Please keep this rule's severity above suggestion to actively avoid thread-unsafe code.
dotnet_diagnostic.CA2211.severity = warning
# CA2213: Disposable fields should be disposed
# Disposable fields should always be disposed.
# Please keep this rule's severity above suggestion to actively encourage properly disposing unmanaged resources.
dotnet_diagnostic.CA2213.severity = warning
# CA2214: Do not call overridable methods in constructors
# When a constructor calls a virtual method, it is possible that the constructor for the instance that invokes the method has not executed.
# Please keep this rule's severity above suggestion to actively avoid unexpected behaviour.
dotnet_diagnostic.CA2214.severity = warning
# CA2215: Dispose methods should call base class dispose
# Calling the base type Dispose method ensures that any resources created by the base type are released.
# Please keep this rule's severity above suggestion to actively encourage properly disposing unmanaged resources.
dotnet_diagnostic.CA2215.severity = warning
# CA2216: Disposable types should declare finaliser
# Declaring finalisers for disposable types ensures that unmanaged resources are properly disposed.
# Please keep this rule's severity above suggestion to actively encourage properly disposing unmanaged resources.
dotnet_diagnostic.CA2216.severity = warning
# CA2217: Do not mark enums with FlagsAttribute
# FlagsAttribute should only mark enums with values that are only powers of two.
# Please keep this rule's severity above suggestion to actively encourage properly marking enums with FlagsAttribute.
dotnet_diagnostic.CA2217.severity = warning
dotnet_code_quality.CA2217.api_surface = all
# CA2218: Override GetHashCode on overriding Equals
# This rule only applies to Visual Basic.
# Please see CS0659 for the C# equivalent.

# CA2219: Do not raise exceptions in exception clauses
# Doing so makes the original error hard to detect and debug.
# Please keep this rule's severity above suggestion to actively encourage code that's easier to debug.
dotnet_diagnostic.CA2219.severity = warning
# CA2224: Override Equals on overloading operator equals
# This rule only applies to Visual Basic.
# Please see CS0660 for the C# equivalent.

# CA2225: Operator overloads have named alternates
# Operator overloads should always be paired with named alternates.
# Please keep this rule's severity above suggestion to actively encourage pairing operator overloads with named alternates.
dotnet_diagnostic.CA2225.severity = warning
dotnet_code_quality.CA2225.api_surface = all
# CA2226: Operators should have symmetrical overloads
# Equality & inequality operators should always be implemented in pair.
# Please keep this rule's severity above suggestion to actively encourage consistent behaviour with .NET.
dotnet_diagnostic.CA2226.severity = warning
dotnet_code_quality.CA2226.api_surface = all
# CA2227: Collection properties should be read only
# Writable collection properties allow the collection to be replaced.
# Please keep this rule's severity above suggestion to actively encourage properly readonly collections.
dotnet_diagnostic.CA2227.severity = warning
# CA2229: Implement serialisation constructors
# Implementing ISerialisable without implementing serialisation constructors prevents the type from being deserialisable.
# Please keep this rule's severity above suggestion to actively encourage properly implementing serialisable types.
dotnet_diagnostic.CA2229.severity = warning
# CA2231: Overload operator equals on overriding ValueType.Equals
# Both the equality operator & Equals method should always be implemented in pair.
# Please keep this rule's severity above suggestion to actively encourage implementing expected behaviour.
dotnet_diagnostic.CA2231.severity = warning
dotnet_code_quality.CA2231.api_surface = all
# CA2234: Pass System.Uri objects instead of strings
# URI objects being passed as strings is a security vulnerability.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities.
dotnet_diagnostic.CA2234.severity = warning
dotnet_code_quality.CA2234.api_surface = all
# CA2235: Mark all non-serialisable fields
# Non-serialisable fields within serialisable types cause SerialisationExceptions.
# Please keep this rule's severity above suggestion to actively avoid SerialisationExceptions.
dotnet_diagnostic.CA2235.severity = warning
# CA2237: Mark ISerialisable types with SerialisableAttribute
# Serialisable types should be marked with the SerialisableAttribute.
# Please keep this rule's severity above suggestion to actively encourage properly implementing serialisable types.
dotnet_diagnostic.CA2237.severity = warning
# CA2241: Provide correct arguments to formatting methods
# Incorrect arguments to formatting methods indicate unintended behaviour.
# Please keep this rule's severity above suggestion to actively encourage using correct arguments to formatting methods.
dotnet_diagnostic.CA2241.severity = warning
# Determine additional string formatting methods automatically
dotnet_code_quality.CA2241.try_determine_additional_string_formatting_methods_automatically = true
# CA2242: Test for NaN correctly
# Testing for NaN incorrectly causes unintended functionality.
# Please keep this rule's severity above suggestion to actively encourage testing for NaN correctly.
dotnet_diagnostic.CA2242.severity = warning
# CA2243: Attribute string literals should parse correctly
# Incorrectly parsed string literals indicate unintended functionality.
# Please keep this rule's severity above suggestion to actively encourage correct attribute parameters.
dotnet_diagnostic.CA2243.severity = warning
# CA2244: Do not duplicate indexed element initialisations
# Duplicated indexes element initialisations indicate unintended functionality.
# Please keep this rule's severity above suggestion to actively avoid unintended functionality.
dotnet_diagnostic.CA2244.severity = warning
# CA2245: Do not assign a property to itself
# Assigning a property to itself indicates unintended functionality.
# Please keep this rule's severity above suggestion to actively avoid unintended functionality.
dotnet_diagnostic.CA2245.severity = warning
# CA2246: Do not assign a symbol and its member in the same statement
# Assigning a symbol and its member in the same statement is very unreadable.
# Please keep this rule's severity above suggestion to actively encourage more readable code.
dotnet_diagnostic.CA2246.severity = warning
# CA2247: Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum
# Passing Task Continuation instead of Creation Options to CompletionSource constructor almost always indicates unintended functionality.
# Please keept his rule's severity above suggestion to actively encourage passing correct arguments to TaskCompletionSource.
dotnet_diagnostic.CA2247.severity = warning
# CA2248: Provide correct enum argument to Enum.HasFlag
# Providing incorrect enum argument to Enum.HasFlag results in an unhandled exception to be thrown.
# Please keep this rule's severity above suggestion to actively avoid unhandled exceptions.
dotnet_diagnostic.CA2248.severity = warning
# CA2249: Consider using String.Contains instead of String.IndexOf
# String.IndexOf is less readable than String.Contains.
# Please keep this rule's severity above suggestion to actively encourage more readable code.
dotnet_diagnostic.CA2249.severity = warning
# CA2250: Use ThrowIfCancellationRequested
# Checking IsCancellationRequested before throwing OperationCanceledException can be simplified by just using ThrowIfCancellationRequested.
# Please keep this rule's severity above suggestion to actively encourage more readable code.
dotnet_diagnostic.CA2250.severity = warning
# CA2251: Use String.Equals over String.Compare
# String.Equals is more performant & readable than String.Compare.
# Please keep this rule's severity above suggestion to actively encourage more performant & readable code.
dotnet_diagnostic.CA2251.severity = warning
# CA2252: Opt in to preview features before using them
# Preview features should only be used when opted into them.
# Please keep this rule's severity above suggestion to actively encourage opting into preview features when using them.
dotnet_diagnostic.CA2252.severity = warning
# CA2253: Named placeholders should not be numeric values
# Named placeholders should be more descriptive than solely consisting of numeric values.
# Please keep this rule's severity above suggestion to actively encourage descriptive named placeholders.
dotnet_diagnostic.CA2253.severity = warning
# CA2254: Template should be a static expression
# Logging message templates should not vary between calls.
# Please keep this rule's severity above suggestion to actively encourage passing constant message templates to logger API.
dotnet_diagnostic.CA2254.severity = warning
# CA2255: The ModuleInitialiser attribute should not be used in libraries
# The ModuleInitialiser attribute is reserved for applications only.
# Please keep this rule's severity above suggestion to actively encourage reserving the ModuleInitialiser attribute for applications.
dotnet_diagnostic.CA2255.severity = warning
# CA2256: All members declared in parent interfaces must have an implementation in a DynamicInterfaceCastableImplementation-attributed interface
# CA2257: Members defined on an interface with the 'DynamicInterfaceCastableImplementationAttribute' should be 'static'
# CA2258: Providing a 'DynamicInterfaceCastableImplementation' interface in Visual Basic is unsupported
# [DynamicInterfaceCastableImplementation] & IDynamicInterfaceCastable are .NET 5+.
# Please keep these rules' severities disabled to avoid using .NET 5+ features.
dotnet_diagnostic.CA2256.severity = none
dotnet_diagnostic.CA2257.severity = none
dotnet_diagnostic.CA2258.severity = none
# CA2256, CA2257 & CA2258 are for .NET 5+ only.

# CA2259: Ensure ThreadStatic is only used with static fields
# ThreadStatic has no impact on behaviour for instance fields.
# Please keep this rule's severity above suggestion to actively avoid redundant code.
dotnet_diagnostic.CA2259.severity = warning
# CA2260: Implement generic math interfaces correctly
# Incorrectly implementing generic math interfaces renders the type in question unusable.
# Please keep this rule's severity above suggestion to actively encourage generic math interfaces to be usable.
dotnet_diagnostic.CA2260.severity = warning
# CA2261: Do not use ConfigureAwaitOptions.SuppressThrowing with Task<TResult>
# Doing so is unsupported, and may lead to an invalid TResult.
# Please keep this rule's severity above suggestion to actively avoid invalid TResults.
dotnet_diagnostic.CA2261.severity = warning
# CA2262: Set MaxResponseHeadersLength properly
# The property 'MaxResponseHeadersLength' is measured in kilobytes, not in bytes.
# Please keep this rule's severity above suggestion to actively avoid improperly setting MaxResponseHeadersLength.
dotnet_diagnostic.CA2262.severity = warning
# CA2263: Prefer generic overload when type is known
# Generic overloads promote cleaner and more type-safe code with improved compile-time checks.
# Please keep this rule's severity above suggestion to actively encourage generic overloads for maintainability.
dotnet_diagnostic.CA2263.severity = warning
# CA2264: Do not pass a non-nullable value to 'ArgumentNullException.ThrowIfNull'
# Non-nullable values are never null.
# Please keep this rule's severity above suggestion to actively avoid misusing ArgumentNullException.ThrowIfNull for reliability.
dotnet_diagnostic.CA2264.severity = warning
# CA2265: Do not compare Span<T> to null or default
# default and the null literal are implicitly converted to Span<T>.Empty when compared with Span<T>.
# Please keep this rule's severity above suggestion to avoid redundant comparisons.
dotnet_diagnostic.CA2265.severity = warning

# awesome-analyzers, a list of Roslyn Analysers.
# https://github.com/Cybermaxs/awesome-analyzers

# https://github.com/dotnet/roslyn-analyzers

# Please note that certain packages have moved into the Roslyn repository:
# https://github.com/dotnet/roslyn

# ! Microsoft.CodeAnalysis.AnalyzerUtilities is currently an internal-only package reserved for private consumption, and has been described as being not yet ready for release.
# This analyser will not be used.
# https://github.com/dotnet/roslyn/tree/main/src/RoslynAnalyzers/Microsoft.CodeAnalysis.AnalyzerUtilities

# Roslyn Analyser C# files
[RoslynAnalysers/**.cs]

# Microsoft.CodeAnalysis.Analyzers, which should only be used while developing Roslyn Analysers.
# https://www.nuget.org/packages/Microsoft.CodeAnalysis.Analyzers
# https://github.com/dotnet/roslyn/tree/main/src/RoslynAnalyzers/Microsoft.CodeAnalysis.Analyzers

# RS1001: Missing diagnostic analyser attribute
# Analyser types without the DiagnosticAnalyserAttribute will be ignored by the analysis engine.
# Please keep this rule's severity above suggestion to actively avoid missing diagnostic analyser attributes.
dotnet_diagnostic.RS1001.severity = warning
# RS1002: Missing kind argument when registering an analyser action
# Failing to specify at least one syntax will cause the registered action to never be invoked during analysis.
# Please keep this rule's severity above suggestion to actively avoid missing kind arguments.
dotnet_diagnostic.RS1002.severity = warning
# RS1003: Unsupported SymbolKind argument when registering a symbol analyser action
# Only supported SymbolKinds should be used.
# Please keep this rule's severity above suggestion to actively avoid unsupported SymbolKinds.
dotnet_diagnostic.RS1003.severity = warning
# RS1004: Recommend adding language support to diagnostic analyser
# Analyser assemblies that don't use language-specific assemblies should be explicitly labelled to support multiple languages.
# Please keep this rule's severity above suggestion to actively encourage adding multi-language support to diagnostic analysers.
dotnet_diagnostic.RS1004.severity = warning
# RS1005: ReportDiagnostic invoked with an unsupported DiagnosticDescriptor
# Only supportred DiagnosticDescriptors should be used, otherwise the reported diagnostic will be filtered out by the analysis engine.
dotnet_diagnostic.RS1005.severity = warning
# RS1006: Invalid type argument for DiagnosticAnalyser's Register method
# Only valid type arguments should be used, otherwise the registered analyser action can never be invoked during analysis.
# Please keep this rule's severity above suggestion to actively avoid invalid type arguments.
dotnet_diagnostic.RS1006.severity = warning
# RS1007: Provide localisable arguments to diagnostic descriptor constructor
# Diagnostic analysers and its reported diagnostics are not localisable unless localisable arguments are provided.
# Please keep this rule's severity above suggestion to actively encourage localisable diagnostic descriptors.
dotnet_diagnostic.RS1007.severity = warning
# RS1008: Avoid storing per-compilation data into the fields of a diagnostic analyser
# Doing so may cause stale compilations to stay alive and cause memory leaks.
# Please keep this rule's severity above suggestion to actively avoid memory leaks.
dotnet_diagnostic.RS1008.severity = warning
# RS1009: Only internal implementations of this interface are allowed
# Unintended implementations could result in source or binary compatibility issues with a future version of the interface.
# Please keep this rule's severity above warning to avoid future source or binary compatibility issues.
dotnet_diagnostic.RS1009.severity = error
# RS1010: Create code actions should have a unique EquivalenceKey for FixAll occurrences support
# RS1011: Use code actions that have a unique EquivalenceKey for FixAll occurrences support
# Doing so enables fixing all diagnostics in the required scope.
# Please keep these rules' severities above suggestion to actively encourage enabling fixing all diagnostics.
dotnet_diagnostic.RS1010.severity = warning
dotnet_diagnostic.RS1011.severity = warning
# RS1012: Start action has no registered actions
# Start actions should have at least one action registered.
# Please keep this rule's severity above suggestion to actively avoid start actions with no registered actions.
dotnet_diagnostic.RS1012.severity = warning
# RS1013: Start action has no registered non-end actions
# Start actions should have at least one non-end action registered.
# Please keep this rule's severity above suggestion to actively avoid start actions with no non-end registered actions.
dotnet_diagnostic.RS1013.severity = warning
# RS1014: Do not ignore values returned by methods on immutable objects
# Ignoring values returned by methods on immutable objects results in redundant code.
# Please keep this rule's severity above suggestion to actively avoid redundant code.
dotnet_diagnostic.RS1014.severity = warning
# RS1015: Provide non-null 'helpLinkUri' value to diagnostic descriptor constructor
# Every analyser should have a helpLinkUri specified.
# Please keep this rule's severity above suggestion to actively avoid non-null helpLinkUris.
dotnet_diagnostic.RS1015.severity = warning
# RS1016: Code fix providers should provide FixAll support
# Supporting FixAll enables users to fix multiple instances of the underlying diagnostic with a single code fix.
# Please keep this rule's severity above suggestion to actively encourage supporting FixAll.
dotnet_diagnostic.RS1016.severity = warning
# RS1017: DiagnosticId for analysers must be a non-null constant
# Only non-null constants should be used for DiagnosticIds for analysers.
# Please keep this rule's severity above suggestion to actively encourage non-null constants for DiagnosticIds for analysers.
dotnet_diagnostic.RS1017.severity = warning
# RS1018: DiagnosticId for analysers must be in specified format
# Only allowed formats should be used for DiagnosticIds for analysers.
# Please keep this rule's severity above suggestion to actively encourage using the specified format for DiagnosticIds for analysers.
dotnet_diagnostic.RS1018.severity = warning
# RS1019: DiagnosticId must be unique across analysers
# Only unique DiagnosticIds should be used, even across analysers.
# Please keep this rule's severity above suggestion to actively encourage unique DiagnosticIds across analysers.
dotnet_diagnostic.RS1019.severity = warning
# RS1020: Category for analysers must be from the specified values
# Only allowed categories should be used for analysers.
# Please keep this rule's severity above suggestion to actively encourage using allowed categories for analysers.
dotnet_diagnostic.RS1020.severity = warning
# RS1021: Invalid entry in analyser category and diagnostic ID range specification file
# Only valid entries in analyser category and diagnostic ID range specification file should be used.
# Please keep this rule's severity above suggestion to actively encourage using valid entries in analyser category and diagnostic ID range specification file.
dotnet_diagnostic.RS1021.severity = warning
# RS1022: Do not use types from Workspaces assembly in an analyser
# Using types from Workspace assemblies in an analyser will lead to runtime exceptions during analyser execution in command line builds.
# Please keep this rule's severity above suggestion to actively avoid runtime exceptions during analyser execution in command line builds.
dotnet_diagnostic.RS1022.severity = warning
# RS1023: Upgrade MSBuildWorkspace
# The newer Microsoft.CodeAnalysis.Workspaces.MSBuild NuGet package should be used instead.
# Please keep this rule's severity above suggestion to actively encourage upgrading MSBuildWorkspace.
dotnet_diagnostic.RS1023.severity = warning
# RS1024: Symbols should be compared for equality
# Symbols should be compared for equality, not identity.
# Please keep this rule's severity above suggestion to actively encourage comparing symbols for equality.
dotnet_diagnostic.RS1024.severity = warning
# RS1025: Configure generated code analysis
# Generated code analysis should be configured.
# Please keep this rule's severity above suggestion to actively encourage configuring generated code analysis.
dotnet_diagnostic.RS1025.severity = warning
# RS1026: Enable concurrent execution
# Concurrent execution should be enabled.
# Please keep this rule's severity above suggestion to actively encourage enabling concurrent execution.
dotnet_diagnostic.RS1026.severity = warning
# RS1027: Types marked with DiagnosticAnalyserAttribute(s) should inherit from DiagnosticAnalyser
# All types marked with [DiagnosticAnalyser] should inherit from DiagnosticAnalyser.
# Please keep this rule's severity above suggestion to actively encourage inheriting from DiagnosticAnalyser when a type is marked with [DiagnosticAnalyser].
dotnet_diagnostic.RS1027.severity = warning
# RS1028: Provide non-null 'customTags' value to diagnostic descriptor constructor
# Every Roslyn Analyser should have at least one tag from the WellKnownDiagnosticTags class.
# Please keep this rule's severity above suggestion to actively encourage adding custom tags to all Roslyn Analysers.
dotnet_diagnostic.RS1028.severity = warning
# RS1029: Do not use reserved diagnostic IDs
# Reserved diagnostic IDs should not be used.
# Please keep this rule's severity above suggestion to actively avoid using reserved diagnostic IDs.
dotnet_diagnostic.RS1029.severity = warning
# RS1030: Do not invoke Compilation.GetSemanticModel() method within a diagnostic analyser
# Invoking GetSemanticModel is expensive. Consider registering a different analyser action which allows use of a shared SemanticModel.
# Please keep this rule's severity above suggestion to actively avoid invoking GetSemanticModel.
dotnet_diagnostic.RS1030.severity = warning
# RS1031: Define diagnostic title correctly
# Avoid periods, line returns, and leading or trailing whitespaces in diagnostic titles.
# Please keep this rule's severity above suggestion to actively encourage defining diagnostic titles correctly.
dotnet_diagnostic.RS1031.severity = warning
# RS1032: Define diagnostic message correctly
# Avoid line returns, leading or trailing whitespace, single sentence with a trailing period, and multi-sentence without a trailing period in diagnostic messages.
# Please keep this rule's severity above suggestion to actively encourage defining diagnostic messages correctly.
dotnet_diagnostic.RS1032.severity = warning
# RS1033: Define diagnostic description correctly
# Use an ending punctuation sign and avoid leading or trailing whitespace in diagnostic descriptions.
# Please keep this rule's severity above suggestion to actively encourage defining diagnostic descriptions correctly.
dotnet_diagnostic.RS1033.severity = warning
# RS1034: Prefer 'IsKind' for checking syntax kinds
# IsKind is slightly more efficient at runtime.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.RS1034.severity = warning
# RS1035: Do not use APIs banned for analysers
# Symbols marked as banned for use in analysers should be avoided.
# Please keep this rule's severity above warning to actively avoid using APIs banned for analysers.
dotnet_diagnostic.RS1035.severity = error
# RS1036: Specify analyser banned API enforcement setting
# A project containing analysers or source generators should set the EnforceExtendedAnalyserRules MSBuild property to true.
# Please keep this rule's severity to actively encourage specifying the analyser banned API enforcement setting.
dotnet_diagnostic.RS1036.severity = warning
# RS1037: Add "CompilationEnd" custom tag to compilation end diagnostic descriptor
# DiagnosticDescriptor assigned to field is used to report a compilation end diagnostic,
# but the DiagnosticDescriptor used to initialise it does not pass in the required custom CompilationEnd tag.
# Please keep this rule's severity above suggestion to actively encourage properly reporting compilation end diagnostics.
dotnet_diagnostic.RS1037.severity = warning
# RS1038: Compiler extensions should be implemented in assemblies with compiler-provided references
# Failure to do so may cause compiler extension points to behave unpredictably.
# Please keep this rule's severity above suggestion to actively encourage properly implementing compiler extensions properly.
dotnet_diagnostic.RS1038.severity = warning
# RS1039: This call to 'SemanticModel.GetDeclaredSymbol()' will always return 'null'
# Calling SemanticModel.GetDeclaredSymbol on certain types inheriting from SyntaxNode will always return null.
# Please keep this rule's severity above suggestion to actively avoid calls that will always return null.
dotnet_diagnostic.RS1039.severity = warning
# RS1040: This call to 'SemanticModel.GetDeclaredSymbol()' will always return 'null'
# Calling SemanticModel.GetDeclaredSymbol with an argument of type FieldDeclarationSyntax or EventFieldDeclarationSyntax will always return null.
# Please keep this rule's severity above suggestion to actively avoid calls that will always return null.
dotnet_diagnostic.RS1040.severity = warning
# RS1041: Compiler extensions should be implemented in assemblies targeting netstandard2.0
# More specific target frameworks may cause compiler extensions to behave unpredictably.
# Please keep this rule's severity above suggestion to actively encourage implementing compiler extensions in assemblies targeting netstandard2.0.
dotnet_diagnostic.RS1041.severity = warning
# RS1042: Implementations of this interface are not allowed
# Implementing interfaces that have been deprecated are not allowed.
# Please keep this rule's severity above warning to avoid implementing interfaces that have been deprecated.
dotnet_diagnostic.RS1042.severity = error
# RS2000: Add analyser diagnostic IDs to analyser release
# All supported analyser diagnostic IDs should be part of an analyser release.
# Please keep this rule's severity above suggestion to actively encourage adding all supported analyser diagnostic IDs to an analyser release.
dotnet_diagnostic.RS2000.severity = warning
# RS2001: Ensure up-to-date entry for analyser diagnostic IDs are added to analyser release
# Analyser releases should be provided with up-to-date entries for analyser diagnostic IDs.
# Please keep this rule's severity above suggestion to actively encourage providing analyser releases with up-to-date data.
dotnet_diagnostic.RS2001.severity = warning
# RS2002: Do not add removed analyser diagnostic IDs to unshipped analyser release
# Entries for analyser diagnostic IDs that are no longer reported and never shipped can be removed from unshipped analyser release.
# Please keep this rule's severity above suggestion to actively encourage removing analyser diagnostic ID entries that are no longer reported and never shipped from analyser releases.
dotnet_diagnostic.RS2002.severity = warning
# RS2003: Shipped diagnostic IDs that are no longer reported should have an entry in the 'Removed Rules' table in unshipped file
# Shipped diagnostic IDs that are no longer reported should have an entry in the Removed Rules table in unshipped file.
# Please keep this rule's severity above suggestion to actively encourage adding shipped diagnostic IDs that are no longer supported to the Removed Rules table in unshipped file.
dotnet_diagnostic.RS2003.severity = warning
# RS2004: Diagnostic IDs marked as removed in analyser release file should not be reported by analysers
# Diagnostic IDs marked as removed in analyser release file should not be reported by analysers.
# Please keep this rule's severity above suggestion to actively avoid diagnostic IDs marked as removed in analyser release file being reported by analysers.
dotnet_diagnostic.RS2004.severity = warning
# RS2005: Remove duplicate entries for diagnostic ID in the same analyser release
# Duplicate entries for diagnostic ID in the same analyser release should be removed.
# Please keep this rule's severity above suggestion to actively encourage removing duplicate entries for diagnostic ID in the same analyser release.
dotnet_diagnostic.RS2005.severity = warning
# RS2006: Remove duplicate entries for diagnostic ID between analyser releases
# Duplicate entries for diagnostic ID between analyser releases should be removed.
# Please keep this rule's severity above suggestion to actively encourage removing duplicate entries for diagnostic ID between analyser releases.
dotnet_diagnostic.RS2006.severity = warning
# RS2007: Invalid entry in analyser release file
# The analyser release file should not contain invalid entries.
# Please keep this rule's severity above suggestion to actively avoid invalid entries in the analyser release file.
dotnet_diagnostic.RS2007.severity = warning
# RS2008: Enable analyser release tracking
# Enabling analyser release tracking for analyer packages helps in tracking and documenting the analyser diagnostics that ship and/or change with each analyser release.
# Please keep this rule's severity above suggestion to actively encourage enabling analyser release tracking.
dotnet_diagnostic.RS2008.severity = warning

# C# files
[*.cs]

# Microsoft.CodeAnalysis.BannedApiAnalyzers
# https://www.nuget.org/packages/Microsoft.CodeAnalysis.BannedApiAnalyzers
# https://github.com/dotnet/roslyn/blob/main/src/RoslynAnalyzers/Microsoft.CodeAnalysis.BannedApiAnalyzers/Microsoft.CodeAnalysis.BannedApiAnalyzers.md

# RS0030: Do not use banned APIs
# Banned APIs are not to be used.
# Please keep this rule's severity above suggestion to actively avoid using banned APIs.
dotnet_diagnostic.RS0030.severity = warning
# RS0031: The list of banned symbols contains a duplicate.
# The list of banned symbols should not contain duplicates.
# Please keep this rule's severity above suggestion to actively avoid duplicates in the list of banned symbols.
dotnet_diagnostic.RS0031.severity = warning
# RS0035: External access to internal symbols outside the restricted namespace(s) is prohibited
# Each referencing assembly can only access internal symbols defined in the restricted namespaces that the referenced assembly allows.
# Please keep this rule's severity above suggestion to actively encourage properly using [RestrictedInternalsVisibleTo].
dotnet_diagnostic.RS0035.severity = warning

# ! Microsoft.CodeAnalysis.Metrics does not provide any code analysis.
# This package is irrelevant.
# https://github.com/dotnet/roslyn/tree/main/src/RoslynAnalyzers/Tools/Metrics

# ! Microsoft.CodeAnalysis.PerformanceSensitiveAnalyzers is currently an internal-only package reserved for private consumption.
# This analyser will not be used.
# https://github.com/dotnet/roslyn/blob/main/src/RoslynAnalyzers/PerformanceSensitiveAnalyzers/Microsoft.CodeAnalysis.PerformanceSensitiveAnalyzers.md

# ! Microsoft.CodeAnalysis.PublicApiAnalyzers is for public APIs only.
# This analyser will not be used.
# https://github.com/dotnet/roslyn/blob/main/src/RoslynAnalyzers/PublicApiAnalyzers/PublicApiAnalyzers.Help.md

# ! Microsoft.CodeAnalysis.ResxSourceGenerator does not provide any code analysis.
# This package is irrelevant.
# https://github.com/dotnet/roslyn/tree/main/src/RoslynAnalyzers/Microsoft.CodeAnalysis.ResxSourceGenerator

# ! Microsoft.CodeAnalysis.RulesetToEditorconfigConverter does not provide any code analysis.
# This package is irrelevant.
# https://github.com/dotnet/roslyn/tree/main/src/RoslynAnalyzers/Tools/RulesetToEditorconfigConverter

# ! Roslyn.Diagnostics.Analyzers is for the Roslyn project, not general consumption.
# This package is irrelevant.
# https://github.com/dotnet/roslyn/blob/main/src/RoslynAnalyzers/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.md

# ! Text.Analyzers is currently an internal-only package reserved for private consumption, and has been described as being not yet ready for release.
# This analyser will not be used.
# https://github.com/dotnet/roslyn/blob/main/src/RoslynAnalyzers/Text.Analyzers/Text.Analyzers.md

# End of https://github.com/dotnet/roslyn-analyzers & first-party analysers.
# Resume https://github.com/Cybermaxs/awesome-analyzers

# ! StyleCopAnalyzers does not yet support C# 9 in a stable release.
# This analyser will not be used.
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers

# ! Wintellect.Analyzers has not been updated since 2016, as the creator has retired.
# This analyser will not be used.
# https://github.com/Wintellect/Wintellect.Analyzers

# SonarAnalyzer.CSharp
# https://www.nuget.org/packages/SonarAnalyzer.CSharp/
# https://rules.sonarsource.com/csharp/
# https://sonarsource.github.io/rspec/#/rspec/?lang=csharp
# Please note that this package barely documents certain aspects of functionality.

# S100: Methods and properties should be named in PascalCase
# Naming scheme preferences are to be configured via naming rules, not analysers.
# Please keep this rule's severity disabled to avoid improperly configuring naming scheme preferences.
dotnet_diagnostic.S100.severity = none
# Please see naming rules instead.

# S1006: Method overrides should not change parameter defaults
# MA0061 should control method overrides changing parameter default preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1006.severity = none
# Please see MA0061 instead.

# S101: Types should be named in PascalCase
# Naming scheme preferences are to be configured via naming rules, not analysers.
# Please keep this rule's severity disabled to avoid improperly configuring naming scheme preferences.
dotnet_diagnostic.S101.severity = none
# Please see naming rules instead.

# S103: Lines should not be too long
# This rule can be customised with SonarLint.xml.
# RCS0056 should control line length preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S103.severity = none
# Please see RCS0056 instead.

# S104: Files should not have too many lines of code
# This rule can be customised with SonarLint.xml.
# Excessively long files should be refactored into smaller, more focused files for maintainability.
# Please keep this rule's severity above suggestion to actively avoid excessively long files.
dotnet_diagnostic.S104.severity = warning
# S1048: Finalisers should not throw exceptions
# CA1065 should control disallowed exception throwing preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1048.severity = none
# Please see CA1065 instead.

# S105: Tabulation characters should not be used
# Indent style should be controlled by .editorconfig, not analysers.
# Please keep this rule's severity disabled to avoid improperly configuring indent style.
dotnet_diagnostic.S105.severity = none
# Please see indent_style instead.

# S106: Standard outputs should not be used directly to log anything
# Using a dedicated logger is highly recommended.
# Please keep this rule's severity above suggestion to actively encourage using dedicated loggers for maintainability.
dotnet_diagnostic.S106.severity = warning
# S1066: Mergeable "if" statements should be combined
# Merging if statements when possible will decrease the nesting of the code and improve its readability.
# Please keep this rule's severity above suggestion to actively encourage merging if statements for maintainability.
dotnet_diagnostic.S1066.severity = warning
# S1067: Expressions should not be too complex
# This rule can be customised with SonarLint.xml.
# A single expression’s complexity should not become too high to keep the code readable.
# Please keep this rule's severity above suggestion to actively avoid complex expressions for maintainability.
dotnet_diagnostic.S1067.severity = warning
# S107: Methods should not have too many parameters
# This rule can be customised with SonarLint.xml.
# Methods with a long parameter list are difficult to use because maintainers must figure out the role of each parameter and keep track of their position.
# Please keep this rule's severity above suggestion to actively avoid methods with too many parameters for maintainability.
dotnet_diagnostic.S107.severity = warning
# S1075: URIs should not be hardcoded
# Hard-coded URIs can contain sensitive information, like IP addresses, and they should not be stored in the code.
# Please keep this rule's severity above suggestion to actively avoid hard-coded URIs.
dotnet_diagnostic.S1075.severity = warning
# S108: Nested blocks of code should not be left empty
# An empty code block is confusing. Removing or filling the empty code blocks takes away ambiguity and generally results in a more straightforward and less surprising code.
# Please keep this rule's severity above suggestion to actively avoid empty nested blocks of code to make intentionality clear.
dotnet_diagnostic.S108.severity = warning
# S109: Magic numbers should not be used
# A magic number is a hard-coded numerical value that may lack context or meaning. They should not be used because they can make the code less readable and maintainable.
# Please keep this rule's severity above suggestion to actively avoid magic numbers for readability & maintainability.
dotnet_diagnostic.S109.severity = warning
# S110: Inheritance tree of classes should not be too deep
# This rule can be customised with SonarLint.xml.
# CA1501 should control excessively deep inheritance tree of classes preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S110.severity = none
# Please see CA1501 instead.

# S1104: Fields should not have public accessibility
# CA1051 should control public field preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1104.severity = none
# Please see CA1051 instead.

# S1109: A close curly brace should be located at the beginning of a line
# IDE0055 should control curly brace formatting options.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1109.severity = none
# Please see IDE0055 instead.

# S1110: Redundant pairs of parentheses should be removed
# IDE0047 should control redundant parentheses preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1110.severity = none
# Please see IDE0047 instead.

# S1116: Empty statements should be removed
# RCS1259 should control empty statement preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1116.severity = none
# Please see RCS1259 instead.

# S1117: Local variables should not shadow class fields or properties
# MA0084 should control shadowed class field or property preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1117.severity = none
# Please see MA0084 instead.

# S1118: Utility classes should not have public constructors
# Utility classes with public constructors cause conflicting intentionality.
# Please keep this rule's severity above suggestion to actively encourage properly implementing utility classes.
dotnet_diagnostic.S1118.severity = warning
# S112: General or reserved exceptions should never be thrown
# CA2201 should control throwing general or reserved exceptions preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S112.severity = none
# Please see CA2201 instead.

# S1121: Assignments should not be made from within sub-expressions
# Assignments made within sub-expressions is highly confusing, and should always be separated for readability & maintainability.
# Please keep this rule's severity above suggestion to actively avoid confusing assignments within sub-expressions.
dotnet_diagnostic.S1121.severity = warning
# S1123: "Obsolete" attributes should include explanations
# CA1041 should control [Obsolete] explanation preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1123.severity = none
# Please see CA1041 instead.

# S1125: Boolean literals should not be redundant
# IDE0100 should control redundant boolean literal preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1125.severity = none
# Please see IDE0100 instead.

# S1128: Unnecessary "using" should be removed
# IDE0005 should control unnecessary using directive preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1128.severity = none
# Please see IDE0005 instead.

# S113: Files should end with a newline
# insert_final_newline & RCS0058 should control final newline preferences, not analysers.
# Please keep this rule's severity disabled to avoid using multiple tools to control the same preferences.
dotnet_diagnostic.S113.severity = none
# Please see insert_final_newline & RCS0058 instead.

# S1133: Deprecated code should be removed
# Deprecated code should eventually be removed for maintainability.
# Please keep this rule's severity above silent to actively encourage removing deprecated code.
dotnet_diagnostic.S1133.severity = suggestion
# S1134: Track uses of "FIXME" tags
# FIXME tags should not be left behind.
# Please keep this rule's severity above suggestion to actively encourage resolving FIXME tags.
dotnet_diagnostic.S1134.severity = warning
# S1135: Track uses of "TODO" tags
# MA0026 should control TODO tag preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1135.severity = none
# Please see MA0026 instead.

# S1144: Unused private types or members should be removed
# IDE0051 should control unused member declaration preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1144.severity = none
# Please see IDE0051 instead.

# S1147: Exit methods should not be called
# Calling exit methods should generally be avoided.
# Please keep this rule's severity above suggestion to actively avoid calling exit methods.
dotnet_diagnostic.S1147.severity = warning
# S1151: "switch case" clauses should not have too many lines of code
# This rule can be customised with SonarLint.xml.
# Switch case clauses should not be excessively complex for maintainability.
# Please keep this rule's severity above suggestion to actively encourage simplifying switch case clauses.
dotnet_diagnostic.S1151.severity = warning
# S1155: "Any()" should be used to test for emptiness
# CA1827 should control using Any() to test for emptiness preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1155.severity = none
# Please see CA1827 instead.

# S1163: Exceptions should not be thrown in finally blocks
# CA2219 should control throwing exceptions in finally block preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1163.severity = none
# Please see CA2219 instead.

# S1168: Empty arrays and collections should be returned instead of null
# Returning null forces callers to check for null.
# Please keep this rule's severity above suggestion to actively encourage returning empty arrays & empty collections.
dotnet_diagnostic.S1168.severity = warning
# S1172: Unused method parameters should be removed
# IDE0060 should control unused parameter preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1172.severity = none
# Please see IDE0060 instead.

# S1185: Overriding members should do more than simply call the same member in the base class
# RCS1132 should control redundant overriding property preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1185.severity = none
# Please see RCS1132 instead.

# S1186: Methods should not be empty
# Empty methods should be removed.
# Please keep this rule's severity above suggestion to actively avoid useless code.
dotnet_diagnostic.S1186.severity = warning
# S1192: String literals should not be duplicated
# This rule can be customised with SonarLint.xml.
# Magic strings should be avoided.
# Please keep this rule's severity above suggestion to actively avoid magic strings.
dotnet_diagnostic.S1192.severity = warning
# S1199: Nested code blocks should not be used
# Nested code blocks are less readable. Use within methods indicate the method should be refactored into smaller, more focused methods.
# Please keep this rule's severity above silent to actively avoid nested code blocks for maintainability.
dotnet_diagnostic.S1199.severity = suggestion
# S1200: Classes should not be coupled to too many other classes
# This rule can be customised with SonarLint.xml.
# CA1506 should control excessively coupled class preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1200.severity = none
# Please see CA1506 instead.

# S1206: "Equals(Object)" and "GetHashCode()" should be overridden in pairs
# CS0659 should control overriding Equals without overriding GetHashCode preferences.
# SS005 should control overriding Equals & GetHashCode in pair for class preferences.
# SS017 should control overriding Equals & GetHashCode in pair for struct preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1206.severity = none
# Please see CS0659 for overriding Equals without overriding GetHashCode.
# Please see SS005 for overriding Equals & GetHashCode in pair for classes.
# Please see SS017 for overriding Equals & GetHashCode in pair for structs.

# S121: Control structures should use curly braces
# IDE0011 should control curly brace preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S121.severity = none
# Please see IDE0011 instead.

# S1210: "Equals" and the comparison operators should be overridden when implementing "IComparable"
# CA1036 should control overriding comparison operators when implementing IComparable preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1210.severity = none
# Please see CA1036 instead.

# S1215: "GC.Collect" should not be called
# Calling GC.Collect is rarely necessary and can significantly affect application performance.
# Please keep this rule's severity above suggestion to actively avoid calling GC.Collect for more performant code.
dotnet_diagnostic.S1215.severity = warning
# S122: Statements should be on separate lines
# IDE0055 should control putting statements on separate line preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S122.severity = none
# Please see IDE0055 instead.

# S1226: Method parameters, caught exceptions and foreach variables' initial values should not be ignored
# IDE0060 should control ignoring initial values of method parameters preferences.
# IDE0059 should control ignoring initial values of caught exceptions preferences.
# CS1656 should control ignoring initial values of foreach variables preferences.
# Please note that S1226 does not inspect foreach variables, despite the title of this rule claiming to.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1226.severity = none
# Please see IDE0059 & IDE0060 for method parameters.
# Please see IDE0059 for caught exceptions.
# Please see CS1656 for foreach variables.

# S1227: break statements should not be used except for switch cases
# Using break statements outside of switch cases makes code difficult to read.
# Please keep this rule's severity above suggestion to actively avoid break statements outside of switch cases for maintainability.
dotnet_diagnostic.S1227.severity = warning
# S1244: Floating point numbers should not be tested for equality
# Even if two floating point numbers appear to be equal, they might not be due to the tiny differences in their binary representation.
# Please keep this rule's severity above suggestion to actively avoid comparing floating point numbers for reliability.
dotnet_diagnostic.S1244.severity = warning
# S125: Sections of code should not be commented out
# Commented out code distracts from regular code.
# Please keep this rule's severity above suggestion to actively encourage removing commented out code for maintainability.
dotnet_diagnostic.S125.severity = warning
# S126: "if ... else if" constructs should end with "else" clauses
# A missing else block is a sign of unintended functionality.
# Please keep this rule's severity above suggestion to actively encourage adding else blocks for maintainability.
dotnet_diagnostic.S126.severity = warning
# S1264: A "while" loop should be used instead of a "for" loop
# For loops used in place of while loops are highly confusing.
# Please keep this rule's severity above suggestion to actively avoid using for loops in place of while loops for maintainability.
dotnet_diagnostic.S1264.severity = warning
# S127: "for" loop stop conditions should be invariant
# Stop conditions that are not invariant are slightly less efficient, are difficult to understand & maintain, & likely lead to the introduction of errors in the future.
# Please keep this rule's severity above suggestion to actively avoid non-invariant stop conditions for for loops.
dotnet_diagnostic.S127.severity = warning
# S1301: "switch" statements should have at least 3 "case" clauses
# Switch statements with less than 3 cases can be simplified to if statements for maintainability.
# Please keep this rule's severity above silent to actively encourage simplifying redundant switch statements.
dotnet_diagnostic.S1301.severity = suggestion
# S1309: Track uses of in-source issue suppressions
# Issue suppressions are not a good reason to clog error lists with messages. Enabling this rule may lead to frequently glossing over violations, which wastes time.
# Unnecessary suppressions are already tracked by IDE0079 anyways.
# Simply pay mind to suppressed issues when modifying code, and avoid widely scoped issue suppressions. (Solution, Project or File wide suppressions.)
# Please keep this rule's severity disabled to avoid clogging error lists with insignificant information.
dotnet_diagnostic.S1309.severity = none
# Please see IDE0079 instead for unnecessary issue suppression preferences.

# S131: "switch/Select" statements should contain a "default/Case Else" clauses
# IDE0010 should control missing switch label preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S131.severity = none
# Please see IDE0010 instead.

# S1312: Logger fields should be "private static readonly"
# Private static readonly logger fields are the least prone to misuse.
# Please keep this rule's severity above suggestion to actively encourage making logging fields private static readonly for maintainability.
dotnet_diagnostic.S1312.severity = warning
# S1313: Using hardcoded IP addresses is security-sensitive
# Hardcoded IP addresses are a security vulnerability.
# Please keep this rule's severity disabled to avoid using C# 10+ features.
dotnet_diagnostic.S1313.severity = none
# S1313 appears to be for C# 10+ only.

# S134: Control flow statements "if", "switch", "for", "foreach", "while", "do" and "try" should not be nested too deeply
# This rule can be customised with SonarLint.xml.
# Excessively nested control flow statements are difficult to understand.
# Please keep this rule's severity above suggestion to actively avoid excessively nested control flow statements for maintainability.
dotnet_diagnostic.S134.severity = warning
# S138: Functions should not have too many lines of code
# This rule can be customised with SonarLint.xml.
# CA1505 should control excessively long function preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S138.severity = none
# Please see CA1505 instead.

# S1449: Culture should be specified for "string" operations
# CA1309 should control using ordinal StringComparison for non-linguistic string operation preferences.
# CA1310 should control specifying StringComparison to avoid culture-specific behaviour preferences.
# CA1311 should control specifying CultureInfo for ToUpper/ToLower preferences.
# Microsoft.CodeAnalysis.NetAnalyzers' Globalisation rules should control specifying culture preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1449.severity = none
# Please see CA1309 for using ordinal StringComparison for non-linguistic string operation preferences.
# Please see CA1310 for specifying StringComparison to avoid culture-specific behaviour preferences.
# Please see CA1311 for specifying CultureInfo for ToUpper/ToLower preferences.

# S1450: Private fields only used as local variables in methods should become local variables
# Local variables should be properly contained within the scope of methods.
# Please keep this rule's severity above suggestion to actively encourage properly implementing local variables.
dotnet_diagnostic.S1450.severity = warning
# S1451: Track lack of copyright and license headers
# This rule can be customised with SonarLint.xml.
# IDE0073 should control header preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1451.severity = none
# Please see IDE0073 instead.

# S1479: "switch" statements should not have too many "case" clauses
# This rule can be customised with SonarLint.xml.
# A switch statement with an excessively high number of case clauses is usually an attempt to map two sets of data. A Dictionary should be used instead.
# Please keep this rule's severity above suggestion to actively avoid switch statements with excessively high amount of case clauses for maintainability.
dotnet_diagnostic.S1479.severity = warning
# S1481: Unused local variables should be removed
# IDE0059, CS0168 & CS0219 should control unused local variable preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1481.severity = none
# Please see IDE0059, CS0168 & CS0219 instead.

# S1541: Methods and properties should not be too complex
# This rule can be customised with SonarLint.xml.
# CA1505 should control excessively complex method & property preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1541.severity = none
# Please see CA1505 instead.

# S1607: Tests should not be ignored
# Ignored tests should not be left behind.
# Please keep this rule's severity above suggestion to actively encourage unignoring tests.
dotnet_diagnostic.S1607.severity = warning
# S1643: Strings should not be concatenated using '+' in a loop
# SS058 should control string concatenation within loop preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1643.severity = none
# Please see SS058 instead.

# S1656: Variables should not be self-assigned
# CS1717 should control self-assigned variable preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1656.severity = none
# Please see CS1717 instead.

# S1659: Multiple variables should not be declared on the same line
# RCS1081 should control multi-assignment statement preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1659.severity = none
# Please see RCS1081 instead.

# S1694: An abstract class should have both abstract and concrete methods
# An abstract class that lacks either abstract or concrete methods is not an abstract class.
# Please keep this rule's severity above silent to actively encourage properly designed abstract classes.
dotnet_diagnostic.S1694.severity = suggestion
# S1696: NullReferenceException should not be caught
# NullReferenceExceptions should be prevented, not caught.
# Please keep this rule's severity above suggestion to actively encourage preventing NullReferenceExceptions for maintainability.
dotnet_diagnostic.S1696.severity = warning
# S1698: "==" should not be used when "Equals" is overridden
# Using default equality methods when Equals is overridden is likely to be unintentional.
# Please keep this rule's severity above suggestion to actively avoid unintentional behaviour.
dotnet_diagnostic.S1698.severity = warning
# S1699: Constructors should only call non-overridable methods
# CA2214 should control overridable methods being called in constructors preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1699.severity = none
# Please see CA2214 instead.

# S1751: Loops with at most one iteration should be refactored
# Loops that only execute once are redundant and should be corrected.
# Please keep this rule's severity above suggestion to actively avoid redundant loops.
dotnet_diagnostic.S1751.severity = warning
# S1764: Identical expressions should not be used on both sides of operators
# Identical expressions on both sides typically indicates unintended behaviour.
# Please keep this rule's severity above suggestion to actively avoid unintended behaviour.
dotnet_diagnostic.S1764.severity = warning
# S1821: "switch" statements should not be nested
# Nested switch statements are difficult to understand.
# Please keep this rule's severity above suggestion to actively avoid nested switch statements for maintainability.
dotnet_diagnostic.S1821.severity = warning
# S1848: Objects should not be created to be dropped immediately without being used
# CA1806 should control unused method result preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1848.severity = none
# Please see CA1806 instead.

# S1854: Unused assignments should be removed
# IDE0059 should control unused assignment preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1854.severity = none
# Please see IDE0059 instead.

# S1858: "ToString()" calls should not be redundant
# RCS1097 should control useless ToString call preferences.
# While S1858 does not completely mirror RCS1097, the unique cases that S1858 covers harm readability.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1858.severity = none
# Please see RCS1097 instead.

# S1862: Related "if/else if" statements should not have the same condition
# Duplicate if statement conditions are redundant and typically indicate unintended behaviour.
# Please keep this rule's severity above suggestion to actively avoid unintended behaviour.
dotnet_diagnostic.S1862.severity = warning
# S1871: Two branches in a conditional structure should not have exactly the same implementation
# Multiple branches in a control structure with identical implementation typically indicates unintended behaviour and should be simplified for maintainability.
# Please keep this rule's severity above suggestion to actively avoid unintended behaviour.
dotnet_diagnostic.S1871.severity = warning
# S1905: Redundant casts should not be used
# Redundant casts are confusing and should be removed for maintainability.
# Although S1905 overlaps with other rules, this rule covers more cases that other rules do not.
# Please keep this rule's severity above suggestion to actively avoid redundant casts for maintainability.
dotnet_diagnostic.S1905.severity = warning
# S1939: Inheritance list should not be redundant
# Redundant inheritance can be confusing and should be removed.
# Please keep this rule's severity above silent to actively avoid redundant inheritance for maintainability.
dotnet_diagnostic.S1939.severity = suggestion
# S1940: Boolean checks should not be inverted
# RCS1068 should control simplifying inverted boolean check preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S1940.severity = none
# Please see RCS1068 instead.

# S1944: Invalid casts should be avoided
# Invalid casts causes unexpected behaviour & InvalidCastExceptions.
# Please keep this rule's severity above suggestion to actively avoid invalid casts.
dotnet_diagnostic.S1944.severity = warning
# S1994: "for" loop increment clauses should modify the loops' counters
# Non-standard for loop usage is difficult to understand and prone to unexpected behaviour.
# Please keep this rule's severity above suggestion to actively avoid non-standard usage of for loops for maintainability.
dotnet_diagnostic.S1994.severity = warning
# S2053: Password hashing functions should use an unpredictable salt
# Insecure salts lead to security vulnerabilities.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities.
dotnet_diagnostic.S2053.severity = warning
# S2068: Hard-coded credentials are security-sensitive
# This rule can be customised with SonarLint.xml.
# Hard-coded credentials can be extracted easily.
# Please keep this rule's severity above suggestion to actively avoid hard-coding credentials for security.
dotnet_diagnostic.S2068.severity = warning
# S2077: Formatting SQL queries is security-sensitive
# Formatted SQL queries can be difficult to maintain, debug and can increase the risk of SQL injection when concatenating untrusted values into the query.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities.
dotnet_diagnostic.S2077.severity = warning
# S2092: Creating cookies without the "secure" flag is security-sensitive
# Creating cookies with the secure flag is preferred.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via insecure cookies.
dotnet_diagnostic.S2092.severity = warning
# S2094: Classes should not be empty
# Empty classes can be confusing and should be removed for maintainability.
# Please keep this rule's severity above silent to actively avoid empty classes for maintainability.
dotnet_diagnostic.S2094.severity = suggestion
# S2114: Collections should not be passed as arguments to their own methods
# Passing collections as arguments to their own methods can lead to unexpected behaviour.
# Please keep this rule's severity above suggestion to actively avoid unexpected behaviour.
dotnet_diagnostic.S2114.severity = warning
# S2115: A secure password should be used when connecting to a database
# Insecure passwords lead to security vulnerabilities.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via insecure passwords.
dotnet_diagnostic.S2115.severity = warning
# S2123: Values should not be uselessly incremented
# Useless incrementations typically indicate unintended behaviour.
# Please keep this rule's severity above suggestion to actively avoid unintended behaviour.
dotnet_diagnostic.S2123.severity = warning
# S2139: Exceptions should be either logged or rethrown but not both
# Logging and throwing the same exceptions duplicates exception logs, which can complicate debuggability.
# Please keep this rule's severity above suggestion to actively avoid duplicating exception logs for maintainability.
dotnet_diagnostic.S2139.severity = warning
# S2148: Underscores should be used to make large numbers readable
# Underscores help make large numbers more readable.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.S2148.severity = suggestion
# S2156: "sealed" classes should not have "protected" members
# CS0628 should control protected members within sealed classes preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2156.severity = none
# Please see CS0628 instead.

# S2166: Classes named like "Exception" should extend "Exception" or a subclass
# CA1711 should control Exception suffix preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2166.severity = none
# Please see CA1711 instead.

# S2178: Short-circuit logic should be used in boolean contexts
# RCS1233 should control short-curcuit logic preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2178.severity = none
# Please see RCS1233 instead.

# S2183: Integral numbers should not be shifted by zero or more than their number of bits-1
# Shifting by 0 or more than one less than their bit count should be avoided.
# Please keep this rule's severity above suggestion to actively avoid shifting integral numbers by confusing values
dotnet_diagnostic.S2183.severity = warning
# S2184: Results of integer division should not be assigned to floating point variables
# SS003 should control integer division preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2184.severity = none
# Please see SS003 instead.

# S2187: Test classes should contain at least one test case
# Test classes without any test cases can lead to the assumption that everything is working despite issues still being present.
# Please keep this rule's severity above suggestion to actively encourage properly implementing test classes.
dotnet_diagnostic.S2187.severity = warning
# S2190: Loops and recursions should not be infinite
# Infinite loops always lead to programme failure.
# Please keep this rule's severity above suggestion to actively avoid infinite loops.
dotnet_diagnostic.S2190.severity = warning
# S2197: Modulus results should not be checked for direct equality
# Modulus results could be negative if used on a negative value.
# Please keep this rule's severity above suggestion to actively avoid unintended behaviour.
dotnet_diagnostic.S2197.severity = warning
# S2198: Unnecessary mathematical comparisons should not be made
# Unnecessary mathematical comparisons typically indicate unexpected behaviour.
# Please keep this rule's severity above suggestion to actively avoid unexpected behaviour.
dotnet_diagnostic.S2198.severity = warning
# S2201: Methods without side effects should not have their return values ignored
# SS040 should control ignored return values from string operation preferences.
# IDE0058 should control all other ignored return values from operation preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2201.severity = none
# Please see SS040 for unused return values from string operations.
# Please see IDE0058 for all other unused return values from operations.

# S2219: Runtime type checking should be simplified
# Simplifying runtime type checking helps readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.S2219.severity = suggestion
# S2221: "Exception" should not be caught
# CA1031 should control catching generic exception type preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2221.severity = none
# Please see CA1031 instead.

# S2222: Locks should be released on all paths
# Failure to release locks on all paths can lead to deadlocks.
# Please keep this rule's severity above suggestion to actively avoid deadlocks.
dotnet_diagnostic.S2222.severity = warning
# S2223: Non-constant static fields should not be visible
# CA2211 should control non-constant static field visibility preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2223.severity = none
# Please see CA2211 instead.

# S2225: "ToString()" method should not return null
# Returning empty strings instead of null simplifies code since null checks are no longer necessary.
# Please keep this rule's severity above suggestion to actively encourage properly implementing ToString methods.
dotnet_diagnostic.S2225.severity = warning
# S2234: Arguments should be passed in the same order as the method parameters
# Mismatching argument/parameter order is highly confusing.
# Please keep this rule's severity above suggestion to actively avoid confusing argument/parameter orders for maintainability.
dotnet_diagnostic.S2234.severity = warning
# S2245: Using pseudorandom number generators (PRNGs) is security-sensitive
# Stronger random number generators should be used in security-sensitive contexts.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities.
dotnet_diagnostic.S2245.severity = warning
# S2251: A "for" loop update clause should move the counter in the right direction
# For loops moving in the wrong direction typically indicate unintended behaviour.
# Please keep this rule's severity above suggestion to actively encourage properly implementing for loops.
dotnet_diagnostic.S2251.severity = warning
# S2252: For-loop conditions should be true at least once
# For loops that are never true will never execute.
# This rule covers unique cases that CS0162 & IDE0035 do not.
# Please keep this rule's severity above suggestion to actively encourage properly implementing for loops.
dotnet_diagnostic.S2252.severity = warning
# S2257: Using non-standard cryptographic algorithms is security-sensitive
# Non-standard algorithms are dangerous and could be broken to compromise data.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities.
dotnet_diagnostic.S2257.severity = warning
# S2259: Null pointers should not be dereferenced
# Dereferencing null pointers will throw NullReferenceExceptions.
# Please keep this rule's severity above suggestion to actively avoid NullReferenceExceptions.
dotnet_diagnostic.S2259.severity = warning
# S2275: Composite format strings should not lead to unexpected behavior at runtime
# CA2241 should control invalid format string preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2275.severity = none
# Please see CA2241 instead.

# S2290: Field-like events should not be virtual
# CA1070 should control virtual field-like event preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2290.severity = none
# Please see CA1070 instead.

# S2291: Overflow checking should not be disabled for "Enumerable.Sum"
# Disabling overflow checking has no effect on Enumerable.Sum.
# Please keep this rule's severity above suggestion to actively avoid misusing overflow checking.
dotnet_diagnostic.S2291.severity = warning
# S2292: Trivial properties should be auto-implemented
# IDE0032 should control trivial property preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2292.severity = none
# Please see IDE0032 instead.

# S2302: "nameof" should be used
# CA1507 should control nameof preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2302.severity = none
# Please see CA1507 instead.

# S2306: "async" and "await" should not be used as identifiers
# Using contextual keywords as identifiers is highly confusing.
# Please keep this rule's severity above suggestion to actively avoid confusingly named identifiers.
dotnet_diagnostic.S2306.severity = warning
# S2325: Methods and properties that don't access instance data should be static
# CA1822 should control making methods & properties static preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2325.severity = none
# Please see CA1822 instead.

# S2326: Unused type parameters should be removed
# Unused type parameters indicate unintended functionality.
# Please keep this rule's severity above suggestion to actively avoid unused type parameters for maintainability.
dotnet_diagnostic.S2326.severity = warning
# S2327: "try" statements with identical "catch" and/or "finally" blocks should be merged
# Identical try statements should be merged to simplify code for maintainability.
# Please keep this rule's severity above suggestion to actively encourage merging try statements for maintainability.
dotnet_diagnostic.S2327.severity = warning
# S2328: "GetHashCode" should not reference mutable fields
# SS008 should control GetHashCode referencing mutable fields preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2328.severity = none
# Please see SS008 instead.

# S2330: Array covariance should not be used
# Array covariance should be avoided as using it can lead to ArrayTypeMismatchExceptions.
# Please keep this rule's severity above suggestion to actively avoid ArrayTypeMismatchExceptions.
dotnet_diagnostic.S2330.severity = warning
# S2333: Redundant modifiers should not be used
# Redundant modifiers can be confusing and should be removed for maintainability.
# Please keep this rule's severity above suggestion to actively avoid redundant modifiers for maintainability.
dotnet_diagnostic.S2333.severity = warning
# S2339: Public constant members should not be used
# Public constant members should be avoided, as they require recompilation of everything that references the constant in order to change.
# Please keep this rule's severity above suggestion to actively avoid public constant members for maintainability.
dotnet_diagnostic.S2339.severity = warning
# S2342: Enumeration types should comply with a naming convention
# This rule can be customised with SonarLint.xml.
# Naming scheme preferences are to be configured via naming rules, not analysers.
# Please keep this rule's severity disabled to avoid improperly configuring naming scheme preferences.
dotnet_diagnostic.S2342.severity = none
# Please see naming rules instead for naming conventions.
# Please see CA1714 for naming flags enums preferences.
# Please see CA1717 for naming non-flags enums preferences.

# S2344: Enumeration type names should not have "Flags" or "Enum" suffixes
# CA1711 should control identifier suffix preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2344.severity = none
# Please see CA1711 instead.

# S2345: Flags enumerations should explicitly initialise all their members
# RCS1161 should control explicitly initialised enum member preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2345.severity = none
# Please see RCS1161 instead.

# S2346: Flags enumerations zero-value members should be named "None"
# CA1008 should control enum zero-value member preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2346.severity = none
# Please see CA1008 instead.

# S2357: Fields should be private
# CA1051 should control non-private field preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2357.severity = none
# Please see CA1051 instead.

# S2360: Optional parameters should not be used
# Optional parameters can be confusing and should be replaced with overloads to simplify code for maintainability.
# Please keep this rule's severity above suggestion to actively avoid optional parameters for maintainability.
dotnet_diagnostic.S2360.severity = warning
# S2365: Properties should not make collection or array copies
# Properties that copy collections or arrays should be refactored into methods.
# Please keep this rule's severity above suggestion to actively avoid properties that copy collections or arrays for performance.
dotnet_diagnostic.S2365.severity = warning
# S2368: Public methods should not have multidimensional array parameters
# Multidimensional array parameters can be difficult to understand and should be avoided in a public context.
# Please keep this rule's severity above suggestion to actively avoid public multidimensional array parameters for maintainability.
dotnet_diagnostic.S2368.severity = warning
# S2372: Exceptions should not be thrown from property getters
# CA1065 should control raising exceptions in unexpected locations preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2372.severity = none
# Please see CA1065 instead.

# S2376: Write-only properties should not be used
# CA1044 should control write-only property preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2376.severity = none
# Please see CA1044 instead.

# S2386: Mutable fields should not be "public static"
# CA2211 should control mutable field visibility preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2386.severity = none
# Please see CA2211 instead.

# S2387: Child class fields should not shadow parent class fields
# CS0108 should control shadowed parent class field preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2387.severity = none
# Please see CS0108 instead.

# S2436: Types and methods should not have too many generic parameters
# This rule can be customised with SonarLint.xml.
# A type or method with too many generic parameters likely indicates the type or method should be refactored away from having too many responsibilities.
# Please keep this rule's severity above suggestion to actively avoid excessively numerous generic parameters for maintainability.
dotnet_diagnostic.S2436.severity = warning
# S2437: Unnecessary bit operations should not be performed
# Unnecessary bit operations should be removed as the result is predictable.
# Please keep this rule's severity above suggestion to actively avoid unnecessary bit operations for maintainability.
dotnet_diagnostic.S2437.severity = warning
# S2445: Blocks should be synchronised on read-only fields
# SS051 should control synchronising blocks on read-only field preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2445.severity = none
# Please see SS051 instead.

# S2479: Whitespace and control characters in string literals should be explicit
# Unexpected whitespace and control characters may be difficult to recognise, which can lead to unintended behaviour.
# Please keep this rule's severity above suggestion to actively encourage explicitly adding whitespace and control characters in string literals for maintainability.
dotnet_diagnostic.S2479.severity = warning
# S2486: Generic exceptions should not be ignored
# CA1031 should control ignoring generic exception preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2486.severity = none
# Please see CA1031 instead.

# S2551: Shared resources should not be used for locking
# CA2002 should control weak lock preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2551.severity = none
# Please see CA2002 instead.

# S2583: Conditionally executed code should be reachable
# Conditional expressions which are always true or false can lead to unreachable code.
# This rule covers unique cases that other rules do not.
# Please keep this rule's severity above suggestion to actively avoid unreachable code for reliability.
dotnet_diagnostic.S2583.severity = warning
# S2589: Boolean expressions should not be gratuitous
# This rule covers unique cases that other rules do not.
# Please keep this rule's severity above suggestion to actively avoid redundant boolean expressions for maintainability.
dotnet_diagnostic.S2589.severity = warning
# S2612: Setting loose file permissions is security-sensitive
# The most restrictive possible permissions should be assigned to files and directories.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via setting loose file permissions.
dotnet_diagnostic.S2612.severity = warning
# S2629: Logging templates should be constant
# Logging arguments should not require evaluation in order to avoid unnecessary performance overhead.
# Please keep this rule's severity above suggestion to actively encourage constant logging templates for performance.
dotnet_diagnostic.S2629.severity = warning
# S2674: The length returned from a stream read should be checked
# The amount of bytes that were read is not guaranteed.
# Please keep this rule's severity above suggestion to actively encourage checking the length returned from a stream read for reliability.
dotnet_diagnostic.S2674.severity = warning
# S2681: Multiline blocks should be enclosed in curly braces
# IDE0011 should control curly brace preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2681.severity = none
# Please see IDE0011 instead.

# S2688: "NaN" should not be used in comparisons
# CA2242 should control NaN comparison preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2688.severity = none
# Please see CA2242 instead.

# S2692: "IndexOf" checks should not be for positive numbers
# Zero is a valid index. Positive number checks on IndexOf is incorrect usage of IndexOf.
# Please keep this rule's severity above suggestion to actively encourage properly using IndexOf.
dotnet_diagnostic.S2692.severity = warning
# S2696: Instance members should not write to "static" fields
# Writing to static fields from instance members may lead to unintended behaviour.
# Please keep this rule's severity above suggestion to actively avoid writing to static fields from instance members for maintainability.
dotnet_diagnostic.S2696.severity = warning
# S2699: Tests should include assertions
# Tests with no assertions can lead to a false sense of success.
# Please keep this rule's severity above suggestion to actively encourage properly implementing tests.
dotnet_diagnostic.S2699.severity = warning
# S2701: Literal boolean values should not be used in assertions
# Using literal boolean values in assertions can lead to less readable and less informative unit tests
# Please keep this rule's severity above suggestion to actively avoid literal boolean values in assertions for maintainability.
dotnet_diagnostic.S2701.severity = warning
# S2737: "catch" clauses should do more than rethrow
# Catch clauses that don't do anything other than rethrow are redundant and should be removed.
# Please keep this rule's severity above suggestion to actively avoid redundant catch clauses for maintainability.
dotnet_diagnostic.S2737.severity = warning
# S2743: Static fields should not be used in generic types
# A static field in a generic type is not shared among instances of different closed constructed types.
# This rule covers unique cases that other rules do not. (ie. CA1000 doesn't seem to cover static fields in generic types.)
# Please keep this rule's severity above suggestion to actively avoid static fields in generic types for maintainability.
dotnet_diagnostic.S2743.severity = warning
# S2755: XML parsers should not be vulnerable to XXE attacks
# Processing XML external entities can lead to security vulnerabilities.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via parsing XML external entities.
dotnet_diagnostic.S2755.severity = warning
# S2757: Non-existent operators like "=+" should not be used
# While non-existent operators do compile, they are highly confusing.
# While IDE0055 reports violations where S2757 does, IDE0055 treats them as minor formatting issues, but S2757 treats them as higher priority issues.
# Please keep this rule's severity above suggestion to actively avoid non-existent operators for reliability.
dotnet_diagnostic.S2757.severity = warning
# S2760: Sequential tests should not check the same condition
# Duplicate conditional statements are confusing and typically indicate unintended behaviour.
# Please keep this rule's severity above suggestion to actively avoid duplicate conditiona statements for maintainability.
dotnet_diagnostic.S2760.severity = warning
# S2761: Doubled prefix operators "!!" and "~~" should not be used
# Doubled prefix operators are redundant and should be removed for reliability.
# Please keep this rule's severity above suggestion to actively avoid doubled prefix operators for reliability.
dotnet_diagnostic.S2761.severity = warning
# S2857: SQL keywords should be delimited by whitespace
# Failure to delimit SQL keywords by whitespace may lead to runtime errors.
# Please keep this rule's severity above suggestion to actively encourage delimiting SQL keywords by whitespace for reliability.
dotnet_diagnostic.S2857.severity = warning
# S2925: "Thread.Sleep" should not be used in tests
# Using Thread.Sleep in a test might introduce unpredictable and inconsistent results depending on the environment
# Please keep this rule's severity above suggestion to actively avoid Thread.Sleep in tests for maintainability.
dotnet_diagnostic.S2925.severity = warning
# S2930: "IDisposables" should be disposed
# Failure to dispose IDisposables leads to unmanaged resources never being reclaimed.
# This rule covers unique cases that other rules do not. (ie. private IDisposable member)
# Please keep this rule's severity above suggestion to actively encourage properly using IDisposables.
dotnet_diagnostic.S2930.severity = warning
# S2931: Classes with "IDisposable" members should implement "IDisposable"
# CA1001 should control IDisposable class preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2931.severity = none
# Please see CA1001 instead.

# S2933: Fields that are only assigned in the constructor should be "readonly"
# IDE0044 should control readonly field preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2933.severity = none
# Please see IDE0044 instead.

# S2934: Property assignments should not be made for "readonly" fields not constrained to reference types
# Property assignments for readonly fields will not work.
# Please keep this rule's severity above suggestion to actively avoid property assignments for readonly fields for reliability.
dotnet_diagnostic.S2934.severity = warning
# S2952: Classes should "Dispose" of members from the classes' own "Dispose" methods
# Disposing of members should only occur in "Dispose" methods for reliability.
# Please keep this rule's severity above suggestion to actively encourage properly implementing IDisposables for reliability.
dotnet_diagnostic.S2952.severity = warning
# S2953: Methods named "Dispose" should implement "IDisposable.Dispose"
# "Dispose" methods should be reserved for IDisposables only for maintainability.
# Please keep this rule's severity above suggestion to actively avoid "Dispose" methods on non-IDisposables for maintainability.
dotnet_diagnostic.S2953.severity = warning
# S2955: Generic parameters not constrained to reference types should not be compared to "null"
# RCS1165 should control unconstrained generic parameters checked compared to null preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2955.severity = none
# Please see RCS1165 instead.

# S2970: Assertions should be complete
# Incomplete assertions can lead to tests that don't do anything.
# Please keep this rule's severity above suggestion to actively avoid incomplete assertions for maintainability.
dotnet_diagnostic.S2970.severity = warning
# S2971: LINQ expressions should be simplified
# Simplifying LINQ expressions improves readability, performance & maintainability.
# This rule covers unique cases that other rules do not.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.S2971.severity = warning
# S2995: "Object.ReferenceEquals" should not be used for value types
# CA2013 should control Object.ReferenceEquals on value type preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2995.severity = none
# Please see CA2013 instead.

# S2996: "ThreadStatic" fields should not be initialised
# CA2019 should control initialising ThreadStatic field preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S2996.severity = none
# Please see CA2019 instead.

# S2997: "IDisposables" created in a "using" statement should not be returned
# If you return an IDisposable instance inside a using block, using will dispose it before the caller can use it, likely causing exceptions at runtime.
# Please keep this rule's severity above suggestion to actively avoid returning IDisposables created from using statements for reliability.
dotnet_diagnostic.S2997.severity = warning
# S3005: "ThreadStatic" should not be used on non-static fields
# CA2259 should control ThreadStatic on instance non-static field preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3005.severity = none
# Please see CA2259 instead.

# S3010: Static fields should not be updated in constructors
# Assigning a value to a static field in a constructor could cause unreliable behavior at runtime since it will change the value for all instances of the class.
# Please keep this rule's severity above suggestion to actively avoid updating static fields in constructors for maintainability.
dotnet_diagnostic.S3010.severity = warning
# S3011: Reflection should not be used to increase accessibility of classes, methods, or fields
# Bypassing accessibility via reflection can lead to maintainability issues & runtime errors.
# Please keep this rule's severity above suggestion to actively avoid increasing accessibility of members via reflection for maintainability.
dotnet_diagnostic.S3011.severity = warning
# S3052: Members should not be initialised to default values
# Initialising members to default values is redundant and can be removed to simplify code for maintainability.
# This rule covers unique cases that other rules do not.
# Please keep this rule's severity above silent to actively avoid initialising members to default values for maintainability.
dotnet_diagnostic.S3052.severity = suggestion
# S3059: Types should not have members with visibility set higher than the type's visibility
# Members with visibility higher than the containing type is redundant and should be corrected for maintainability.
# Please keep this rule's severity above suggestion to actively encourage properly using visibility modifiers.
dotnet_diagnostic.S3059.severity = warning
# S3060: "is" should not be used with "this"
# Testing "this" with "is" is redundant and should be removed for maintainability.
# Please keep this rule's severity above suggestion to actively avoid testing "this" with "is" for maintainability.
dotnet_diagnostic.S3060.severity = warning
# S3063: "StringBuilder" data should be used
# StringBuilder instances that never build a string clutter the code and worse are a drag on performance.
# Please keep this rule's severity above suggestion to actively avoid redundant StringBuilders for maintainability.
dotnet_diagnostic.S3063.severity = warning
# S3168: "async" methods should not return "void"
# VSTHRD100 should control async void method preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3168.severity = none
# Please see VSTHRD100 instead.

# S3169: Multiple "OrderBy" calls should not be used
# MA0030 should control multiple OrderBy call preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3169.severity = none
# Please see MA0030 instead.

# S3172: Delegates should not be subtracted
# Subtracting a chain of delegates from another one might yield unexpected results.
# Please keep this rule's severity above suggestion to actively avoid subtracting a chain of delegates from another for reliability.
dotnet_diagnostic.S3172.severity = warning
# S3215: "interface" instances should not be cast to concrete types
# Casting interface instances to concrete types likely indicates that something is missing from the interface.
# Please keep this rule's severity above suggestion to actively avoid casting interface instances to concrete types for maintainability.
dotnet_diagnostic.S3215.severity = warning
# S3216: "ConfigureAwait(false)" should be used
# VSTHRD111 should control ConfigureAwait preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3216.severity = none
# Please see VSTHRD111 instead.

# S3217: "Explicit" conversions of "foreach" loops should not be used
# IDE0220 should control explicit conversions of foreach loop preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3217.severity = none
# Please see IDE0220 instead.

# S3218: Inner class members should not shadow outer class "static" or type members
# Shadowing outer class members with inner class members is confusing and thus should be avoided for maintainability.
# Please keep this rule's severity above suggestion to actively avoid shadowing class members for maintainability.
dotnet_diagnostic.S3218.severity = warning
# S3220: Method calls should not resolve ambiguously to overloads with "params"
# Ambiguous method call resolutions to overloads with "params" can be confusing and thus should be avoided.
# Please keep this rule's severity above suggestion to actively avoid ambiguous method call resolutions for maintainability.
dotnet_diagnostic.S3220.severity = warning
# S3234: "GC.SuppressFinalise" should not be invoked for types without destructors
# CA1816 should control GC.SuppressFinalise preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3234.severity = none
# Please see CA1816 instead.

# S3235: Redundant parentheses should not be used
# RCS1050 should control redundant parentheses when creating new object preferences.
# RCS1039 should control redundant parentheses in attribute preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3235.severity = none
# Please see RCS1050 instead for object creation.
# Please see RCS1039 instead for attributes.

# S3236: Caller information arguments should not be provided explicitly
# Specifying the argument values defeats the purpose of caller information attributes.
# Please keep this rule's severity above suggestion to actively avoid explicitly providing caller information arguments for maintainability.
dotnet_diagnostic.S3236.severity = warning
# S3237: "value" contextual keyword should be used
# Not using "value" means that the accessor ignores the caller’s intent which could cause unexpected results at runtime.
# Please keep this rule's severity above suggestion to actively encourage using "value" contextual keyword for maintainability.
dotnet_diagnostic.S3237.severity = warning
# S3240: The simplest possible condition syntax should be used
# IDE0029 should control simplifying to null coalescing preferences.
# IDE0045 should control simplifying to ternary operator preferences.
# IDE0074 should control simplifying to coalescing compound assignment preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3240.severity = none
# Please see IDE0029 instead for null coalescing preferences.
# Please see IDE0045 instead for ternary operator preferences.
# Please see IDE0074 instead for coalescing compound assignment preferences.

# S3241: Methods should not return values that are never used
# IDE0058 should control unused return value preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3241.severity = none
# Please see IDE0058 instead.

# S3242: Method parameters should be declared with base types
# Declaring method parameters with derived types limits the use of the method, and should be replaced by base type parameters instead for maintainability.
# Please keep this rule's severity above suggestion to actively encourage using base types as parameters for maintainability.
dotnet_diagnostic.S3242.severity = warning
# S3244: Anonymous delegates should not be used to unsubscribe from Events
# MA0085 should control anonymous delegates being used to unsubscribe form Event preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3244.severity = none
# Please see MA0085 instead.

# S3246: Generic type parameters should be co/contravariant when possible
# Co/Contravariant generic type parameters have a wider scope of use.
# Please keep this rule's severity above suggestion to actively encourage covariant/contravariant generic type parameters for maintainability.
dotnet_diagnostic.S3246.severity = warning
# S3247: Duplicate casts should not be made
# Duplicate casts can be avoided to simplify code for maintainability & performance.
# Please keep this rule's severity above suggestion to actively avoid duplicate casts for more performant code.
dotnet_diagnostic.S3247.severity = warning
# S3249: Classes directly extending "object" should not call "base" in "GetHashCode" or "Equals"
# object.GetHashCode/Equals are based on reference, and will never be equal nor have the same hash.
# Please keep this rule's severity above suggestion to actively avoid misusing object.GetHashCode/Equals for reliability.
dotnet_diagnostic.S3249.severity = warning
# S3251: Implementations should be provided for "partial" methods
# Partial methods with missing implementations will have calls removed by the compiler. Implementations should be present for maintainability.
# Please keep this rule's severity above suggestion to actively avoid partial methods with no implementation for maintainability.
dotnet_diagnostic.S3251.severity = warning
# S3253: Constructor and destructor declarations should not be redundant
# Redundant ctor/cctor/dtor declarations can be removed to simplify code for maintainability.
# This rule covers unique cases that other rules do not. (ie. Redundant cctors)
# Please keep this rule's severity above suggestion to actively avoid redundant ctor/cctor/dtor declarations for maintainability.
dotnet_diagnostic.S3253.severity = warning
# S3254: Default parameter values should not be passed as arguments
# Specifying the default parameter values in a method call is redundant and can be removed to simplify code for maintainability.
# Please keep this rule's severity above suggestion to actively avoid specifying default parameter values in method calls for maintainability.
dotnet_diagnostic.S3254.severity = warning
# S3256: "string.IsNullOrEmpty" should be used
# string.Equals is significantly slower than using IsNullOrEmpty or Length.
# This rule covers unique cases that CA1820 does not.
# Please keep this rule's severity above suggestion to actively avoid using Equals to check string length for performance.
dotnet_diagnostic.S3256.severity = warning
# S3257: Declarations and initialisations should be as concise as possible
# The type of a variable can often be inferred by the compiler.
# Please keep this rule's severity above silent to actively encourage concise declarations & initialisations for maintainability.
dotnet_diagnostic.S3257.severity = suggestion
# S3260: Non-derived "private" classes and records should be "sealed"
# Sealing non-derived classes can improve performance.
# Please keep this rule's severity above suggestion to actively encourage sealing classes for performance.
dotnet_diagnostic.S3260.severity = warning
# S3261: Namespaces should not be empty
# RCS1259 should control empty syntax preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3261.severity = none
# Please see RCS1259 instead.

# S3262: "params" should be used on overrides
# RCS1193 should control params modifier on override preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3262.severity = none
# Please see RCS1193 instead.

# S3263: Static fields should appear in the order they must be initialised
# Placing a static field in a class above the field or fields required for its initialisation will yield unexpected results.
# Please keep this rule's severity above suggestion to actively avoid using static fields before they have been initialised.
dotnet_diagnostic.S3263.severity = warning
# S3264: Events should be invoked
# Events that are not invoked anywhere are dead code, and there’s no good reason to keep them in the source.
# Please keep this rule's severity above suggestion to actively avoid redundant events for maintainability.
dotnet_diagnostic.S3264.severity = warning
# S3265: Non-flags enums should not be used in bitwise operations
# Bitwise operations should only be performed on enums with [Flags].
# Please keep this rule's severity above suggestion to actively avoid misusing enums.
dotnet_diagnostic.S3265.severity = warning
# S3267: Loops should be simplified with "LINQ" expressions
# Certain loops can be replaced by LINQ expressions to simplify code for maintainability.
# Please keep this rule's severity above suggestion to actively encourage simplifying loops for maintainability.
dotnet_diagnostic.S3267.severity = warning
# S3329: Cipher Block Chaining IVs should be unpredictable
# Symmetric encryption should always use a non-repeatable initialisation vector to prevent dictionary attacks.
# This rule covers unique cases that CA5401 does not.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via predictable Cipher Block Chaining IVs.
dotnet_diagnostic.S3329.severity = warning
# S3330: Creating cookies without the "HttpOnly" flag is security-sensitive
# CA5396 should control HttpOnly flag preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3330.severity = none
# Please see CA5396 instead.

# S3343: Caller information parameters should come at the end of the parameter list
# Callers will be forced to use named arguments if they want to use the method properly.
# Please keep this rule's severity above suggestion to actively encourage placing caller info params at the end of param list for reliability.
dotnet_diagnostic.S3343.severity = warning
# S3346: Expressions used in "Debug.Assert" should not produce side effects
# Assertions with side effects can complicate debugging.
# Please keep this rule's severity above suggestion to actively avoid assertions with side effects for reliability.
dotnet_diagnostic.S3346.severity = warning
# S3353: Unchanged variables should be marked as "const"
# RCS1118 should control unchanged vars being const preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3353.severity = none
# Please see RCS1118 instead.

# S3358: Ternary operators should not be nested
# RCS1238 should control nested ternary operator preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3358.severity = none
# Please see RCS1238 instead.

# S3363: Date and time should not be used as a type for primary keys
# Using date & time as a type for primary keys may result in duplicates.
# Please keep this rule's severity above suggestion to actively avoid using date and time as a type for primary keys for reliability.
dotnet_diagnostic.S3363.severity = warning
# S3366: "this" should not be exposed from constructors
# Exposing "this" from constructors could lead to partially-constructed objects in a multi-threaded environment.
# Please keep this rule's severity above suggestion to actively avoid exposing "this" from constructors for maintainability.
dotnet_diagnostic.S3366.severity = warning
# S3376: Attribute, EventArgs, and Exception type names should end with the type being extended
# CA1710 should control identifier suffix preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3376.severity = none
# Please see CA1710 instead.

# S3397: "base.Equals" should not be used to check for reference equality in "Equals" if "base" is not "object"
# If a new base class that overrides Equals is introduced, equality will stop working.
# Please keep this rule's severity above suggestion to actively avoid relying on non-object base.Equals for maintainability.
dotnet_diagnostic.S3397.severity = warning
# S3398: "private" methods called only by inner classes should be moved to those classes
# Private methods that are only used by inner classes should be moved into those classes to reduce scope, simplifying code for maintainability.
# Please keep this rule's severity above suggestion to actively encourage minimising scope of private methods for maintainability.
dotnet_diagnostic.S3398.severity = warning
# S3400: Methods should not return constants
# Methods that return constants are redundant and should be replaced with constants to simplify code for maintainability.
# Please keep this rule's severity above silent to actively avoid redundant methods for maintainability.
dotnet_diagnostic.S3400.severity = warning
# S3415: Assertion arguments should be passed in the correct order
# Improperly ordered assertion arguments can lead to misleading info in error messages.
# Please keep this rule's severity above suggestion to actively avoid improperly ordered assertion arguments.
dotnet_diagnostic.S3415.severity = warning
# S3416: Loggers should be named for their enclosing types
# Loggers not named after their enclosing types can be confusing and lead to misconfiguration.
# Please keep this rule's severity above suggestion to actively encourage naming loggers after their enclosing types for maintainability.
dotnet_diagnostic.S3416.severity = warning
# S3427: Method overloads with default parameter values should not overlap
# Overloads with default parameters should not be hidden by another overload without default parameters.
# Please keep this rule's severity above suggestion to actively avoid hidden overloads for maintainability.
dotnet_diagnostic.S3427.severity = warning
# S3431: "[ExpectedException]" should not be used
# [ExpectedException] creates ambiguity on what part of the code is being expected to cause an exception.
# Please keep this rule's severity above suggestion to actively avoid [ExpectedException] for maintainability.
dotnet_diagnostic.S3431.severity = warning
# S3433: Test method signatures should be correct
# NUnit1012 should handle async void Test method preferences.
# NUnit1026 should handle non-public Test method preferences.
# A separate analyser should not control indication if other unit testing libraries support generics or not.
# For NUnit, 4.1+ seems required: https://docs.nunit.org/articles/nunit/writing-tests/attributes/testcasesource.html
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3433.severity = none
# Please see NUnit1012 instead for async void Test method preferences.
# Please see NUnit1026 instead for non-public Test method preferences.
# Please see the relevant unit testing library to determine if generic test methods are supported.

# S3440: Variables should not be checked against the values they're about to be assigned
# Checking variables against the values they're about to be assigned to is redundant and should be removed to simplify code for maintainability.
# Please keep this rule's severity above silent to actively avoid redundant variable value checking for maintainability.
dotnet_diagnostic.S3440.severity = suggestion
# S3441: Redundant property names should be omitted in anonymous classes
# IDE0037 should control redundant property names in anonymous class preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3441.severity = none
# Please see IDE0037 instead.

# S3442: "abstract" classes should not have "public" constructors
# An abstract type that has a public constructor is incorrectly designed.
# This rule covers unique cases that other rules do not. (ie. internal protected constructors)
# Please keep this rule's severity above suggestion to actively encourage correctly designing abstract types.
dotnet_diagnostic.S3442.severity = warning
# S3443: Type should not be examined on "System.Type" instances
# Examining the type of an instance of a Type variable will always result in System.Type, which is typically unintended behaviour.
# Please keep this rule's severity above suggestion to actively avoid examining the type of type variables for maintainability.
dotnet_diagnostic.S3443.severity = warning
# S3444: Interfaces should not simply inherit from base interfaces with colliding members
# Inheriting base interface with colliding members forces every caller to explicitly resolve ambiguities.
# Please keep this rule's severity above silent to actively avoid interfaces inheriting base interfaces with colliding members for maintainability.
dotnet_diagnostic.S3444.severity = suggestion
# S3445: Exceptions should not be explicitly rethrown
# CA2200 should control rethrown exception preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3445.severity = none
# Please see CA2200 instead.

# S3447: "[Optional]" should not be used on "ref" or "out" parameters
# Calls to methods with optional ref/out parameters will never compile.
# Please keep this rule's severity above suggestion to actively avoid optional ref/out parameters.
dotnet_diagnostic.S3447.severity = warning
# S3449: Right operands of shift operators should be integers
# A RuntimeBinderException will be raised if the right operand of shift operators cannot be implicitly converted to int at runtime.
# Please keep this rule's severity above suggestion to actively avoid RuntimeBinderExceptions.
dotnet_diagnostic.S3449.severity = warning
# S3450: Parameters with "[DefaultParameterValue]" attributes should also be marked "[Optional]"
# MA0087 should control [DefaultParameterValue] without [Optional] preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3450.severity = none
# Please see MA0087 instead.

# S3451: "[DefaultValue]" should not be used when "[DefaultParameterValue]" is meant
# MA0088 should control [DefaultValue] in place of [DefaultParameterValue] preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3451.severity = none
# Please see MA0088 instead.

# S3453: Classes should not have only "private" constructors
# Classes with only private constructors are redundant as they cannot be instantiated.
# Please keep this rule's severity above suggestion to actively avoid classes with only private constructors.
dotnet_diagnostic.S3453.severity = warning
# S3456: "string.ToCharArray()" and "ReadOnlySpan<T>.ToArray()" should not be called redundantly
# Strings & ReadOnlySpan<T> have indexers that render casting to arrays redundant.
# Please keep this rule's severity above suggestion to actively avoid redundant casts.
dotnet_diagnostic.S3456.severity = warning
# S3457: Composite format strings should be used correctly
# Incorrect arguments to formatting methods indicate unintended behaviour.
# This rule covers unique cases that other rules do not.
# Please keep this rule's severity above suggestion to actively encourage using correct arguments to formatting methods.
dotnet_diagnostic.S3457.severity = warning
# S3458: Empty "case" clauses that fall through to the "default" should be omitted
# RCS1069 should control empty case clauses that fall through to the default preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3458.severity = none
# Please see RCS1069 instead.

# S3459: Unassigned members should be removed
# IDE0051 & CA1823 should control unassigned member preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3459.severity = none
# Please see IDE0051 & CA1823 instead.

# S3464: Type inheritance should not be recursive
# Recursive type inheritance will result in TypeLoadExceptions being thrown.
# Please keep this rule's severity above suggestion to actively avoid recursive type inheritance.
dotnet_diagnostic.S3464.severity = warning
# S3466: Optional parameters should be passed to "base" calls
# Failing to pass optional parameters to base calls can result in unexpected behaviour.
# Please keep this rule's severity above suggestion to actively encourage passing optional parameters to base calls for reliability.
dotnet_diagnostic.S3466.severity = warning
# S3532: Empty "default" clauses should be removed
# RCS1070 should control empty default clause preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3532.severity = none
# Please see RCS1070 instead.

# S3597: "ServiceContract" and "OperationContract" attributes should be used together
# A contract without service operations is redundant, & only OperationContract methods defined within ServiceContract classes/interfaces are served.
# Please keep this rule's severity above suggestion to actively encourage properly implementing OperationContracts.
dotnet_diagnostic.S3597.severity = warning
# S3598: One-way "OperationContract" methods should have "void" return type
# A one-way OperationContract will not return any result.
# Please keep this rule's severity above suggestion to actively encourage properly implementing one-way OperationContracts.
dotnet_diagnostic.S3598.severity = warning
# S3600: "params" should not be introduced on overrides
# RCS1193 should control params modifier on override preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3600.severity = none
# Please see RCS1193 instead.

# S3603: Methods with "Pure" attribute should return a value
# A pure method without a return value is either missing a return value or is redundant.
# Please keep this rule's severity above suggestion to actively encourage properly using [Pure].
dotnet_diagnostic.S3603.severity = warning
# S3604: Member initialiser values should not be redundant
# Initialising members both inline & in constructors is redundant.
# This rule covers unique cases that other rules do not. (ie. All constructors setting an initial value for a member is noncompliant.)
# Please keep this rule's severity above suggestion to actively avoid redundant member initialisation.
dotnet_diagnostic.S3604.severity = warning
# S3610: Nullable type comparison should not be redundant
# Comparing types with nullable value types returns the underlying value type, either causing NullReferenceExceptions or a constant boolean expression.
# Please keep this rule's severity above suggestion to actively avoid redundant nullable type comparisons.
dotnet_diagnostic.S3610.severity = warning
# S3626: Jump statements should not be redundant
# Jump statements that don't change functionality are redundant and should be removed to simplify code for maintainability.
# This rule covers unique cases that other rules do not. (ie. Redundant "goto"s)
# Please keep this rule's severity above suggestion to actively avoid redundant jump statements for maintainability.
dotnet_diagnostic.S3626.severity = warning
# S3655: Empty nullable value should not be accessed
# Accessing empty nullable values results in InvalidOperationExceptions being thrown.
# Please keep this rule's severity above suggestion to actively avoid accessing empty nullable values.
dotnet_diagnostic.S3655.severity = warning
# S3717: Track use of "NotImplementedException"
# MA0025 should control NotImplementedException preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3717.severity = none
# Please see MA0025 instead.

# S3776: Cognitive Complexity of methods should not be too high
# This rule can be customised with SonarLint.xml.
# Methods with excessively high cognitive complexity should be refactored into smaller, easier to manage components.
# Please note that this is different than cyclomatic complexity. Refer to this rule's documentation for details.
# Please keep this rule's severity above suggestion to actively avoid methods with excessively high cognitive complexity.
dotnet_diagnostic.S3776.severity = warning
# S3869: "SafeHandle.DangerousGetHandle" should not be called
# The handle returned by SafeHandle.DangerousGetHandle is prone to security vulnerabilities & resource leaking as it lacks the safety checks SafeHandle comes with.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via SafeHandle.DangerousGetHandle.
dotnet_diagnostic.S3869.severity = warning
# S3871: Exception types should be "public"
# Making exceptions public make them easier to handle.
# This rule covers unique cases that other rules do not. (ie. a public Exception class defined within an internal class.)
# Please keep this rule's severity above suggestion to actively encourage easy to use exceptions.
dotnet_diagnostic.S3871.severity = warning
# S3872: Parameter names should not duplicate the names of their methods
# Parameter names that match the name of their methods is confusing.
# Please keep this rule's severity above suggestion to actively avoid parameter names that match their methods for maintainability.
dotnet_diagnostic.S3872.severity = warning
# S3874: "out" and "ref" parameters should not be used
# CA1021 should control out parameter preferences.
# CA1045 should control ref parameter preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3874.severity = none
# Please see CA1021 instead for out parameters.
# Please see CA1045 instead for ref parameters.

# S3875: "operator==" should not be overloaded on reference types
# CA1046 should control == overloads on reference type preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3875.severity = none
# Please see CA1046 instead.

# S3876: Strings or integral types should be used for indexers
# CA1043 should control indexer type preferneces.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3876.severity = none
# Please see CA1043 instead.

# S3877: Exceptions should not be thrown from unexpected methods
# Exceptions should not be raised in unexpected locations.
# This rule covers unique cases that other rules do not. (ie. Exceptions raised from module initialisers & operator overloads.)
# Please keep this rule's severity above suggestion to actively avoid raising exceptions in unexpected locations.
dotnet_diagnostic.S3877.severity = warning
# S3878: Arrays should not be created for params parameters
# Creating arrays for params parameters is redundant and should be removed to simplify code for maintainability.
# Please keep this rule's severity above silent to actively avoid redundantly creating arrays for params parameters for maintainability.
dotnet_diagnostic.S3878.severity = suggestion
# S3880: Finalisers should not be empty
# CA1821 should control empty finaliser preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3880.severity = none
# Please see CA1821 instead.

# S3881: "IDisposable" should be implemented correctly
# CA1063 should control implementing IDisposable correctly.
# CA1816 should control calling GC.SuppressFinalise correctly.
# CA2215 should control calling base class dispose correctly.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3881.severity = none
# Please see CA1063 instead for implementing IDisposable correctly.
# Please see CA1816 instead for calling GC.SuppressFinalise correctly.
# Please see CA2215 instead for calling base class dispose correctly.

# S3884: "CoSetProxyBlanket" and "CoInitialiseSecurity" should not be used
# This rule is deprecated as CoSetProxyBlanket & CoInitialiseSecurity can and should be used in some cases. See https://github.com/SonarSource/sonar-dotnet/issues/7960 for details.
# Please keep this rule's severity disabled to avoid using deprecated rules.
dotnet_diagnostic.S3884.severity = none
# There is no replacement for this rule.

# S3885: "Assembly.Load" should be used
# Unlike other methods, Assembly.Load requires the full specification of the dll to be loaded, which avoids unexpected dlls being loaded.
# Please keep this rule's severity above suggestion to actively encourage using Assembly.Load for maintainability.
dotnet_diagnostic.S3885.severity = warning
# S3887: Mutable, non-private fields should not be "readonly"
# The readonly modifier only prevents changing the field, not the contents of the field. Readonly yet mutable fields can be confusing.
# Please keep this rule's severity above suggestion to actively avoid mutable readonly fields for reliability.
dotnet_diagnostic.S3887.severity = warning
# S3889: "Thread.Resume" and "Thread.Suspend" should not be used
# CS0618 should control use of deprecated class member preferences.
# MA0035 should control use of dangerous threading method preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3889.severity = none
# Please see CS0618 instead for use of deprecated class member preferences.
# Please see MA0035 instead for use of dangerous threading methods.

# S3897: Classes that provide "Equals(<T>)" should implement "IEquatable<T>"
# MA0077 should control providing Equals(T) when IEquatable<T> is implemented preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3897.severity = none
# Please see MA0077 instead.

# S3898: Value types should implement "IEquatable<T>"
# SS017 should control value types implementing Equals preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3898.severity = none
# Please see SS017 instead.

# S3900: Arguments of public methods should be validated against null
# CA1062 should control validating arguments of public method preferences. (ie. CA1062 can be configured to analyse non-public API surfaces too.)
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3900.severity = none
# Please see CA1062 instead.

# S3902: "Assembly.GetExecutingAssembly" should not be called
# Type.Assembly is more performant & always returns the assembly of the contained type, unlike Assembly.GetExecutingAssembly.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.S3902.severity = warning
# S3903: Types should be defined in named namespaces
# CA1050 should control global namespace usage preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3903.severity = none
# Please see CA1050 instead.

# S3904: Assemblies should have version information
# CA1016 should control [AssemblyVersion] preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3904.severity = none
# Please see CA1016 instead.

# S3906: Event Handlers should have the correct signature
# CA1003 should control event handler signature preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3906.severity = none
# Please see CA1003 instead.

# S3908: Generic event handlers should be used
# CA1003 should control event handler signature preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3908.severity = none
# Please see CA1003 instead.

# S3909: Collections should implement the generic interface
# CA1010 should control collection interface implementation preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3909.severity = none
# Please see CA1010 instead.

# S3923: All branches in a conditional structure should not have exactly the same implementation
# Having all branches in a conditional structure with the same implementation indicates a problem.
# Please keep this rule's severity above suggestion to actively avoid conditional structures where every branch is identical for reliability.
dotnet_diagnostic.S3923.severity = warning
# S3925: "ISerialisable" should be implemented correctly
# Incorrect implementations of ISerialisable could result in invalid serialisation and bugs that are difficult to detect.
# This rule covers unique cases that other rules do not. (ie. serialisation constructor signature corrections)
# Please keep this rule's severity above suggestion to actively encourage properly implementing ISerialisable.
dotnet_diagnostic.S3925.severity = warning
# S3926: Deserialisation methods should be provided for "OptionalField" members
# Since optional fields are ignored during deserialisation, deserialisation event handlers should be provided to set them during the deserialisation process.
# Please keep this rule's severity above suggestion to actively encourage implementing deserialisation for optional fields for reliability.
dotnet_diagnostic.S3926.severity = warning
# S3927: Serialisation event handlers should be implemented correctly
# Incorrectly implemented serialisation event handlers will not be called.
# Please keep this rule's severity above suggestion to actively encourage correctly implementing serialisation event handlers for reliability.
dotnet_diagnostic.S3927.severity = warning
# S3928: Parameter names used into ArgumentException constructors should match an existing one
# CA2208 should control calling argument exceptions correctly preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3928.severity = none
# Please see CA2208 instead.

# S3937: Number patterns should be regular
# Irregular number patterns indicates a typo.
# Please keep this rule's severity above suggestion to actively avoid irregular number patterns.
dotnet_diagnostic.S3937.severity = warning
# S3949: Calculations should not overflow
# Calculations that are guaranteed to silently wrap around can lead to unintended behaviour.
# Please keep this rule's severity above suggestion to actively avoid calculations that are guaranteed to silently wrap around for reliability.
dotnet_diagnostic.S3949.severity = warning
# S3956: "Generic.List" instances should not be part of public APIs
# CA1002 should control exposing generic list preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3956.severity = none
# Please see CA1002 instead.

# S3962: "static readonly" constants should be "const" instead
# CA1802 should control const over static readonly preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3962.severity = none
# Please see CA1802 instead.

# S3963: "static" fields should be initialised inline
# CA1810 should control inline static field initialisation preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3963.severity = none
# Please see CA1810 instead.

# S3966: Objects should not be disposed more than once
# Disposing objects multiple times is highly confusing and error-prone.
# Please keep this rule's severity above suggestion to actively encourage disposing objects only once for maintainability.
dotnet_diagnostic.S3966.severity = warning
# S3967: Multidimensional arrays should not be used
# Jagged arrays can result in less wasted space for some sets of data.
# This rule covers unique cases that other rules do not. (ie. Local variables)
# Please keep this rule's severity above suggestion to actively encourage jagged arrays for performance.
dotnet_diagnostic.S3967.severity = warning
# S3971: "GC.SuppressFinalise" should not be called
# CA1816 should control GC.SuppressFinalise preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3971.severity = none
# Please see CA1816 instead.

# S3972: Conditionals should start on new lines
# IDE0055 should control formatting preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3972.severity = none
# Please see IDE0055 instead.

# S3973: A conditionally executed single line should be denoted by indentation
# IDE0055 should control formatting preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3973.severity = none
# Please see IDE0055 instead.

# S3981: Collection sizes and array length comparisons should make sense
# Checking collection size/array length for >= 0 or < 0 is redundant.
# This rule covers unique cases that other rules do not. (ie. array.LongLength, non-literal constant comparisons, etc.)
# Please keep this rule's severity above suggestion to actively avoid redundant collection size/array length comparisons.
dotnet_diagnostic.S3981.severity = warning
# S3984: Exceptions should not be created without being thrown
# CA1806 should control unused exception instance preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3984.severity = none
# Please see CA1806 instead.

# S3990: Assemblies should be marked as CLS compliant
# CA1014 should control CLS compliance preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3990.severity = none
# Please see CA1014 instead.

# S3992: Assemblies should explicitly specify COM visibility
# CA1017 should control COM visibility preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3992.severity = none
# Please see CA1017 instead.

# S3993: Custom attributes should be marked with "System.AttributeUsageAttribute"
# CA1018 should control [AttributeUsage] preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3993.severity = none
# Please see CA1018 instead.

# S3994: URI Parameters should not be strings
# CA1054 should control URI parameters instead of string preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3994.severity = none
# Please see CA1054 instead.

# S3995: URI return values should not be strings
# CA1055 should control URI return values instead of string preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3995.severity = none
# Please see CA1055 instead.

# S3996: URI properties should not be strings
# CA1056 should control URI properties instead of string preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3996.severity = none
# Please see CA1056 instead.

# S3997: String URI overloads should call "System.Uri" overloads
# String representations of URIs are prone to parsing and encoding errors which can lead to security vulnerabilities.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via string representations of URIs.
dotnet_diagnostic.S3997.severity = warning
# S3998: Threads should not lock on objects with weak identity
# CA2002 should control weak lock preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S3998.severity = none
# Please see CA2002 instead.

# S4000: Pointers to unmanaged memory should not be visible
# Externally visible pointers can lead to security vulnerabilities.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via externally visible pointers.
dotnet_diagnostic.S4000.severity = warning
# S4002: Disposable types should declare finalisers
# Disposable types should use SafeHandles, not error-prone finalisers.
# Please keep this rule's severity disabled to avoid using error-prone ways to handle Disposable types.
dotnet_diagnostic.S4002.severity = none
# Please see MA0055's documentation for preferred alternatives.

# S4004: Collection properties should be readonly
# CA2227 should control readonly collection property preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4004.severity = none
# Please see CA2227 instead.

# S4005: "System.Uri" arguments should be used instead of strings
# String representations of URIs are prone to parsing and encoding errors which can lead to vulnerabilities.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via string representations of URIs.
dotnet_diagnostic.S4005.severity = warning
# S4015: Inherited member visibility should not be decreased
# CS0108 should control decreased visibility on inherited member preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4015.severity = none
# Please see CS0108 instead.

# S4016: Enumeration members should not be named "Reserved"
# CA1700 should control enum members named "Reserved" preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4016.severity = none
# Please see CA1700 instead.

# S4017: Method signatures should not contain nested generic types
# Nested generic types are highly confusing and should be avoided if possible.
# Please keep this rule's severity above suggestion to actively avoid nested generic types for maintainability.
dotnet_diagnostic.S4017.severity = warning
# S4018: All type parameters should be used in the parameter list to enable type inference
# Using type parameters in the parameter list allows for type inference.
# Please keep this rule's severity above silent to actively encourage enabling type inference.
dotnet_diagnostic.S4018.severity = suggestion
# S4019: Base class methods should not be hidden
# Base class methods should never be hidden.
# This rule covers unique cases that other rules do not. (ie. multi-level inheritance, generics, etc.)
# Please keep this rule's severity above suggestion to actively discourage hiding base class methods.
dotnet_diagnostic.S4019.severity = warning
# S4022: Enumerations should have "Int32" storage
# CA1028 should control Int32 enum preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4022.severity = none
# Please see CA1028 instead.

# S4023: Interfaces should not be empty
# CA1040 should control empty interface preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4023.severity = none
# Please see CA1040 instead.

# S4025: Child class fields should not differ from parent class fields only by capitalisation
# Child class members that differ only by capitalisation can be confusing.
# Please keep this rule's severity above suggestion to actively avoid confusingly named members.
dotnet_diagnostic.S4025.severity = warning
# S4026: Assemblies should be marked with "NeutralResourcesLanguageAttribute"
# CA1824 should control NeutralResourcesLanguageAttribute preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4026.severity = none
# Please see CA1824 instead.

# S4027: Exceptions should provide standard constructors
# CA1032 should control standard constructors for exceptions preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4027.severity = none
# Please see CA1032 instead.

# S4035: Classes implementing "IEquatable<T>" should be sealed
# Deriving a class that implements IEquatable<T> likely results in meaningless comparisons for the derived class. IEqualityComparer<T> is safer.
# Please keep this rule's severity above suggestion to actively avoid meaningless comparisons upon deriving classes that implement IEquatable<T> for maintainability.
dotnet_diagnostic.S4035.severity = warning
# S4036: Searching OS commands in PATH is security-sensitive
# Failing to specify the full path to an executable results in the application’s PATH environment variable to be searched too.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via searching OS commands in PATH.
dotnet_diagnostic.S4036.severity = warning
# S4039: Interface methods should be callable by derived types
# Uncallable interface methods limit their use.
# Please keep this rule's severity above suggestion to actively avoid uncallable interface methods for maintainability.
dotnet_diagnostic.S4039.severity = warning
# S4040: Strings should be normalised to uppercase
# CA1308 should control normalising strings to uppercase preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4040.severity = none
# Please see CA1308 instead.

# S4041: Type names should not match namespaces
# Type names that match namespaces can become highly confusing.
# Please keep this rule's severity above suggestion to actively avoid type names that match namespaces for maintainability.
dotnet_diagnostic.S4041.severity = warning
# S4047: Generics should be used when appropriate
# Generics are much simpler than a reference parameter of type object.
# Please keep this rule's severity above silent to actively encourage using generics instead of reference object parameters for maintainability.
dotnet_diagnostic.S4047.severity = suggestion
# S4049: Properties should be preferred
# CA1024 should control using properties where appropriate preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4049.severity = none
# Please see CA1024 instead.

# S4050: Operators should be overloaded consistently
# Overriding certain operators often implies other operators should be overridden as well.
# This rule covers unique cases that other rules do not. (ie. Overriding == when +, -, *, / or % are overridden.)
# Please keep this rule's severity above suggestion to actively encourage consistently overriding operators together for maintainability.
dotnet_diagnostic.S4050.severity = warning
# S4052: Types should not extend outdated base types
# CA1058 should control extending outdated base type preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4052.severity = none
# Please see CA1058 instead.

# S4055: Literals should not be passed as localised parameters
# CA1303 should control literals being passed as localised parameters preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4055.severity = none
# Please see CA1303 instead.

# S4056: Overloads with a "CultureInfo" or an "IFormatProvider" parameter should be used
# CA1304 should control CultureInfo preferences.
# CA1305 should control IFormatProvider preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4056.severity = none
# Please see CA1304 instead for CultureInfo preferences.
# Please see CA1305 instead for IFormatProvider preferences.

# S4057: Locales should be set for data types
# Data types will use the current culture by default.
# Please keep this rule's severity above suggestion to actively avoid relying on the current culture for maintainability.
dotnet_diagnostic.S4057.severity = warning
# S4058: Overloads with a "StringComparison" parameter should be used
# CA1307 should control specifying StringComparison for clarity preferences.
# CA1310 should control specifying StringComparison for correctness preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4058.severity = none
# Please see CA1307 instead for specifying StringComparison for clarity preferences.
# Please see CA1310 instead for specifying StringComparison for correctness preferences.

# S4059: Property names should not match get methods
# CA1721 should control property names that match get method preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4059.severity = none
# Please see CA1721 instead.

# S4060: Non-abstract attributes should be sealed
# CA1813 should control non-abstract attributes being sealed preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4060.severity = none
# Please see CA1813 instead.

# S4061: "params" should be used instead of "varargs"
# While functionally identical, params is CLS compliant whilst varargs is not.
# Please keep this rule's severity above suggestion to actively avoid redundantly making code CLS non-compliant.
dotnet_diagnostic.S4061.severity = warning
# S4069: Operator overloads should have named alternatives
# CA2225 should control operator overloads having named alternatives preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4069.severity = none
# Please see CA2225 instead.

# S4070: Non-flags enums should not be marked with "FlagsAttribute"
# CA2217 should control Non-flags enums being marked with [Flags] preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4070.severity = none
# Please see CA2217 instead.

# S4136: Method overloads should be grouped together
# Grouping method overloads together helps readability.
# Please keep this rule's severity above silent to actively encourage grouping method overloads together for maintainability.
dotnet_diagnostic.S4136.severity = suggestion
# S4143: Collection elements should not be replaced unconditionally
# Unconditionally overwriting collection elements that have already been written to is redundant and indicates unintended behaviour.
# Please keep this rule's severity above suggestion to actively avoid unconditionally replacing collection elements for reliability.
dotnet_diagnostic.S4143.severity = warning
# S4144: Methods should not have identical implementations
# Methods with identical implementations indicates either redundant or hard to maintain code.
# Please keep this rule's severity above suggestion to actively avoid methods with identical implementations for maintainability.
dotnet_diagnostic.S4144.severity = warning
# S4158: Empty collections should not be accessed or iterated
# Accessing/Iterating collections that are known to be empty is redundant and potentially indicates unintended behaviour.
# Please keep this rule's severity above suggestion to actively avoid accessing/iterating collections that are known to be empty.
dotnet_diagnostic.S4158.severity = warning
# S4159: Classes should implement their "ExportAttribute" interfaces
# Clases that don't implement their [Export] interfaces are misusing [Export].
# Please keep this rule's severity above suggestion to actively encourage properly using [Export] for reliability.
dotnet_diagnostic.S4159.severity = warning
# S4200: Native methods should be wrapped
# Calling native methods should be wrapped and non-public to minimise risk of going outside of the memory-safety model of the runtime.
# Please keep this rule's severity above suggestion to actively encourage safely calling native methods for maintainability.
dotnet_diagnostic.S4200.severity = warning
# S4201: Null checks should not be used with "is"
# Null checks with "is" are redundant.
# Please keep this rule's severity above suggestion to actively avoid redundant null checks for maintainability.
dotnet_diagnostic.S4201.severity = warning
# S4210: Windows Forms entry points should be marked with STAThread
# Using Windows Forms implies entry points should be marked with [STAThread] as Windows Forms only supports this threading model.
# Please keep this rule's severity above suggestion to actively encourage marking Windows Forms entry points with [STAThread] for reliability.
dotnet_diagnostic.S4210.severity = warning
# S4211: Members should not have conflicting transparency annotations
# Conflicting transparency annotations can lead to unintentionally higher privileges than intended.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via conflicting transparency annotations.
dotnet_diagnostic.S4211.severity = warning
# S4212: Serialisation constructors should be secured
# Serialisation constructors should be consistently secured the same as regular constructors.
# Please keep this rule's severity above suggestion to actively avoid misconfigured privileges via inconsistently secured constructors.
dotnet_diagnostic.S4212.severity = warning
# S4214: "P/Invoke" methods should not be visible
# CA1401 should control visible "P/Invoke" method preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4214.severity = none
# Please see CA1401 instead.

# S4220: Events should have proper arguments
# MA0091 should control instance event sender preferences.
# MA0092 should control static event sender preferences.
# MA0093 should control EventArgs.Empty over null for event-data preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4220.severity = none
# Please see MA0091 instead for instance event sender preferences.
# Please see MA0092 instead for static event sender preferences.
# Please see MA0093 instead for EventArgs.Empty over null for event-data preferences.

# S4225: Extension methods should not extend "object"
# Extending object is available to every type which is very likely unintentional.
# Please keep this rule's severity above suggestion to actively encourage properly implementing extension methods for maintainability.
dotnet_diagnostic.S4225.severity = warning
# S4226: Extensions should be in separate namespaces
# Extension methods are redundant when the method can be added to the class itself.
# Please keep this rule's severity above silent to actively avoid redundantly making methods extension methods for maintainability.
dotnet_diagnostic.S4226.severity = suggestion
# S4260: "ConstructorArgument" parameters should exist in constructors
# A ConstructorArgument that does not exist in constructors is redundant and indicates a typo.
# Please keep this rule's severity above suggestion to actively encourage properly using ConstructorArguments.
dotnet_diagnostic.S4260.severity = warning
# S4261: Methods should be named according to their synchronicities
# VSTHRD200 should control Async method suffix preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4261.severity = none
# Please see VSTHRD200 instead.

# S4275: Getters and setters should access the expected fields
# Getters/Setters should always access the expected fields based on name.
# Please keep this rule's severity above suggestion to actively encourage properly implementing properties.
dotnet_diagnostic.S4275.severity = warning
# S4277: "Shared" parts should not be created with "new"
# Creating instances of classes marked with [PartCreationPolicy(CreationPolicy.Shared)] indicates no other instances of the class should be created.
# Please keep this rule's severity above suggestion to actively encourage properly using [PartCreationPolicy(CreationPolicy.Shared)] for reliability.
dotnet_diagnostic.S4277.severity = warning
# S4347: Secure random number generators should not output predictable values
# By improperly seeding a cryptographically secure pseudo-random number generator (CSPRNG), a significant weakness is introduced that can be exploited by attackers.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via improperly seeding CSPRNGs.
dotnet_diagnostic.S4347.severity = warning
# S4423: Weak SSL/TLS protocols should not be used
# CA5364 should control weak SSL/TLS protocols preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4423.severity = none
# Please see CA5364 instead.

# S4426: Cryptographic keys should be robust
# Insecure cryptographic keys should be avoided.
# This rule covers unique cases that other rules do not. (ie. Key length of less than 224 bits for EC cipher algorithm.)
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via insecure cryptographic keys.
dotnet_diagnostic.S4426.severity = warning
# S4428: "PartCreationPolicyAttribute" should be used with "ExportAttribute"
# [PartCreationPolicy] is not meaningful without [Export] also being present.
# Please keep this rule's severity above suggestion to actively encourage properly using [PartCreationPolicy].
dotnet_diagnostic.S4428.severity = warning
# S4433: LDAP connections should be authenticated
# Unauthenticated LDAP connections will be able to read or modify all data contained in the hosted directory without needing to provide proper credentials.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via unauthenticated LDAP connections.
dotnet_diagnostic.S4433.severity = warning
# S4456: Parameter validation in yielding methods should be wrapped
# MA0050 should control parameter validation in yielding method preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4456.severity = none
# Please see MA0050 instead.

# S4457: Parameter validation in "async"/"await" methods should be wrapped
# Thrown exceptions during parameter checks will only happen when the task is observed, so parameter validation should be wrapped for async methods.
# Please keep this rule's severity above suggestion to actively encourage wrapping parameter validation in async methods for maintainability.
dotnet_diagnostic.S4457.severity = warning
# S4462: Calls to "async" methods should not be blocking
# VSTHRD103 & CA1849 should control using async overloads when available preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4462.severity = none
# Please see VSTHRD103 & CA1849 instead.

# S4487: Unread "private" fields should be removed
# IDE0051 should control unused member declaration preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4487.severity = none
# Please see IDE0051 instead.

# S4502: Disabling CSRF protections is security-sensitive
# CSRF protections should be left enabled.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via disabled CSRF protections.
dotnet_diagnostic.S4502.severity = warning
# S4507: Delivering code in production with debug features activated is security-sensitive
# Activated debug features in production can leak sensitive information.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via debug features activated in production.
dotnet_diagnostic.S4507.severity = warning
# S4524: "default" clauses should be first or last
# A default clause that is neither first nor last can be difficult to find and therefore hard to read.
# Please keep this rule's severity above suggestion to actively encourage consistently placing default clauses for maintainability.
dotnet_diagnostic.S4524.severity = warning
# S4545: "DebuggerDisplayAttribute" strings should reference existing members
# Naming a non-existent member in [DebuggerDisplay] will result in a CS0103 error in the debug window when debugging objects.
# Please keep this rule's severity above suggestion to actively encourage properly implementing [DebuggerDisplay].
dotnet_diagnostic.S4545.severity = warning
# S4581: "new Guid()" should not be used
# The default Guid constructor creates an instance with an empty value which is rarely what you want.
# Please keep this rule's severity above suggestion to actively encourage properly using Guids for maintainability.
dotnet_diagnostic.S4581.severity = warning
# S4583: Calls to delegate's method "BeginInvoke" should be paired with calls to "EndInvoke"
# Failure to call EndInvoke leads to resource leaks.
# Please keep this rule's severity above suggestion to actively avoid leaking resources via lack of EndInvoke calls.
dotnet_diagnostic.S4583.severity = warning
# S4586: Non-async "Task/Task<T>" methods should not return null
# VSTHRD114 should control returning null from non-async Task/Task<T> method preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S4586.severity = none
# Please see VSTHRD114 instead.

# S4635: Start index should be used instead of calling Substring
# Using a substring in place of a start index redundantly creates a new string object.
# Please keep this rule's severity above suggestion to actively avoid redundantly creating new string objects for performance & maintainability.
dotnet_diagnostic.S4635.severity = warning
# S4663: Comments should not be empty
# Empty comments harm readability and may be unintentional.
# Please keep this rule's severity above silent to actively avoid empty comments for maintainability.
dotnet_diagnostic.S4663.severity = warning
# S4790: Using weak hashing algorithms is security-sensitive
# Weak hashing algorithms are insecure as they can lead to security vulnerabilities.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via weak hashing algorithms.
dotnet_diagnostic.S4790.severity = warning
# S4792: Configuring loggers is security-sensitive
# This rule is deprecated due to having many false positives.
# Please keep this deprecated rule's severity disabled to avoid using deprecated rules.
dotnet_diagnostic.S4792.severity = none
# There is no replacement for this rule.

# S4830: Server certificates should be verified during SSL/TLS connections
# Unverified server certificates allows for security vulnerabilities.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via unverified server certificates during SSL/TLS connections.
dotnet_diagnostic.S4830.severity = warning
# S5034: "ValueTask" should be consumed correctly
# Consuming ValueTasks incorrectly can lead to race conditions.
# This rule covers unique cases that other rules do not. (ie. Awaiting a ValueTask parameter multiple times.)
# Please keep this rule's severity above suggestion to actively avoid consuming ValueTasks incorrectly for maintainability.
dotnet_diagnostic.S5034.severity = warning
# S5042: Expanding archive files without controlling resource consumption is security-sensitive
# Uncontrolled resource consumption upon expanding archive files can lead to security vulnerabilities.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via expanding archive files without controlling resource consumption.
dotnet_diagnostic.S5042.severity = warning
# S5122: Having a permissive Cross-Origin Resource Sharing policy is security-sensitive
# Permissive CORS policy allows HTTP requests to a resource with a different origin from its own.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via permissive CORS policies.
dotnet_diagnostic.S5122.severity = warning
# S5332: Using clear-text protocols is security-sensitive
# Clear-text protocols lack encryption of transported data & capacity to build authentic connections. Thus, they should be avoided.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via clear-text protocols.
dotnet_diagnostic.S5332.severity = warning
# S5344: Passwords should not be stored in plaintext or with a fast hashing algorithm
# The improper storage of passwords poses a significant risk to software applications.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via improper storage of passwords.
dotnet_diagnostic.S5344.severity = warning
# S5443: Using publicly writable directories is security-sensitive
# Publicly writable directories can be manipulated by malicious users.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via using publicly writable directories.
dotnet_diagnostic.S5443.severity = warning
# S5445: Insecure temporary file creation methods should not be used
# Insecure temporary file creation methods allow attackers to use the temporary file before the application gains control.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via insecure temporary file creation methods.
dotnet_diagnostic.S5445.severity = warning
# S5542: Encryption algorithms should be used with secure mode and padding scheme
# Insecure padding scheme/modes for encryption algorithms weakens the security of their use.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via insecure use of encryption algorithms.
dotnet_diagnostic.S5542.severity = warning
# S5547: Cipher algorithms should be robust
# Insecure cipher algorithms weakens the security of their use.
# This rule covers unique cases that other rules do not. (ie. `SymmetricAlgorithm.Create("TripleDES")`)
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via insecure use of cipher algorithms.
dotnet_diagnostic.S5547.severity = warning
# S5659: JWT should be signed and verified with strong cipher algorithms
# Improperly signed JWTs allows malicious actors to craft fraudulent tokens, effectively impersonating user identities.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via improperly signed JWTs.
dotnet_diagnostic.S5659.severity = warning
# S5693: Allowing requests with excessive content length is security-sensitive
# This rule can be customised with SonarLint.xml.
# Allowing requests with excessive content length can lead to denial of service attacks.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via allowing requests with excessive content length.
dotnet_diagnostic.S5693.severity = warning
# S5753: Disabling ASP.NET "Request Validation" feature is security-sensitive
# Disabling ASP.NET Request Validation allows for basic XSS attacks to succeed.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via disabled ASP.NET Request Validation.
dotnet_diagnostic.S5753.severity = warning
# S5766: Deserialising objects without performing data validation is security-sensitive
# Deserialisation reconstructs data without calling constructors, so data validation that exists exclusively in constructors can be bypassed.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via deserialisation without performing data validation.
dotnet_diagnostic.S5766.severity = warning
# S5773: Types allowed to be deserialised should be restricted
# Unrestricted type deserialisation allows attackers to craft malicious serialised objects.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via unrestricted type deserialisation.
dotnet_diagnostic.S5773.severity = warning
# S5856: Regular expressions should be syntactically valid
# Invalid regex will throw exceptions at runtime.
# Please keep this rule's severity above suggestion to actively avoid invalid regex for reliability.
dotnet_diagnostic.S5856.severity = warning
# S6354: Use a testable date/time provider
# Untestable date/time providers are problematic for unit testing.
# Please keep this rule's severity above suggestion to actively encourage using testable date/time providers for maintainability.
dotnet_diagnostic.S6354.severity = warning
# S6377: XML signatures should be validated securely
# If XML signatures are not validated securely, it can lead to potential vulnerabilities.
# Please keep this rule's severity above warning to actively avoid security vulnerabilities via insecure XML signature validation.
dotnet_diagnostic.S6377.severity = warning
# S6418: Hard-coded secrets are security-sensitive
# This rule can be customised with SonarLint.xml.
# Hard-coded secrets can easily be extracted.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via hard-coded secrets.
dotnet_diagnostic.S6418.severity = warning
# S6419: Azure Functions should be stateless
# Managing and storing data/state between requests can lead to inconsistencies.
# Please keep this rule's severity above suggestion to actively encourage stateless Azure Functions for maintainability.
dotnet_diagnostic.S6419.severity = warning
# S6420: Client instances should not be recreated on each Azure Function invocation
# Recreating client instances on each Azure Function invoke can lead to holding more connections than necessary or exhausting the number of available sockets.
# Please keep this rule's severity above suggestion to actively avoid recreating client instances on each Azure Function invoke for maintainability.
dotnet_diagnostic.S6420.severity = warning
# S6421: Azure Functions should use Structured Error Handling
# Structured Error Handling allows all errors to be captured and logged properly, to monitor the health of the application effectively.
# Please keep this rule's severity above suggestion to actively encourage Structured Error Handling for Azure Functions, for maintainability.
dotnet_diagnostic.S6421.severity = warning
# S6422: Calls to "async" methods should not be blocking in Azure Functions
# Making blocking calls to async methods transforms the code into synchronous operations, which leads to thread pool exhaustion when done within Azure Functions.
# Please keep this rule's severity above suggestion to actively avoid thread pool exhaustion for maintainability.
dotnet_diagnostic.S6422.severity = warning
# S6423: Azure Functions should log all failures
# Capturing and logging errors is critical to monitoring the health of the Azure Functions application.
# Please keep this rule's severity above suggestion to encourage capturing and logging all failures for maintainability.
dotnet_diagnostic.S6423.severity = warning
# S6424: Interfaces for durable entities should satisfy the restrictions
# Failure to satisfy the restrictions results in InvalidOperationExceptions being thrown at runtime when the interface is used as a type argument in certain conditions.
# Please keep this rule's severity above suggestion to actively avoid InvalidOperationExceptions via unsatisfied Azure durable entity interface restrictions.
dotnet_diagnostic.S6424.severity = warning
# S6444: Not specifying a timeout for regular expressions is security-sensitive
# MA0009 should control lack of timeout for regex preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S6444.severity = none
# Please see MA0009 instead.

# S6507: Blocks should not be synchronised on local variables
# Local variables are weak locks.
# Please keep this rule's severity above suggestion to actively avoid weak locks for reliability.
dotnet_diagnostic.S6507.severity = warning
# S6513: "ExcludeFromCodeCoverage" attributes should include a justification
# The justification property is .NET 5+ only.
# Please keep this rule's severity disabled to avoid using .NET 5+ features.
dotnet_diagnostic.S6513.severity = none
# S6513 is for .NET 5+ only.

# S6561: Avoid using "DateTime.Now" for benchmarking or timing operations
# DateTime.Now is subject to daylight savings transitions and is also dependent on the system clock.
# Please keep this rule's severity above suggestion to actively avoid DateTime.Now for benchmarking/timing operations for maintainability.
dotnet_diagnostic.S6561.severity = warning
# S6562: Always set the "DateTimeKind" when creating new "DateTime" instances
# DateTime instances are ambiguous when DateTimeKind is unset, which can lead to mismatched DateTime objects.
# Please keep this rule's severity above suggestion to actively encourage specifying DateTimeKind for maintainability.
dotnet_diagnostic.S6562.severity = warning
# S6563: Use UTC when recording DateTime instants
# DateTime.Now & DateTime.Today are locale-dependent.
# Please keep this rule's severity above suggestion to actively avoid depending on locales for DateTime instants, for maintainability.
dotnet_diagnostic.S6563.severity = warning
# S6566: Use "DateTimeOffset" instead of "DateTime"
# Unlike DateTimeOffset, DateTime lacks timezone awareness.
# Please keep this rule's severity above suggestion to actively avoid DateTime objects with a lack of timezone awareness.
dotnet_diagnostic.S6566.severity = warning
# S6575: Use "TimeZoneInfo.FindSystemTimeZoneById" without converting the timezones with "TimezoneConverter"
# As of .NET 6+, TimeZoneInfo.FindSystemTimeZoneById will automatically convert between IANA & Windows timezones.
# Please keep this rule's severity disabled to avoid using .NET 6+ features.
dotnet_diagnostic.S6575.severity = none
# S6575 is for .NET 6+ only.

# S6580: Use a format provider when parsing date and time
# Using a format provider avoids defaulting to the machine's CultureInfo.
# Please keep this rule's severity above suggestion to actively avoid depending on the machine's CultureInfo for maintainability.
dotnet_diagnostic.S6580.severity = warning
# S6585: Don't hardcode the format when turning dates and times to strings
# Hardcoding date & time formats can lead to formats that consumers misunderstand.
# Please keep this rule's severity above suggestion to actively avoid hardcoding formats for dates and times for maintainability.
dotnet_diagnostic.S6585.severity = warning
# S6588: Use the "UnixEpoch" field instead of creating "DateTime" instances that point to the beginning of the Unix epoch
# Using UnixEpoch clearly states that the intention is to use the beginning of the Unix epoch.
# Please keep this rule's severity above silent to actively encourage using UnixEpoch for maintainability.
dotnet_diagnostic.S6588.severity = suggestion
# S6602: "Find" method should be used instead of the "FirstOrDefault" extension
# MA0020 & RCS1077 should control Find over FirstOrDefault preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S6602.severity = none
# Please see MA0020 & RCS1077 instead.

# S6603: The collection-specific "TrueForAll" method should be used instead of the "All" extension
# MA0020 should control TrueForAll over All preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S6603.severity = none
# Please see MA0020 instead.

# S6605: Collection-specific "Exists" method should be used instead of the "Any" extension
# MA0020 should control Exists over Any preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S6605.severity = none
# Please see MA0020 instead.

# S6607: The collection should be filtered before sorting by using "Where" before "OrderBy"
# RCS1077 should control Where before OrderBy preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S6607.severity = none
# Please see RCS1077 instead.

# S6608: Prefer indexing instead of "Enumerable" methods on types implementing "IList"
# Indexing is more efficient than Enumerable methods on types that implement IList.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.S6608.severity = warning
# S6609: "Min/Max" properties of "Set" types should be used instead of the "Enumerable" extension methods
# The Min/Max properties of Set types are more efficient than Enumerable extension methods.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.S6609.severity = warning
# S6610: "StartsWith" and "EndsWith" overloads that take a "char" should be used instead of the ones that take a "string"
# String overloads for StartsWith/EndsWith must respect StringComparison & CultureInfo, unlike char overloads.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.S6610.severity = warning
# S6612: The lambda parameter should be used instead of capturing arguments in "ConcurrentDictionary" methods
# MA0105 should control using lambda parameters instead of captured argument in ConcurrentDictionary method preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S6612.severity = none
# Please see MA0105 instead.

# S6613: "First" and "Last" properties of "LinkedList" should be used instead of the "First()" and "Last()" extension methods
# First/Last properties of LinkedList are more performant than First/Last extension methods.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.S6613.severity = warning
# S6617: "Contains" should be used instead of "Any" for simple equality checks
# MA0020 should control Contains over Any preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S6617.severity = none
# Please see MA0020 instead.

# S6618: "string.Create" should be used instead of "FormattableString"
# As of .NET 6+, string.Create is more performant than FormattableString.
# Please keep this rule's severity disabled to avoid using .NET 6+ features.
dotnet_diagnostic.S6618.severity = none
# S6618 is for .NET 6+ only.

# S6640: Using unsafe code blocks is security-sensitive
# Unsafe code blocks can lead to unintended security or stability risks.
# Please keep this rule's severity above suggestion to actively avoid unintended security risks via unsafe code blocks.
dotnet_diagnostic.S6640.severity = warning
# S6664: The code block contains too many logging calls
# This rule can be customised with SonarLint.xml.
# Logging should be concise to ease the process of reading logs and debugging.
# Please keep this rule's severity above suggestion to actively avoid code blocks with excessively many logging calls.
dotnet_diagnostic.S6664.severity = warning
# S6667: Logging in a catch clause should pass the caught exception as a parameter.
# Failure to log caught exceptions makes debugging more difficult.
# Please keep this rule's severity above suggestion to actively avoid harming debuggability.
dotnet_diagnostic.S6667.severity = warning
# S6668: Logging arguments should be passed to the correct parameter
# Logging arguments to the incorrect parameter can make debugging more difficult.
# Please keep this rule's severity above suggestion to actively avoid harming debuggability.
dotnet_diagnostic.S6668.severity = warning
# S6669: Logger field or property name should comply with a naming convention
# Consistently named logger field/properties are easier to read.
# Please keep this rule's severity above suggestion to actively encourage consistently naming logger field/properties for maintainability.
dotnet_diagnostic.S6669.severity = warning
# S6670: "Trace.Write" and "Trace.WriteLine" should not be used
# Trace.TraceError, Trace.TraceWarning & Trace.TraceInformation output more information than Trace.Write or Trace.WriteLine.
# Please keep this rule's severity above suggestion to actively encourage using preferred Trace methods for reliability.
dotnet_diagnostic.S6670.severity = warning
# S6672: Generic logger injection should match enclosing type
# Mismatching generic logger injection & enclosing type can be confusing and lead to misconfiguration.
# Please keep this rule's severity above suggestion to actively encourage matching generic logger injection & enclosing type for maintainability.
dotnet_diagnostic.S6672.severity = warning
# S6673: Log message template placeholders should be in the right order
# Mismatching log message template placeholder orders corrupts log entries, making log analytics unreliable.
# Please keep this rule's severity above suggestion to actively avoid harming debuggability.
dotnet_diagnostic.S6673.severity = warning
# S6674: Log message template should be syntactically correct
# Syntactically incorrect log message templates can make debugging more difficult.
# Please keep this rule's severity above suggestion to actively avoid harming debuggability.
dotnet_diagnostic.S6674.severity = warning
# S6675: "Trace.WriteLineIf" should not be used with "TraceSwitch" levels
# Doing so can lead to misinterpretation & produce confusion.
# Please keep this rule's severity above suggestion to actively avoid Trace.WriteLineIf with TraceSwitch levels for maintainability.
dotnet_diagnostic.S6675.severity = warning
# S6677: Message template placeholders should be unique
# Unintentional behaviour can occur when message template placeholders are not unique.
# Please keep this rule's severity above suggestion to actively avoid harming debuggability.
dotnet_diagnostic.S6677.severity = warning
# S6678: Use PascalCase for named placeholders
# CA1727 should control named placeholder casing style preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S6678.severity = none
# Please see CA1727 instead.

# S6781: JWT secret keys should not be disclosed
# Secret leaks often occur when a sensitive pieces of authentication data is stored with the source code of an application.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via disclosed JWT secret keys.
dotnet_diagnostic.S6781.severity = warning
# S6797: Blazor query parameter type should be supported
# Unsupported Blazor querty parameter types results in unhandled exceptions at runtime.
# Please keep this rule's severity above suggestion to actively avoid unhandled exceptions at runtime via unsupported Blazor query parameter types.
dotnet_diagnostic.S6797.severity = warning
# S6798: [JSInvokable] attribute should only be used on public methods
# MA0118 should control JSInvokable on non-public method preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S6798.severity = none
# Please see MA0118 instead.

# S6800: Component parameter type should match the route parameter type constraint
# In Blazor, Mismatching component parameter types can lead to confusion & potential runtime errors due to unsuccessful casting.
# Please keep this rule's severity above suggestion to actively encourage matching component parameter type & route parameter type constraint for reliability.
dotnet_diagnostic.S6800.severity = warning
# S6802: Using lambda expressions in loops should be avoided in Blazor markup section
# In Blazor, using lambda expressions in loops can lead to negative user experiences and performance issues.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.S6802.severity = warning
# S6803: Parameters with SupplyParameterFromQuery attribute should be used only in routable components
# Component parameters can only receive query parameter values in routable components with an @page directive. Non-routable components are unaffected.
# Please keep this rule's severity above suggestion to actively avoid [SupplyParameterFromQuery] on non-routable components for reliability.
dotnet_diagnostic.S6803.severity = warning
# S6930: Backslash should be avoided in route templates
# Most URL processors still don’t support backslash properly.
# Please keep this rule's severity above suggestion to avoid backslashes in route templates for reliability.
dotnet_diagnostic.S6930.severity = warning
# S6931: ASP.NET controller actions should not have a route template starting with "/"
# In ASP.NET Core MVC, starting an ASP.NET controller action route template with "/" causes controller-level route to be disregarded.
# In ASP.NET Framework MVC, an InvalidOperationException will be produced.
# Please keep this rule's severity above suggestion to actively avoid starting ASP.NET controller action route template with "/" for maintainability.
dotnet_diagnostic.S6931.severity = warning
# S6932: Use model binding instead of reading raw request data
# Model binding helps protect against over-posting attacks by only including properties in the model that you explicitly bind using the BindAttribute or by using view models that only contain the properties you want to update, alongside simplicity, type safety, validation, and maintainability benefits.
# Please keep this rule's severity above suggestion to actively avoid security vulnerabilities via reading raw request data.
dotnet_diagnostic.S6932.severity = warning
# S6934: A Route attribute should be added to the controller when a route template is specified at the action level
# Adding [Route] excludes the controller from conventional routing, to avoid mixing conventional & attribute-based routing within a singular controller, which can be confusing.
# Please keep this rule's severity above suggestion to actively avoid mixing conventional & attribute-based routing for maintainability.
dotnet_diagnostic.S6934.severity = warning
# S6960: Controllers should not have mixed responsibilities
# Controllers with mixed responsibilities are harder to read and understand.
# Please keep this rule's severity above suggestion to actively avoid controllers with mixed responsibilities for maintainability.
dotnet_diagnostic.S6960.severity = warning
# S6961: API Controllers should derive from ControllerBase instead of Controller
# Inheriting from Controller when not using any View-specific functionality exposes unnecessary methods and can lead to confusion about the intention of the class.
# Please keep this rule's severity above suggestion to actively encourage deriving from ControllerBase for maintainability.
dotnet_diagnostic.S6961.severity = warning
# S6962: You should pool HTTP connections with HttpClientFactory
# Pooling HTTP connections with HttpClientFactory avoids wasting resources & creating performance overhead.
# Please keep this rule's severity above suggestion to actively encourage pooling HTTP connections with HttpClientFactory for reliability.
dotnet_diagnostic.S6962.severity = warning
# S6964: Property used as input in a controller action should be nullable or annotated with the Required attribute to avoid under-posting.
# [Required] or nullables on properties used as input in a controller action avoids under-posting, which can lead to inaccurate or inconsistent data.
# Please keep this rule's severity above suggestion to actively avoid under-posting for reliability.
dotnet_diagnostic.S6964.severity = warning
# S6965: REST API actions should be annotated with an HTTP verb attribute
# Annotating REST API actions with a HTTP verb attribute precisely describes what the API supports, which avoids unexpected behaviour.
# Please keep this rule's severity above suggestion to actively encourage annotating REST API actions with a HTTP verb attribute for maintainability.
dotnet_diagnostic.S6965.severity = warning
# S6966: Awaitable method should be used
# VSTHRD103 & CA1849 should control using async overloads when available preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S6966.severity = none
# Please see VSTHRD103 & CA1849 instead.

# S6967: ModelState.IsValid should be called in controller actions
# Not checking for valid data leads to processing invalid data, which can lead to unexpected behaviour.
# Please keep this rule's severity above suggestion to actively encourage checking for valid data to avoid processing invalid data.
dotnet_diagnostic.S6967.severity = warning
# S6968: Actions that return a value should be annotated with ProducesResponseTypeAttribute containing the return type
# Return value types cannot always be inferred, so annotating actions with [ProducesResponseType] is recommended.
# Please keep this rule's severity above suggestion to actively encourage annotating actions with [ProducesResponseType] for maintainability.
dotnet_diagnostic.S6968.severity = warning
# S7039: Content Security Policies should be restrictive
# An insecure CSP can increase the potential severity of other vulnerabilities in the system.
# Pleade keep this rule's severity above suggestion to actively avoid security vulnerabilities via insecure CSPs.
dotnet_diagnostic.S7039.severity = warning
# S818: Literal suffixes should be upper case
# CS0078 should control literal suffix case preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S818.severity = none
# Please see CS0078 instead.

# S881: Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression
# Mixing increment/decrement operators with other operations is highly confusing.
# Please keep this rule's severity above suggestion to actively avoid mixing increment/decrement operators with other operations for maintainability.
dotnet_diagnostic.S881.severity = warning
# S907: "goto" statement should not be used
# Goto statements are highly confusing. Structured control flow statements are preferred.
# Please keep this rule's severity above suggestion to actively avoid goto statements for maintainability.
dotnet_diagnostic.S907.severity = warning
# S927: Parameter names should match base declaration and other partial definitions
# CA1725 should control matching parameter names between base declarations & partial definition preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.S927.severity = none
# Please see CA1725 instead.

# Roslynator is made up of 3 NuGet packages:
# Roslynator.Analyzers, Roslynator.CodeAnalysis.Analyzers & Roslynator.Formatting.Analyzers.
# Roslynator.CodeAnalysis.Analyzers should only be used while developing Roslyn Analysers.
# https://github.com/dotnet/roslynator

# Roslynator.Formatting.Analyzers implements RCS0 rules.
# https://www.nuget.org/packages/Roslynator.Formatting.Analyzers
# https://josefpihrt.github.io/docs/roslynator/analyzers

# RCS0001: Add blank line after embedded statement
# RCS0002: Add blank line after #region
# RCS0003: Add blank line after using directive list
# RCS0005: Add blank line before #endregion
# RCS0006: Add blank line before using directive list
# RCS0007: Add blank line between accessors
# RCS0008: Add blank line between closing brace and next statement
# RCS0009: Add blank line between declaration and documentation comment
# RCS0010: Add blank line between declarations
# Blank lines are unnecessary for readability.
# Please keep these rules' severities disabled to avoid less readable code.
dotnet_diagnostic.RCS0001.severity = none
dotnet_diagnostic.RCS0002.severity = none
dotnet_diagnostic.RCS0003.severity = none
dotnet_diagnostic.RCS0005.severity = none
dotnet_diagnostic.RCS0006.severity = none
dotnet_diagnostic.RCS0007.severity = none
dotnet_diagnostic.RCS0008.severity = none
dotnet_diagnostic.RCS0009.severity = none
dotnet_diagnostic.RCS0010.severity = none
# RCS0011: Add/remove blank line between single-line accessors
# Blank lines are unnecessary.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0011.severity = suggestion
# Add/remove blank line between single-line accessors
roslynator_blank_line_between_single_line_accessors = false
# RCS0012: Add blank line between single-line declarations
# RCS0013: Add blank line between single-line declarations of different kind
# Blank lines are unnecessary.
# Please keep these rules' severities disabled to avoid blank lines.
dotnet_diagnostic.RCS0012.severity = none
dotnet_diagnostic.RCS0013.severity = none
# RCS0014: Add blank line between switch sections
# This rule is deprecated.
# Please keep this rule's severity disabled to avoid using deprecated rules.
dotnet_diagnostic.RCS0014.severity = none
# Please see RCS0061 instead.

# RCS0015: Add/remove blank line between using directives
# Blank lines are unnecessary.
# Please keep this rule's severity above silent to actively avoid blank lines between using directives.
dotnet_diagnostic.RCS0015.severity = suggestion
# Add/remove blank line between using directives
roslynator_blank_line_between_using_directives = never
# RCS0016: Put attribute list on its own line
# Attributes should be on their own line for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0016.severity = suggestion
# RCS0020: Format accessor's braces on a single line or multiple lines
# IDE0055 should control brace formatting preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS0020.severity = none
# Format accessor's braces on multiple lines
roslynator_accessor_braces_style = multi_line
# Please see IDE0055 instead.

# RCS0021: Format block's braces on a single line or multiple lines
# IDE0055 should control formatting preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS0021.severity = none
# Please see IDE0055 instead.

# Format block's braces on multiple lines
roslynator_block_braces_style = multi_line
# RCS0022: Add new line after opening brace of empty block
# This rule is deprecated.
# Please keep this rule's severity disabled to avoid using deprecated rules.
dotnet_diagnostic.RCS0022.severity = none
# Please see IDE0055 instead.

# RCS0023: Format type declaration's braces
# Type declaration braces should be placed on their own lines.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0023.severity = suggestion
# RCS0024: Add new line after switch label
# A new line should be placed after switch labels for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0024.severity = suggestion
# RCS0025: Put full accessor on its own line
# Property accessors should be placed on their own line for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0025.severity = suggestion
# RCS0027: Place new line after/before binary operator
# New lines before operators are more readable.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0027.severity = suggestion
# Place new line before binary operator
roslynator_binary_operator_new_line = before
# RCS0028: Place new line after/before '?:' operator
# New lines before operators are more readable.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0028.severity = suggestion
# Place new line before '?:' operator
roslynator_conditional_operator_new_line = before
# RCS0029: Put constructor initialiser on its own line
# Placing constructor initialisers on their own line is more readable.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0029.severity = suggestion
# RCS0030: Put embedded statement on its own line
# IDE2001 should control embedded statement placement preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS0030.severity = none
# Please see IDE2001 instead.

# RCS0031: Put enum member on its own line
# Placing enum members on their own line is more readable.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0031.severity = suggestion
# RCS0032: Place new line after/before arrow token
# Placing arrow tokens on their own line is more readable.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0032.severity = suggestion
# Place new line before arrow token
roslynator_arrow_token_new_line = before
# RCS0033: Put statement on its own line
# IDE0055 should control putting statements on separate line preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS0033.severity = none
# Please see IDE0055 instead.

# RCS0034: Put type parameter constraint on its own line
# Placing type parameter constraints on their own line is more readable.
# Please keep this ruke's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0034.severity = suggestion
# RCS0036: Remove blank line between single-line declarations of same kind
# Whitespace should be minimised for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0036.severity = suggestion
# RCS0038: Remove blank line between using directives with same root namespace
# This rule is deprecated.
# Please keep this rule's severity disabled to avoid using deprecated rules.
dotnet_diagnostic.RCS0038.severity = none
# Please see RCS0015 instead.

# RCS0039: Remove new line before base list
# Placing base list on it's own line is unnecessary for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0039.severity = suggestion
# RCS0041: Remove new line between 'if' keyword and 'else' keyword
# Placing a new line between if and else is unnecessary for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0041.severity = suggestion
# RCS0042: Put auto-accessors on a single line
# IDE0055 should control single-lined auto-accessor preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS0042.severity = none
# Please see IDE0055 instead.

# RCS0043: Format accessor's braces on a single line when expression is on single line
# This rule is obsolete.
# Please keep this rule's severity disabled to avoid using obsoleted rules.
dotnet_diagnostic.RCS0043.severity = none
# Please see IDE0055 instead.

# RCS0044: Use carriage return + linefeed as new line
# RCS0045: Use linefeed as new line
# Newline preferences are to be configured via end_of_line, not analysers.
# Please keep these rules' severities disabled to avoid improperly configuring end_of_line.
dotnet_diagnostic.RCS0044.severity = none
dotnet_diagnostic.RCS0045.severity = none
# Please see end_of_line instead.

# RCS0046: Use spaces instead of tab
# Indent style preferences are to be configured via .editorconfig, not analysers.
# Please keep this rule's severity disabled to avoid improperly configuring indent style.
dotnet_diagnostic.RCS0046.severity = none
# Please see indent_style instead.

# RCS0047: Wrap and indent each node in lists
# This rule is obsolete.
# Please keep this rule's severity disabled to avoid using obsoleted rules.
dotnet_diagnostic.RCS0047.severity = none
# Please see RCS0053 instead.

# RCS0048: Put initialiser on a single line
# Placing initialisers on a single line can harm readability.
# Please keep this rule's severity disabled to avoid harming readability.
dotnet_diagnostic.RCS0048.severity = none
# RCS0049: Add blank line after top comment
# RCS0050: Add blank line before top declaration
# Blank lines are unnecessary for readability.
# Please keep these rules' severities disabled to avoid less readable code.
dotnet_diagnostic.RCS0049.severity = none
dotnet_diagnostic.RCS0050.severity = none
# RCS0051: Add/remove new line before 'while' in 'do' statement
# Placing the while in do statement on it's own line is more readable.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0051.severity = suggestion
# Include new line before 'while' in 'do' statement
roslynator_new_line_before_while_in_do_statement = true
# RCS0052: Place new line after/before equals token
# New lines before equals tokens are more readable.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0052.severity = suggestion
# Place new line before equals sign
roslynator_equals_token_new_line = before
# RCS0053: Fix formatting of a list
# Argument/Parameter & similar lists should be given consistent identation & new lines for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0053.severity = suggestion
# RCS0054: Fix formatting of a call chain
# Call chains should be given consistent identation & new lines for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0054.severity = suggestion
# RCS0055: Fix formatting of a binary expression chain
# Binary expression chains should be given consistent indentation & new lines for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0055.severity = suggestion
# RCS0056: A line is too long
# Excessively long lines should be simplified for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0056.severity = suggestion
# Maximum line length
roslynator_max_line_length = 140
# A number of spaces that are equivalent to a tab character
roslynator_tab_length = 4
# RCS0057: Normalise whitespace at the beginning of a file
# Whitespace should be minimised for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0057.severity = suggestion
# RCS0058: Normalise whitespace at the end of a file
# Final newline preferences are to be configured via insert_final_newline.
# However, an analyser rule for insert_final_newline allows for violations to appear in the error list, unlike insert_final_newline.
# Please keep this rule's severity above suggestion to actively encourage properly formatting end of file data.
dotnet_diagnostic.RCS0058.severity = warning
# Include new line at the end of a file
roslynator_new_line_at_end_of_file = true
# Please keep insert_final_newline in sync as well.

# RCS0059: Place new line after/before null-conditional operator
# Placing null-conditional operators on their own line is more readable.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0059.severity = suggestion
# Place new line before null-conditional operator
roslynator_null_conditional_operator_new_line = before
# RCS0060: Add/remove line after file scoped namespace declaration
# Whitespace should be minimised for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0060.severity = suggestion
# Remove blank line after file scoped namespace declaration
roslynator_blank_line_after_file_scoped_namespace_declaration = false
# RCS0061: Add/remove blank line between switch sections
# Whitespace should be minimised for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0061.severity = suggestion
# RCS0061: Add/remove blank line between switch sections
# Whitespace should be minimised for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS0061.severity = suggestion
# Omit blank line between switch sections
roslynator_blank_line_between_switch_sections = omit

# Roslynator.Analyzers implements RCS1 rules.
# https://www.nuget.org/packages/Roslynator.Analyzers
# https://josefpihrt.github.io/docs/roslynator/analyzers

# RCS1001: Add braces (when expression spans over multiple lines)
# Braces should be added to multi-line expressions for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1001.severity = suggestion
# RCS1002: Remove braces
# Braces should always be applied to expressions for readability.
# Please keep this rule's severity disabled to avoid harming readability.
dotnet_diagnostic.RCS1002.severity = none
# RCS1003: Add braces to if-else (when expression spans over multiple lines)
# Braces should be added to multi-line expressions for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1003.severity = suggestion
# RCS1004: Remove braces from if-else
# IDE0011 should control brace preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1004.severity = none
# Please see IDE0011 instead.

# RCS1005: Simplify nested using statement
# Simplified using statements are less readable than regular using statements.
# Please keep this rule's severity disabled to avoid harming readability.
dotnet_diagnostic.RCS1005.severity = none
# RCS1006: Merge 'else' with nested 'if'
# Elifs are to be preferred over if statements within else statements.
# Please keep this rule'e severity above silent to actively encourage simplifying code.
dotnet_diagnostic.RCS1006.severity = suggestion
# RCS1007: Add braces
# IDE0011 should control brace preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1007.severity = none
# Please see IDE0011 instead.

# RCS1008: Use explicit type instead of 'var' (when the type is not obvious)
# RCS1009: Use explicit type instead of 'var' (foreach variable)
# RCS1010: Use 'var' instead of explicit type (when the type is obvious)
# RCS1012: Use explicit type instead of 'var' (when the type is obvious)
# These rules are obsolete.
# Please keep these rules' severities disabled to avoid using obsoleted rules.
dotnet_diagnostic.RCS1008.severity = none
dotnet_diagnostic.RCS1009.severity = none
dotnet_diagnostic.RCS1010.severity = none
dotnet_diagnostic.RCS1012.severity = none
# Please see RCS1264 instead.

# RCS1013: Use predefined type
# IDE0049 should control predefined type preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1013.severity = none
# Please see IDE0049 instead.

# RCS1014: Use explicitly/implicitly typed array
# Implicitly types arrays should be used when the type is obvious for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1014.severity = suggestion
# Prefer implicitly typed array when the type is obvious
roslynator_array_creation_type_style = implicit_when_type_is_obvious
# Use collection expression for array/collection creation
roslynator_use_collection_expression = true
# RCS1015: Use nameof operator
# CA1507 should control nameof preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1015.severity = none
# Please see CA1507 instead.

# RCS1016: Use block body or expression body
# Code style language & unnecessary code rules' expression-bodied member rules should control block or expression body preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1016.severity = none
# Prefer block body or expression body
roslynator_body_style = block
# Use block body when declaration spans over multiple lines
roslynator_use_block_body_when_declaration_spans_over_multiple_lines = true
# Use block body when expression spans over multiple lines
roslynator_use_block_body_when_expression_spans_over_multiple_lines = true
# Please see code style language & unnecessary code rules' expression-bodied member rules instead. (ie. IDE0021)

# RCS1018: Add/remove accessibility modifiers
# IDE0040 should control accessibility modifier consistency preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1018.severity = none
# Prefer explicit accessibility modifiers
roslynator_accessibility_modifiers = explicit
# Please see IDE0040 instead.

# RCS1019: Order modifiers
# IDE0036 should control modifier order preferences.
# IDE0036 allows for customising the order of modifiers, unlike RCS1019.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1019.severity = none
# Please see IDE0036 instead.

# RCS1020: Simplify Nullable<T> to T?
# IDE0001 should control simplifying Nullable<T> to T? preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1020.severity = none
# Please see IDE0001 instead.

# RCS1021: Convert lambda expression body to expression body
# Expression bodies are more readable than lambda expression bodies.
# Please keep this rule's severity disabled to avoid harming readability.
dotnet_diagnostic.RCS1021.severity = none
# RCS1031: Remove unnecessary braces in switch section
# Braces for cases within a switch statement are unnecessary for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1031.severity = suggestion
# RCS1032: Remove redundant parentheses
# IDE0047 should control redundant parentheses preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1032.severity = none
# Please see IDE0047 instead.

# RCS1033: Remove redundant boolean literal
# IDE0100 should control redundant boolean literal preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1033.severity = none
# Please see IDE0100 instead.

# RCS1034: Remove redundant 'sealed' modifier
# S2333 should control unnecessary modifier preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1034.severity = none
# Please see S2333 instead.

# RCS1035: Remove redundant comma in initialiser
# This rule is obsolete.
# Please keep this rule's severity disabled to avoid using obsoleted rules.
dotnet_diagnostic.RCS1035.severity = none
# Please see RCS1260 instead.

# RCS1036: Remove unnecessary blank line
# Code style language & unnecessary code rules' new-line preference rules should control unnecessary blank line preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1036.severity = none
# Remove blank line between closing brace and switch section
roslynator_blank_line_between_closing_brace_and_switch_section = false
# Please see code style language & unnecessary code rules' new-line preference rules instead. (ie. IDE2000)

# RCS1037: Remove trailing white-space
# Whitespace should be minimised for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1037.severity = suggestion
# RCS1038: Remove empty statement
# This rule is obsolete.
# Please keep this rule's severity disabled to avoid using obsoleted rules.
dotnet_diagnostic.RCS1038.severity = none
# Please see RCS1259 instead.

# RCS1039: Remove argument list from attribute
# Redundant argument lists can be removed from attributes to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1039.severity = suggestion
# RCS1040: Remove empty 'else' clause
# RCS1041: Remove empty initialiser
# These rules are obsolete.
# Please keep these rules' severities disabled to avoid using obsoleted rules.
dotnet_diagnostic.RCS1040.severity = none
dotnet_diagnostic.RCS1041.severity = none
# Please see RCS1259 instead.

# RCS1042: Remove enum default underlying type
# S1939 should control redundant inheritance preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1042.severity = none
# Please see S1939 instead.

# RCS1043: Remove 'partial' modifier from type with a single part
# S2333 should control unnecessary modifier preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1043.severity = none
# Please see S2333 instead.

# RCS1044: Remove original exception from throw statement
# CA2200 should control original exception in throw statement preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1044.severity = none
# Please see CA2200 instead.

# RCS1046: Asynchronous method name should end with 'Async'
# VSTHRD200 should control async method naming preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1046.severity = none
# Please see VSTHRD200 instead.

# RCS1047: Non-asynchronous method name should not end with 'Async'
# VSTHRD200 should control async method naming preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1047.severity = none
# Please see VSTHRD200 instead.

# RCS1048: Use lambda expression instead of anonymous method
# Unsubscribing from Events via anonymous delegates doesn't actually remove the handler.
# Please keep this rule's severity above suggestion to actively avoid improperly unsubscribing from events.
dotnet_diagnostic.RCS1048.severity = warning
# RCS1049: Simplify boolean comparison
# Boolean comparisons can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1049.severity = suggestion
# RCS1050: Include/omit parentheses when creating new object
# Omitting parentheses when creating new objects simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1050.severity = suggestion
# Omit parentheses when creating new object
roslynator_object_creation_parentheses_style = omit
# RCS1051: Add/remove parentheses from condition in conditional operator
# dotnet_style_parentheses_in_other_operators & IDE0047/IDE0048 should control parentheses in conditional operator preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1051.severity = none
# Add parentheses to/from condition in conditional operator
roslynator_conditional_operator_condition_parentheses_style = include
# Please see dotnet_style_parentheses_in_other_operators & IDE0047/IDE0048 instead.

# RCS1052: Declare each attribute separately
# Each attribute should be declared separately for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1052.severity = suggestion
# RCS1055: Unnecessary semicolon at the end of declaration
# Unnecessary semicolons at the end of declarations can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1055.severity = suggestion
# RCS1056: Avoid usage of using alias directive
# Usage of using alias directive can help make code more readable.
# Please keep this rule's severity disabled to avoid harming readability.
dotnet_diagnostic.RCS1056.severity = none
# RCS1058: Use compound assignment
# IDE0054 should control compound assignment preferences.
# IDE0074 should control coalesce compound assignment preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1058.severity = none
# Please see IDE0054 instead for compound assignments.
# Please see IDE0074 instead for coalesce compound assignments.

# RCS1059: Avoid locking on publicly accessible instance
# CA2002 should control weak lock preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1059.severity = none
# Please see CA2002 instead.

# RCS1060: Declare each type in separate file
# Each type should be declared in separate files for organisation.
# Please keep this rule's severity above suggestion to actively encourage properly organising types.
dotnet_diagnostic.RCS1060.severity = warning
# RCS1061: Merge 'if' with nested 'if'
# Merging nested ifs simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1061.severity = suggestion
# RCS1063: Avoid usage of do statement to create an infinite loop
# RCS1064: Avoid usage of for statement to create an infinite loop
# RCS1065: Avoid usage of while statement to create an infinite loop
# These rules are obsolete.
# Please keep these rules' severities disabled to avoid using obsoleted rules.
dotnet_diagnostic.RCS1063.severity = none
dotnet_diagnostic.RCS1064.severity = none
dotnet_diagnostic.RCS1065.severity = none
# Please see RCS1252 instead.

# RCS1066: Remove empty 'finally' clause
# This rule is obsolete.
# Please keep this rule's severity disabled to avoid using obsoleted rules.
dotnet_diagnostic.RCS1066.severity = none
# Please see RCS1259 instead.

# RCS1068: Simplify logical negation
# Logical negations can be simplified for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1068.severity = suggestion
# RCS1069: Remove unnecessary case label
# IDE0010 should control unnecessary case label preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1069.severity = none
# Please see IDE0010 instead.

# RCS1070: Remove redundant default switch section
# IDE0010 should control redundant default switch section preferences.
# Please keep this rule's severity disabled to avoid missing cases from switch statements.
dotnet_diagnostic.RCS1070.severity = none
# Please see IDE0010 instead.

# RCS1071: Remove redundant base constructor call
# S3253 should control redundant base constructor call preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1071.severity = none
# Please see S3253 instead.

# RCS1072: Remove empty namespace declaration
# This rule is obsolete.
# Please keep this rule's severity disabled to avoid using obsoleted rules.
dotnet_diagnostic.RCS1072.severity = none
# Please see RCS1259 instead.

# RCS1073: Convert 'if' to 'return' statement
# Converting if statements to return statements simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1073.severity = suggestion
# RCS1074: Remove redundant constructor
# S3253 should control redundant ctor preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1074.severity = none
# Please see S3253 instead.

# RCS1075: Avoid empty catch clause that catches System.Exception
# CA1031 should control catching generic exception type preferences.
# S108 should control empty block of code preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1075.severity = none
# Please see CA1031 instead for catching generic exception type preferences.
# Please see S108 instead for empty block of code preferences.

# RCS1077: Optimise LINQ method call
# Certain LINQ methods can be optimised for performance.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.RCS1077.severity = warning
# RCS1078: Use "" or 'string.Empty'
# string.Empty explicitly states intent better than "".
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1078.severity = suggestion
# Prefer 'string.Empty'
roslynator_empty_string_style = field
# RCS1079: Throwing of new NotImplementedException
# MA0025 should control NotImplementedException preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1079.severity = none
# Please see MA0025 instead.

# RCS1080: Use 'Count/Length' property instead of 'Any' method
# Count/Length is more performant than Any.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.RCS1080.severity = warning
# RCS1081: Split variable declaration
# Variable declarations should be split for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1081.severity = suggestion
# RCS1084: Use coalesce expression instead of conditional expression
# IDE0029 should control null coalescing preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1084.severity = none
# Please see IDE0029 instead.

# RCS1085: Use auto-implemented property
# Auto-implemented properties are less readable than manually implemented properties.
# Please keep this rule's severity disabled to avoid harming readability.
dotnet_diagnostic.RCS1085.severity = none
# RCS1089: Use --/++ operator instead of assignment
# --/++ operators can be used instead of assignemnt to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1089.severity = suggestion
# RCS1090: Add/remove 'ConfigureAwait(false)' call
# VSTHRD111 should control ConfigureAwait preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1090.severity = none
# Remove 'ConfigureAwait(false)' call
roslynator_configure_await = false
# Please see VSTHRD111 instead.

# RCS1091: Remove empty region
# This rule is obsolete.
# Please keep this rule's severity disabled to avoid using obsoleted rules.
dotnet_diagnostic.RCS1091.severity = none
# Please see RCS1259 instead.

# RCS1093: File contains no code
# Empty files should be removed.
# Please keep this rule's severity above suggestion to actively avoid empty files.
dotnet_diagnostic.RCS1093.severity = warning
# RCS1094: Declare using directive on top level
# Namespace-scoped using directives are safer than file-scoped using directives.
# Please keep this rule's severity disabled to avoid using less safely scoped using directives.
dotnet_diagnostic.RCS1094.severity = none
# RCS1096: Use 'HasFlag' method or bitwise operator
# HasFlag can be used instead of bitwise operators to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1096.severity = suggestion
# Use 'HasFlag' method
roslynator_enum_has_flag_style = method
# RCS1097: Remove redundant 'ToString' call
# Redundant ToString calls can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1097.severity = suggestion
# RCS1098: Constant values should be placed on right side of comparisons
# Consistently placing constant values on the right side of comparisons helps readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1098.severity = suggestion
# RCS1099: Default label should be the last label in a switch section
# Default labels should always be the last label in a switch section for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1099.severity = suggestion
# RCS1100: Format documentation summary on a single line
# RCS1101: Format documentation summary on multiple lines
# These rules are obsolete.
# Please keep these rules' severities disabled to avoid using obsoleted rules.
dotnet_diagnostic.RCS1100.severity = none
dotnet_diagnostic.RCS1101.severity = none
# Please see RCS1253 instead.

# RCS1102: Make class static
# CA1052 should control making classes static preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1102.severity = none
# Please see CA1052 instead.

# RCS1103: Convert 'if' to assignment
# Assignments can be converted to if statements to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1103.severity = suggestion
# RCS1104: Simplify conditional expression
# Conditional expressions can be simplified for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1104.severity = suggestion
# RCS1105: Unnecessary interpolation
# Unnecessary string interpolation can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encoruage more readable code.
dotnet_diagnostic.RCS1105.severity = suggestion
# RCS1106: Remove empty destructor
# This rule is obsolete.
# Please keep this rule's severity disabled to avoid using obsoleted rules.
dotnet_diagnostic.RCS1106.severity = none
# Please see RCS1259 instead.

# RCS1107: Remove redundant 'ToCharArray' call
# S3456 should control redundant ToCharArray preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1107.severity = none
# Please see S3456 instead.

# RCS1108: Add 'static' modifier to all partial class declarations
# All partial class declarations should be consistently static.
# Please keep this rule's severity above suggestion to actively encourage properly implementing static classes.
dotnet_diagnostic.RCS1108.severity = warning
# RCS1110: Declare type inside namespace
# CA1050 should control global namespace usage preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1110.severity = none
# Please see CA1050 instead.

# RCS1111: Add braces to switch section with multiple statements
# Adding braces to switch sections is unnecessary for readability.
# Please keep this rule's severity disabled to avoid harming readability.
dotnet_diagnostic.RCS1111.severity = none
# RCS1112: Combine 'Enumerable.Where' method chain
# Enumerable.Where method chains should be combined to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1112.severity = suggestion
# RCS1113: Use 'string.IsNullOrEmpty' method
# Null or empty strings should only be checked via string.IsNullOrEmpty.
# Please keep this rule's severity above suggestion to actively encourage properly checking for null/empty strings.
dotnet_diagnostic.RCS1113.severity = warning
# RCS1114: Remove redundant delegate creation
# S3257 should control redundant delegate creation preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1114.severity = none
# Please see S3257 instead.

# RCS1118: Mark local variable as const
# Marking local variables as const simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1118.severity = suggestion
# RCS1123: Add parentheses when necessary
# IDE0048 should control necessary parentheses preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1123.severity = none
# Please see IDE0048 instead.

# RCS1124: Inline local variable
# Inlining local variables minimises variable scope.
# Please keep this rule's severity above silent to actively encourage minimising variable scope.
dotnet_diagnostic.RCS1124.severity = suggestion
# RCS1126: Add braces to if-else
# Adding braces to if-else makes code easier to debug.
# Please keep this rule's severity above suggestion to actively encourage easier to debug code.
dotnet_diagnostic.RCS1126.severity = warning
# RCS1128: Use coalesce expression
# IDE0029 should control null coalescing preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1128.severity = none
# Please see IDE0029 instead.

# RCS1129: Remove redundant field initialisation
# Redundant field initialisations can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1129.severity = suggestion
# RCS1130: Bitwise operation on enum without Flags attribute
# S3265 should control bitwise operations on enum without [Flags] preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1130.severity = none
# Please see S3265 instead.

# RCS1132: Remove redundant overriding member
# Redundant member overrides can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1132.severity = suggestion
# RCS1133: Remove redundant Dispose/Close call
# Redundant Dispose/Close calls can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1133.severity = suggestion
# RCS1134: Remove redundant statement
# Redundant statements can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1134.severity = suggestion
# RCS1135: Declare enum member with zero value (when enum has FlagsAttribute)
# The default value of an enum should always be valid.
# Please keep this rule's severity above suggestion to avoid problematic functionality.
dotnet_diagnostic.RCS1135.severity = warning
# RCS1136: Merge switch sections with equivalent content
# Equivalent switch sections should be merged to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1136.severity = suggestion
# RCS1138: Add summary to documentation comment
# Documentation comment summaries should not be empty.
# Please keep this rule's severity above silent to actively avoid empty documentation comment summaries.
dotnet_diagnostic.RCS1138.severity = suggestion
# RCS1139: Add summary element to documentation comment
# Documentation comment summary elements should not be empty.
# Please keep this rule's severity above silent to actively avoid empty documentation comment summary elements.
dotnet_diagnostic.RCS1139.severity = suggestion
# RCS1140: Add exception to documentation comment
# Exceptions should be included in documentation comments.
# Please keep this rule's severity above silent to actively encourage better documentation comments.
dotnet_diagnostic.RCS1140.severity = suggestion
# RCS1141: Add 'param' element to documentation comment
# Parameters should be included in documentation comments.
# Please keep this rule's severity above silent to actively encourage better documentation comments.
dotnet_diagnostic.RCS1141.severity = suggestion
# RCS1142: Add 'typeparam' element to documentation comment
# Type parameters should be included in documentation comments.
# Please keep this rule's severity above silent to actively encourage better documentation comments.
dotnet_diagnostic.RCS1142.severity = suggestion
# RCS1143: Simplify coalesce expression
# Coalesce expressions can be simplified for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1143.severity = suggestion
# RCS1145: Remove redundant 'as' operator
# Redundant as operators can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1145.severity = suggestion
# RCS1146: Use conditional access
# IDE0031 should control conditional access preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1146.severity = none
# Please see IDE0031 instead.

# RCS1151: Remove redundant cast
# Redundant casts can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1151.severity = suggestion
# RCS1154: Sort enum members
# Enum members should be sorted for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1154.severity = suggestion
# RCS1155: Use StringComparison when comparing strings
# StringComparison explicitly states how strings should be compared.
# Please keep this rule's severity above suggestion to actively encourage explicitly stating how strings should be compared.
dotnet_diagnostic.RCS1155.severity = warning
# RCS1156: Use string.Length instead of comparison with empty string
# String.Length is significantly faster than Equals.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.RCS1156.severity = warning
# RCS1157: Composite enum value contains undefined flag
# Flag enums should not contain undefined flags.
# Please keep this rule's severity above suggestion to actively avoid misusing flags enums.
dotnet_diagnostic.RCS1157.severity = warning
# RCS1158: Static member in generic type should use a type parameter
# Static members will not be shared between every instance of generics. Providing type parameters makes this clearer.
# Please keep this rule's severity above suggestion to actively encourage more readable code.
dotnet_diagnostic.RCS1158.severity = warning
# RCS1159: Use EventHandler<T>
# CA1003 should control event handler signature preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1159.severity = none
# Please see CA1003 instead.

# RCS1160: Abstract type should not have public constructors
# S3442 should control abstract types with public/internal constructor preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1160.severity = none
# Please see S3442 instead.

# RCS1161: Enum should declare explicit values
# Declaring explicit values makes enums easier to modify.
# Please keep this rule's severity above silent to actively encourage properly implementing enums.
dotnet_diagnostic.RCS1161.severity = suggestion
# RCS1162: Avoid chain of assignments
# Assignment chains are difficult to read.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1162.severity = suggestion
# RCS1163: Unused parameter
# IDE0060 should control unused parameter preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1163.severity = none
# Please see IDE0060 instead.

# RCS1164: Unused type parameter
# S2326 should control unused type parameter preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1164.severity = none
# Please see S2326 instead.

# RCS1165: Unconstrained type parameter checked for null
# Unconstrained type parameters cannot be checked for null.
# Please keep this rule's severity above suggestion to actively avoid improperly checking if unconstrained type parameters are null.
dotnet_diagnostic.RCS1165.severity = warning
# RCS1166: Value type object is never equal to null
# Value type objects should not be compared to null.
# Please keep this rule's severity above suggestion to actively avoid misusing value type objects.
dotnet_diagnostic.RCS1166.severity = warning
# RCS1168: Parameter name differs from base name
# CA1725 should control parameter names differing from base name preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1168.severity = none
# Please see CA1725 instead.

# RCS1169: Make field read-only
# IDE0044 should control read-only preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1169.severity = none
# Please see IDE0044 instead.

# RCS1170: Use read-only auto-implemented property
# Auto-implemented properties has potential to complicate debugging.
# Please keep this rule's severity disabled to avoid harming debuggability.
dotnet_diagnostic.RCS1170.severity = none
# RCS1171: Simplify lazy initialisation
# Lazy initialisation can be simplified for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1171.severity = suggestion
# RCS1172: Use 'is' operator instead of 'as' operator
# Using is operator instead of as operator simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1172.severity = suggestion
# RCS1173: Use coalesce expression instead of 'if'
# IDE0029 should control coalesce expression preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1173.severity = none
# Please see IDE0029 instead.

# RCS1174: Remove redundant async/await
# Redundant async/await can be removed to increase performance.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.RCS1174.severity = warning
# RCS1175: Unused 'this' parameter
# 'this' parameters should not be unused.
# Please keep this rule's severity above suggestion to actively avoid unused this parameters.
dotnet_diagnostic.RCS1175.severity = warning
# RCS1176: Use 'var' instead of explicit type (when the type is not obvious)
# RCS1177: Use 'var' instead of explicit type (in foreach)
# These rules are obsolete.
# Please keep these rules' severities disabled to avoid using obsoleted rules.
dotnet_diagnostic.RCS1176.severity = none
dotnet_diagnostic.RCS1177.severity = none
# Please see RCS1264 instead.

# RCS1179: Unnecessary assignment
# Unnecessary assignments can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1179.severity = suggestion
# RCS1180: Inline lazy initialisation
# IDE0029 should control inline lazy initialisation preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1180.severity = none
# Please see IDE0029 instead.

# RCS1181: Convert comment to documentation comment
# Documentation comments are visible when hovering over the corresponding symbol, unlike regular comments.
# Please keep this rule's severity above silent to actively encourage adding documentation comments.
dotnet_diagnostic.RCS1181.severity = suggestion
# RCS1182: Remove redundant base interface
# Redundant base interfaces can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1182.severity = suggestion
# RCS1186: Use Regex instance instead of static method
# Regex instances are more performant than static methods.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.RCS1186.severity = warning
# RCS1187: Use constant instead of field
# Constants do not need to be computed at runtime, unlike static readonly values.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.RCS1187.severity = warning
# RCS1188: Remove redundant auto-property initialisation
# Redundant auto-property initialisation can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1188.severity = suggestion
# RCS1189: Add or remove region name
# Both region & endregion preprocessor directives should be consistently named for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1189.severity = suggestion
# RCS1190: Join string expressions
# String expressions should be joined for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1190.severity = suggestion
# RCS1191: Declare enum value as combination of names
# Declaring enum values as combination of names avoids magic numbers.
# Please keep this rule's severity above suggestion to actively avoid magic numbers.
dotnet_diagnostic.RCS1191.severity = warning
# RCS1192: Unnecessary usage of verbatim string literal
# Unnecessary string literals can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1192.severity = suggestion
# RCS1193: Overriding member should not change 'params' modifier
# Member overrides should always be consistent with original member.
# Please keep this rule's severity above suggestion to actively avoid inconsistent member overrides.
dotnet_diagnostic.RCS1193.severity = warning
# RCS1194: Implement exception constructors
# CA1032 should control exception constructor preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1194.severity = none
# Please see CA1032 instead.

# RCS1195: Use ^ operator
# Using the XOR operator simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1195.severity = suggestion
# RCS1196: Call extension method as instance method
# Instance methods simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1196.severity = suggestion
# RCS1197: Optimise StringBuilder.Append/AppendLine call
# StringBuilder.Append/AppendLine calls can be optimised.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.RCS1197.severity = warning
# RCS1198: Avoid unnecessary boxing of value type
# Unnecessary boxing of value types can be removed to make code more performant.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.RCS1198.severity = warning
# RCS1199: Unnecessary null check
# Unnecessary null checks can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1199.severity = suggestion
# RCS1200: Call 'Enumerable.ThenBy' instead of 'Enumerable.OrderBy'
# ThenBy is more performant than using OrderBy again.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.RCS1200.severity = warning
# RCS1201: Use method chaining
# Method chaining simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1201.severity = suggestion
# RCS1202: Avoid NullReferenceException
# Exceptions should be avoided if possible.
# Please keep this rule's severity above suggestion to actively avoid exceptions.
dotnet_diagnostic.RCS1202.severity = warning
# RCS1203: Use AttributeUsageAttribute
# CA1018 should control [AttributeUsage] preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1203.severity = none
# Please see CA1018 instead.

# RCS1204: Use EventArgs.Empty
# Using EventArgs.Empty instead of null avoids NullReferenceExceptions.
# Please keep this rule's severity above suggestion to actively avoid NullReferenceExceptions.
dotnet_diagnostic.RCS1204.severity = warning
# RCS1205: Order named arguments according to the order of parameters
# The order of arguments should always match the order of parameters.
# Please keep this rule's severity above suggestion to actively encourage using consistently ordered arguments.
dotnet_diagnostic.RCS1205.severity = warning
# RCS1206: Use conditional access instead of conditional expression
# IDE0031 should control conditional access preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1206.severity = none
# Please see IDE0031 instead.

# RCS1207: Use anonymous function or method group
# Method groups are more performant than anonymous functions.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.RCS1207.severity = warning
# Use method group
roslynator_use_anonymous_function_or_method_group = method_group
# RCS1208: Reduce 'if' nesting
# Code should be flattened for readability.
# Please keep this rule's severity above silent to actively encourage more performant code.
dotnet_diagnostic.RCS1208.severity = suggestion
# RCS1209: Order type parameter constraints
# The order of type parameters should remain consistent for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1209.severity = suggestion
# RCS1210: Return completed task instead of returning null
# VSTHRD114 should control returning completing task instead of null preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1210.severity = none
# Please see VSTHRD114 instead.

# RCS1211: Remove unnecessary 'else'
# Unnecessary else statements can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1211.severity = suggestion
# RCS1212: Remove redundant assignment
# Redundant assignments can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1212.severity = suggestion
# RCS1213: Remove unused member declaration
# IDE0051 should control unused member declaration preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1213.severity = none
# Please see IDE0051 instead.

# RCS1214: Unnecessary interpolated string
# Unnecessary string interpolation can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1214.severity = suggestion
# RCS1215: Expression is always equal to true/false
# Expressions should never be constant.
# Please keep this rule's severity above suggestion to actively avoid constant expressions.
dotnet_diagnostic.RCS1215.severity = warning
# RCS1216: Unnecessary unsafe context
# S2333 should control unnecessary modifier preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1216.severity = none
# Please see S2333 instead.

# RCS1217: Convert interpolated string to concatenation
# String concatenation is easier to read than string interpolations.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1217.severity = suggestion
# RCS1218: Simplify code branching
# Code branches should be simplified for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1218.severity = suggestion
# RCS1220: Use pattern matching instead of combination of 'is' operator and cast operator
# Pattern matching instead of is and cast operators simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1220.severity = suggestion
# RCS1221: Use pattern matching instead of combination of 'as' operator and null check
# Pattern matching instead of as and null check simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1221.severity = suggestion
# RCS1222: Merge preprocessor directives
# Preprocessor directives can be merged to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1222.severity = suggestion
# RCS1223: Mark publicly visible type with DebuggerDisplay attribute
# [DebuggerDisplay] customises how publicly visible types will be displayed in a debugger, for readability.
# Please keep this rule's severity above silent to actively encourage more readable debugging outputs.
dotnet_diagnostic.RCS1223.severity = suggestion
# RCS1224: Make method an extension method
# Methods stored in extension types should be extension methods.
# Please keep this rule's severity above suggestion to actively encourage properly implementing extension types.
dotnet_diagnostic.RCS1224.severity = warning
# RCS1225: Make class sealed
# Classes that only have private constructors should be sealed.
# Please keep this rule's severity above silent to actively encourage sealing classes.
dotnet_diagnostic.RCS1225.severity = suggestion
# RCS1226: Add paragraph to documentation comment
# Paragraphs should be added to documentation comments for readability.
# Please keep this rule's severity above silent to actively encourage more readable documentation comments.
dotnet_diagnostic.RCS1226.severity = suggestion
# RCS1227: Validate arguments correctly
# Arguments should not be validated incorrectly.
# Please keep this rule's severity above suggestion to actively encourage validating arguments correctly.
dotnet_diagnostic.RCS1227.severity = warning
# RCS1228: Unused element in a documentation comment
# Documentation comment elements should not be unused.
# Please keep this rule's severity above suggestion to actively avoid unused elements in documentation comments.
dotnet_diagnostic.RCS1228.severity = warning
# RCS1229: Use async/await when necessary
# async/await should be used when necessary to avoid deadlocks.
# Please keep this rule's severity above suggestion to actively avoid deadlocks.
dotnet_diagnostic.RCS1229.severity = warning
# RCS1230: Unnecessary explicit use of enumerator
# Unnecessary explicit uses of enumerators can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encoruage more readable code.
dotnet_diagnostic.RCS1230.severity = suggestion
# RCS1231: Make parameter ref read-only
# Parameters for a method within a read-only struct should be readonly.
# Please keep this rule's severity above suggestion to actively encourage properly implementing read-only structs.
dotnet_diagnostic.RCS1231.severity = warning
# RCS1232: Order elements in documentation comment
# Elements should be ordered in documentation comments for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1232.severity = suggestion
# RCS1233: Use short-circuiting operator
# Short-circuiting operators should be used to cease calculation as soon as possible.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.RCS1233.severity = warning
# RCS1234: Duplicate enum value
# Enums should never contain duplicate values.
# Please keep this rule's severity above suggestion to actively avoid duplicate enum values.
dotnet_diagnostic.RCS1234.severity = warning
# RCS1235: Optimise method call
# Certain method calls can be optimised for performance.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.RCS1235.severity = warning
# RCS1236: Use exception filter
# Exception filters avoid silently ignoring exceptions.
# Please keep this rule's severity above suggestion to actively avoid silently ignoring exceptions.
dotnet_diagnostic.RCS1236.severity = warning
# RCS1237: Use bit shift operator
# This rule is obsolete.
# Please keep this rule's severity disabled to avoid using obsoleted rules.
dotnet_diagnostic.RCS1237.severity = none
# Please see RCS1254 instead.

# RCS1238: Avoid nested ?: operators
# Nested ?: operators are hard to read.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1238.severity = suggestion
# RCS1239: Use 'for' statement instead of 'while' statements
# For statements are easier to read than while statements.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1239.severity = suggestion
# RCS1240: Operator is unnecessary
# Unnecessary operators can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1240.severity = suggestion
# RCS1241: Implement non-generic counterpart
# Publicly visible types that implement IComparable<T>, IComparer<T> or IEqualityComparer<T> should implement their non-generic counterparts.
# Please keep this rule's severity above suggestion to actively encourage properly implementing IComparable, IComparer & IEqualityComparer.
dotnet_diagnostic.RCS1241.severity = warning
# RCS1242: Do not pass non-read-only struct by read-only reference
# Non-read-only structs should never be passed by read-only.
# Please keep this rule's severity above suggestion to actively avoid improperly passing in non-read-only structs.
dotnet_diagnostic.RCS1242.severity = warning
# RCS1243: Duplicate word in a comment
# Comments should not contain duplicate words.
# Please keep this rule's severity above silent to actively avoid duplicate words in comments.
dotnet_diagnostic.RCS1243.severity = suggestion
# RCS1244: Simplify 'default' expression
# Default expressions can be simplified for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1244.severity = suggestion
# RCS1246: Use element access
# Element access simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1246.severity = suggestion
# RCS1247: Fix documentation comment tag
# Documentation comment tags should not be misused.
# Please keep this rule's severity above suggestion to actively avoid misusing documentation comment tags.
dotnet_diagnostic.RCS1247.severity = warning
# RCS1248: Normalise null check
# IDE0041 should control null check preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1248.severity = none
# Please see IDE0041 instead.

# RCS1249: Unnecessary null-forgiving operator
# Unnecessary null-forgiving operators should be removed to avoid NullReferenceExceptions.
# Please keep this rule's severity above suggestion to actively avoid NullReferenceExceptions.
dotnet_diagnostic.RCS1249.severity = warning
# RCS1250: Use implicit/explicit object creation
# Implicit object creation should be used when the type is obvious to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1250.severity = suggestion
# Prefer explicit/implicit object creation
roslynator_object_creation_type_style = implicit_when_type_is_obvious
# Use collection expression for array/collection creation
roslynator_use_collection_expression = true
# Use implicit object creation instead of 'var'
roslynator_use_var_instead_of_implicit_object_creation = false
# RCS1251: Remove unnecessary braces from record declaration
# Unnecessary braces can be removed from record declarations to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1251.severity = suggestion
# RCS1252: Normalise usage of infinite loop
# Infinite loops should consistently use the same type of loop for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1252.severity = suggestion
# Use 'while' statement as an infinite loop
roslynator_infinite_loop_style = while
# RCS1253: Format documentation comment summary
# Consistently formatting documentation comment summaries is more readable.
# Please keep this rule's severity above silent to actively encourage more readable documentation comment summaries.
dotnet_diagnostic.RCS1253.severity = suggestion
# Format documentation comment summary on multiple lines
roslynator_doc_comment_summary_style = multi_line
# RCS1254: Normalise format of enum flag value
# Enum flag values should be consistently formatted for readability.
# Please keep this rule's severity above suggestion to actively encourage consistently formatting enum flag values.
dotnet_diagnostic.RCS1254.severity = warning
# Format enum flag value as decimal number
roslynator_enum_flag_value_style = decimal_number
# RCS1255: Simplify argument null check
# Argument null checks can be simplified for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1255.severity = suggestion
# RCS1256: Invalid argument null check
# Invalid argument null checks indicate problematic functionality.
# Please keep this rule's severity above suggestion to actively avoid problematic functionality.
dotnet_diagnostic.RCS1256.severity = warning
# RCS1257: Use enum field explicitly
# Enum fields should be used explicitly to avoid magic numbers.
# Please keep this rule's severity above suggestion to actively avoid magic numbers.
dotnet_diagnostic.RCS1257.severity = warning
# RCS1258: Unnecessary enum flag
# Unnecessary enum flags indicate problematic functionality.
# Please keep this rule's severity above suggestion to actively avoid problematic functionality.
dotnet_diagnostic.RCS1258.severity = warning
# RCS1259: Remove empty syntax
# Syntax should not be left empty.
# This rule covers unique cases that other rules do not.
# Please keep this rule's severity above suggestion to actively avoid useless code.
dotnet_diagnostic.RCS1259.severity = warning
# RCS1260: Add/remove trailing comma
# Trailing commas should be removed for consistency.
# Please keep this rule's severity above silent to actively encourage consistent comma placements.
dotnet_diagnostic.RCS1260.severity = suggestion
# Omit trailing comma in initialiser or enum
roslynator_trailing_comma_style = omit
# RCS1261: Resource can be disposed asynchronously
# An object implements IAsyncDisposable and can be disposed of asynchronously in the context it is used.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.RCS1261.severity = warning
# RCS1262: Unnecessary raw string literal
# Unnecessary raw string literals can be removed to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1262.severity = suggestion
# RCS1263: Invalid reference in a documentation comment
# References in documentation comments should not be invalid.
# Please keep this rule's severity above suggestion to actively avoid invalid references in documentation comments.
dotnet_diagnostic.RCS1263.severity = warning
# RCS1264: Use 'var' or explicit type
# var can be used when the type is obvious to simplify code for readability.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.RCS1264.severity = suggestion
# RCS1265: Remove redundant catch block
# S2737 should control redundant catch block preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.RCS1265.severity = none
# Please see S2737 instead.

# RCS1266: Use raw string literal
# Raw string literals are C# 11+ only.
# Please keep this rule's severity disabled to avoid using C# 11+ features.
dotnet_diagnostic.RCS1266.severity = none
# RCS1266 is for C# 11+ only.

# RCS1267: Use string interpolation instead of 'string.Concat'
# String interpolation is simpler than string.Concat.
# Please keep this rule's severity above silent to actively encourage simplifying code for maintainability.
dotnet_diagnostic.RCS1267.severity = suggestion
# RCS1268: Simplify numeric comparison
# Numeric comparisons should be simplified for readability.
# Please keep this rule's severity above silent to actively encourage simplifying numeric comparisons for maintainability.
dotnet_diagnostic.RCS1268.severity = suggestion

# Roslyn Analyser C# files
[RoslynAnalysers/**.cs]

# Roslynator.CodeAnalysis.Analyzers implements RCS9 rules, which should only be used while developing Roslyn Analysers.
# https://www.nuget.org/packages/Roslynator.CodeAnalysis.Analyzers
# https://josefpihrt.github.io/docs/roslynator/analyzers/

# RCS9001: Use pattern matching
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.RCS9001.severity = suggestion
# RCS9002: Use property SyntaxNode.SpanStart
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.RCS9002.severity = suggestion
# RCS9003: Unnecessary conditional access
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.RCS9003.severity = suggestion
# RCS9004: Call 'Any' instead of accessing 'Count'
# Any is more performant than Count.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.RCS9004.severity = warning
# RCS9005: Unnecessary null check
# Syntax nodes do not need to be checked for null before being used.
# Please keep this rule's severity above silent to actively avoid unnecessary null checks on syntax nodes.
dotnet_diagnostic.RCS9005.severity = suggestion
# RCS9006: Use element access
# Simplifies code for readability.
# Please keep this rule's severity above silent to actively encourage shorter code.
dotnet_diagnostic.RCS9006.severity = suggestion
# RCS9007: Use return value
# Return values should not be left unused.
# Please keep this rule's severity above suggestion to actively encourage using return values.
dotnet_diagnostic.RCS9007.severity = warning
# RCS9008: Call 'Last' instead of using []
# Last is more performant than [].
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.RCS9008.severity = warning
# RCS9009: Unknown language name
# Only known language names should be used.
# Please keep this rule's severity above suggestion to actively avoid using unknown language names.
dotnet_diagnostic.RCS9009.severity = warning
# RCS9010: Specify ExportCodeRefactoringProviderAttribute.Name
# Names of CodeRefactoringProviders should be specified.
# Please keep this rule's severity above suggestion to actively encourage specifying names of CodeRefactoringProviders.
dotnet_diagnostic.RCS9010.severity = warning
# RCS9011: Specify ExportCodeFixProviderAttribute.Name
# Names of CodeFixProviders should be specified.
# Please keep this rule's severity above suggestion to actively encourage specifying names of CodeFixProviders.
dotnet_diagnostic.RCS9011.severity = warning

# C# files
[*.cs]

# Roslynator Refactorings
# https://josefpihrt.github.io/docs/roslynator/refactorings

# RR0002: Add braces
roslynator_refactoring.add_braces.enabled = true
# RR0003: Add braces to if-else
roslynator_refactoring.add_braces_to_if_else.enabled = true
# RR0004: Add braces to switch section
roslynator_refactoring.add_braces_to_switch_section.enabled = true
# RR0005: Add braces to switch sections
roslynator_refactoring.add_braces_to_switch_sections.enabled = true
# RR0006: Add explicit cast
# This refactoring is obsolete.
roslynator_refactoring.add_explicit_cast.enabled = false
# RR0006 is obsolete.

# RR0007: Add default value to parameter
roslynator_refactoring.add_default_value_to_parameter.enabled = true
# RR0008: Add default value to return statement
# This refactoring is obsolete.

# RR0009: Add 'exception' element to documentation comment
roslynator_refactoring.add_exception_element_to_documentation_comment.enabled = true
# RR0010: Add identifier to variable declaration
# This refactoring is obsolete.

# RR0011: Add argument name
roslynator_refactoring.add_argument_name.enabled = true
# RR0012: Add identifier to parameter
# This refactoring is obsolete.

# RR0013: Add using directive
roslynator_refactoring.add_using_directive.enabled = true
# RR0014: Add using static directive
roslynator_refactoring.add_using_static_directive.enabled = true
# RR0015: Call 'ConfigureAwait(false)'
# This refactoring is obsolete.

# RR0016: Call extension method as instance method
roslynator_refactoring.call_extension_method_as_instance_method.enabled = true
# RR0017: Call 'To...' method (ToString, ToArray, ToList)
# This refactoring is obsolete.

# RR0018: Use implicit type
roslynator_refactoring.use_implicit_type.enabled = true
# RR0019: Change method/property/indexer type according to return expression
# RR0020: Change method/property/indexer type according to yield return expression
# These refactorings are obsolete.

# RR0021: Change method return type to 'void'
roslynator_refactoring.change_method_return_type_to_void.enabled = true
# RR0022: Change type according to expression
roslynator_refactoring.change_type_according_to_expression.enabled = true
# RR0023: Use explicit type
roslynator_refactoring.use_explicit_type.enabled = true
# RR0024: Check expression for null
roslynator_refactoring.check_expression_for_null.enabled = true
# RR0025: Check parameter for null
roslynator_refactoring.check_parameter_for_null.enabled = true
# RR0026: Use object initialiser
roslynator_refactoring.use_object_initializer.enabled = true
# RR0027: Comment out member declaration
roslynator_refactoring.comment_out_member_declaration.enabled = true
# RR0028: Comment out statement
roslynator_refactoring.comment_out_statement.enabled = true
# RR0029: Copy documentation comment from base member
roslynator_refactoring.copy_documentation_comment_from_base_member.enabled = true
# RR0030: Copy argument
roslynator_refactoring.copy_argument.enabled = true
# RR0031: Copy member declaration
roslynator_refactoring.copy_member_declaration.enabled = true
# RR0032: Copy parameter
roslynator_refactoring.copy_parameter.enabled = true
# RR0033: Copy statement
roslynator_refactoring.copy_statement.enabled = true
# RR0034: Expand compound assignment
roslynator_refactoring.expand_compound_assignment.enabled = true
# RR0035: Expand coalesce expression
roslynator_refactoring.expand_coalesce_expression.enabled = true
# RR0036: Expand event declaration
roslynator_refactoring.expand_event_declaration.enabled = true
# RR0037: Convert expression body to block body
roslynator_refactoring.convert_expression_body_to_block_body.enabled = true
# RR0038: Expand initialiser
roslynator_refactoring.expand_initializer.enabled = true
# RR0039: Convert lambda expression body to block body
roslynator_refactoring.convert_lambda_expression_body_to_block_body.enabled = true
# RR0040: Convert auto-property to full property (without backing field)
roslynator_refactoring.convert_auto_property_to_full_property_without_backing_field.enabled = true
# RR0041: Convert auto-property to full property
roslynator_refactoring.convert_auto_property_to_full_property.enabled = true
# RR0043: Extract expression from condition
roslynator_refactoring.extract_expression_from_condition.enabled = true
# RR0044: Extract generic type
# This refactoring is obsolete.

# RR0045: Remove containing statement
roslynator_refactoring.remove_containing_statement.enabled = true
# RR0046: Extract type declaration to a new file
roslynator_refactoring.extract_type_declaration_to_new_file.enabled = true
# RR0047: Format accessor braces
# This refactoring is obsolete.

# RR0048: Wrap arguments
roslynator_refactoring.wrap_arguments.enabled = true
# RR0049: Wrap binary expression
roslynator_refactoring.wrap_binary_expression.enabled = true
# RR0050: Wrap conditional expression
roslynator_refactoring.wrap_conditional_expression.enabled = true
# RR0051: Wrap call chain
roslynator_refactoring.wrap_call_chain.enabled = true
# RR0052: Wrap initialiser expressions
roslynator_refactoring.wrap_initializer_expressions.enabled = true
# RR0053: Wrap parameters
roslynator_refactoring.wrap_parameters.enabled = true
# RR0054: Generate base constructors
roslynator_refactoring.generate_base_constructors.enabled = true
# RR0055: Generate combined enum member
roslynator_refactoring.generate_combined_enum_member.enabled = true
# RR0056: Generate enum member
roslynator_refactoring.generate_enum_member.enabled = true
# RR0057: Generate enum values
roslynator_refactoring.generate_enum_values.enabled = true
# RR0058: Generate event invoking method
roslynator_refactoring.generate_event_invoking_method.enabled = true
# RR0059: Add missing cases to switch statement
roslynator_refactoring.add_missing_cases_to_switch.enabled = true
# RR0060: Initialise local variable with default value
roslynator_refactoring.initialize_local_variable_with_default_value.enabled = true
# RR0061: Inline alias expression
roslynator_refactoring.inline_alias_expression.enabled = true
# RR0062: Inline method
roslynator_refactoring.inline_method.enabled = true
# RR0063: Insert string interpolation
roslynator_refactoring.insert_string_interpolation.enabled = true
# RR0064: Introduce and initialise field
roslynator_refactoring.introduce_and_initialize_field.enabled = true
# RR0065: Introduce and initialise property
roslynator_refactoring.introduce_and_initialize_property.enabled = true
# RR0066: Introduce constructor
roslynator_refactoring.introduce_constructor.enabled = true
# RR0067: Introduce field to lock on
roslynator_refactoring.introduce_field_to_lock_on.enabled = true
# RR0068: Introduce local variable
roslynator_refactoring.introduce_local_variable.enabled = true
# RR0069: Make member abstract
roslynator_refactoring.make_member_abstract.enabled = true
# RR0070: Make member virtual
roslynator_refactoring.make_member_virtual.enabled = true
# RR0073: Remove unnecessary assignment
roslynator_refactoring.remove_unnecessary_assignment.enabled = true
# RR0074: Merge attributes
roslynator_refactoring.merge_attributes.enabled = true
# RR0075: Merge 'if' statements
roslynator_refactoring.merge_if_statements.enabled = true
# RR0076: Merge interpolation into interpolated string
# This refactoring is obsolete.
roslynator_refactoring.merge_interpolation_into_interpolated_string.enabled = false
# RR0076 is obsolete.

# RR0077: Merge local declarations
roslynator_refactoring.merge_local_declarations.enabled = true
# RR0078: Join string expressions
roslynator_refactoring.join_string_expressions.enabled = true
# RR0079: Invert binary expression
roslynator_refactoring.invert_binary_expression.enabled = true
# RR0080: Invert boolean literal
roslynator_refactoring.invert_boolean_literal.enabled = true
# RR0081: Invert is expression
roslynator_refactoring.invert_is_expression.enabled = true
# RR0082: Invert operator
roslynator_refactoring.invert_operator.enabled = true
# RR0083: Notify when property changes
roslynator_refactoring.notify_when_property_changes.enabled = true
# RR0084: Parenthesise expression
roslynator_refactoring.parenthesize_expression.enabled = true
# RR0085: Promote local variable to parameter
roslynator_refactoring.promote_local_variable_to_parameter.enabled = true
# RR0086: Remove all comments
roslynator_refactoring.remove_all_comments.enabled = true
# RR0087: Remove all comments (except documentation comments)
roslynator_refactoring.remove_all_comments_except_documentation_comments.enabled = true
# RR0088: Remove all documentation comments
roslynator_refactoring.remove_all_documentation_comments.enabled = true
# RR0089: Remove all member declarations
roslynator_refactoring.remove_all_member_declarations.enabled = true
# RR0090: Remove all preprocessor directives
roslynator_refactoring.remove_all_preprocessor_directives.enabled = true
# RR0091: Remove all region directives
roslynator_refactoring.remove_all_region_directives.enabled = true
# RR0092: Remove all statements
roslynator_refactoring.remove_all_statements.enabled = true
# RR0093: Remove all switch sections
roslynator_refactoring.remove_all_switch_sections.enabled = true
# RR0094: Remove braces
roslynator_refactoring.remove_braces.enabled = true
# RR0095: Remove braces from if-else
roslynator_refactoring.remove_braces_from_if_else.enabled = true
# RR0096: Remove braces from switch section
roslynator_refactoring.remove_braces_from_switch_section.enabled = true
# RR0097: Remove braces from switch sections
roslynator_refactoring.remove_braces_from_switch_sections.enabled = true
# RR0098: Remove comment
roslynator_refactoring.remove_comment.enabled = true
# RR0099: Remove condition from last else clause
roslynator_refactoring.remove_condition_from_last_else.enabled = true
# RR0100: Remove preprocessor directive
roslynator_refactoring.remove_preprocessor_directive.enabled = true
# RR0101: Remove empty lines
roslynator_refactoring.remove_empty_lines.enabled = true
# RR0102: Remove interpolation
roslynator_refactoring.remove_interpolation.enabled = true
# RR0103: Remove member declaration
roslynator_refactoring.remove_member_declaration.enabled = true
# RR0104: Remove member declarations above/below
roslynator_refactoring.remove_member_declarations_above_or_below.enabled = true
# RR0105: Remove argument name
roslynator_refactoring.remove_argument_name.enabled = true
# RR0106: Remove parentheses
roslynator_refactoring.remove_parentheses.enabled = true
# RR0107: Remove property initialiser
roslynator_refactoring.remove_property_initializer.enabled = true
# RR0108: Remove region
roslynator_refactoring.remove_region.enabled = true
# RR0109: Remove statement
roslynator_refactoring.remove_statement.enabled = true
# RR0110: Merge switch sections
roslynator_refactoring.merge_switch_sections.enabled = true
# RR0111: Synchronise property name and backing field name
roslynator_refactoring.sync_property_name_and_backing_field_name.enabled = true
# RR0112: Rename identifier according to type name
roslynator_refactoring.rename_identifier_according_to_type_name.enabled = true
# RR0113: Rename method according to type name
roslynator_refactoring.rename_method_according_to_type_name.enabled = true
# RR0114: Rename parameter according to its type name
roslynator_refactoring.rename_parameter_according_to_type_name.enabled = true
# RR0115: Rename property according to type name
roslynator_refactoring.rename_property_according_to_type_name.enabled = true
# RR0116: Invert LINQ method call
roslynator_refactoring.invert_linq_method_call.enabled = true
# RR0117: Replace 'as' expression with explicit cast
roslynator_refactoring.replace_as_expression_with_explicit_cast.enabled = true
# RR0118: Replace explicit cast expression 'as' expression
roslynator_refactoring.replace_explicit_cast_with_as_expression.enabled = true
# RR0119: Replace conditional expression with true/false branch
roslynator_refactoring.replace_conditional_expression_with_true_or_false_branch.enabled = true
# RR0120: Convert ?: to if-else
roslynator_refactoring.convert_conditional_expression_to_if_else.enabled = true
# RR0121: Use read-only field instead of constant
roslynator_refactoring.use_readonly_field_instead_of_constant.enabled = true
# RR0123: Convert 'do' to 'while'
roslynator_refactoring.convert_do_to_while.enabled = true
# RR0124: Replace equality operator with string.Equals
roslynator_refactoring.replace_equality_operator_with_string_equals.enabled = true
# RR0125: Replace equality operator with string.IsNullOrEmpty
roslynator_refactoring.replace_equality_operator_with_string_isnullorempty.enabled = true
# RR0126: Replace equality operator with string.IsNullOrWhiteSpace
roslynator_refactoring.replace_equality_operator_with_string_isnullorwhitespace.enabled = true
# RR0127: Inline constant value
roslynator_refactoring.inline_constant_value.enabled = true
# RR0128: Use constant instead of read-only field
roslynator_refactoring.use_constant_instead_of_readonly_field.enabled = true
# RR0129: Convert 'foreach' to 'for'
roslynator_refactoring.convert_foreach_to_for.enabled = true
# RR0130: Convert 'for' to 'foreach'
roslynator_refactoring.convert_for_to_foreach.enabled = true
# RR0131: Convert 'for' to 'while'
roslynator_refactoring.convert_for_to_while.enabled = true
# RR0132: Convert hexadecimal literal to decimal literal
roslynator_refactoring.convert_hexadecimal_literal_to_decimal_literal.enabled = true
# RR0133: Convert 'if' to 'switch'
roslynator_refactoring.convert_if_to_switch.enabled = true
# RR0134: Invert prefix/postfix unary operator
roslynator_refactoring.invert_prefix_or_postfix_unary_expression.enabled = true
# RR0135: Replace interpolated string with interpolation expression
roslynator_refactoring.replace_interpolated_string_with_interpolation_expression.enabled = true
# RR0136: Convert interpolated string to string literal
roslynator_refactoring.convert_interpolated_string_to_string_literal.enabled = true
# RR0137: Convert method group to lambda
roslynator_refactoring.convert_method_group_to_lambda.enabled = true
# RR0138: Replace method with property
roslynator_refactoring.replace_method_with_property.enabled = true
# RR0139: Replace 'null' with 'default(...)'
roslynator_refactoring.replace_null_literal_with_default_expression.enabled = true
# RR0140: Replace prefix operator to postfix operator
roslynator_refactoring.replace_prefix_operator_with_postfix_operator.enabled = true
# RR0141: Replace property with method
roslynator_refactoring.replace_property_with_method.enabled = true
# RR0142: Convert regular string literal to verbatim string literal
roslynator_refactoring.convert_regular_string_literal_to_verbatim_string_literal.enabled = true
# RR0143: Convert 'return' statement to 'if'
roslynator_refactoring.convert_return_statement_to_if.enabled = true
# RR0144: Call string.IndexOf instead of string.Contains
roslynator_refactoring.call_indexof_instead_of_contains.enabled = true
# RR0145: Convert 'string.Format' to interpolated string
roslynator_refactoring.convert_string_format_to_interpolated_string.enabled = true
# RR0147: Convert 'switch' to 'if'
roslynator_refactoring.convert_switch_to_if.enabled = true
# RR0148: Convert verbatim string literal to regular string literal
roslynator_refactoring.convert_verbatim_string_literal_to_regular_string_literal.enabled = true
# RR0149: Convert verbatim string literal to regular string literals
roslynator_refactoring.convert_verbatim_string_literal_to_regular_string_literals.enabled = true
# RR0150: Convert 'while' statement to 'do' statement
roslynator_refactoring.convert_while_to_do.enabled = true
# RR0151: Convert 'while' statement to 'for' statement
roslynator_refactoring.convert_while_to_for.enabled = true
# RR0152: Reverse 'for' statement
roslynator_refactoring.reverse_for_statement.enabled = true
# RR0153: Simplify if
roslynator_refactoring.simplify_if.enabled = true
# RR0154: Convert lambda block body to expression body
roslynator_refactoring.convert_lambda_block_body_to_expression_body.enabled = true
# RR0155: Sort member declarations
roslynator_refactoring.sort_member_declarations.enabled = true
# RR0156: Split attributes
roslynator_refactoring.split_attributes.enabled = true
# RR0157: Split switch labels
roslynator_refactoring.split_switch_labels.enabled = true
# RR0158: Split variable declaration
roslynator_refactoring.split_variable_declaration.enabled = true
# RR0159: Swap binary operands
roslynator_refactoring.swap_binary_operands.enabled = true
# RR0160: Invert conditional expression
roslynator_refactoring.invert_conditional_expression.enabled = true
# RR0161: Swap member declarations
roslynator_refactoring.swap_member_declarations.enabled = true
# RR0162: Invert if-else
roslynator_refactoring.invert_if_else.enabled = true
# RR0163: Uncomment single-line comment
roslynator_refactoring.uncomment_singleline_comment.enabled = true
# RR0164: Convert 'HasFlag' call to bitwise operation
roslynator_refactoring.convert_hasflag_call_to_bitwise_operation.enabled = true
# RR0165: Use coalesce expression instead of if
roslynator_refactoring.use_coalesce_expression_instead_of_if.enabled = true
# RR0166: Convert 'if' to ?:
roslynator_refactoring.convert_if_to_conditional_expression.enabled = true
# RR0167: Use element access instead of LINQ method
roslynator_refactoring.use_element_access_instead_of_linq_method.enabled = true
# RR0168: Use "" instead of string.Empty
# This refactoring is obsolete.
roslynator_refactoring.use_empty_string_literal_instead_of_string_empty.enabled = false
# RR0168 is obsolete.

# RR0169: Convert block body to expression body
roslynator_refactoring.convert_block_body_to_expression_body.enabled = true
# RR0170: Use lambda instead of anonymous method
roslynator_refactoring.use_lambda_instead_of_anonymous_method.enabled = true
# RR0171: Convert "" to string.Empty
roslynator_refactoring.use_string_empty_instead_of_empty_string_literal.enabled = true
# RR0172: Wrap statements in condition
roslynator_refactoring.wrap_statements_in_condition.enabled = true
# RR0173: Wrap in else clause
# This refactoring is obsolete.

# RR0174: Wrap lines in preprocessor directive
roslynator_refactoring.wrap_lines_in_preprocessor_directive.enabled = true
# RR0175: Wrap lines in #region directive
roslynator_refactoring.wrap_lines_in_region.enabled = true
# RR0176: Wrap lines in try-catch
roslynator_refactoring.wrap_lines_in_try_catch.enabled = true
# RR0177: Wrap statements in 'using' statement
roslynator_refactoring.wrap_statements_in_using_statement.enabled = true
# RR0178: Add generic parameter to a declaration
roslynator_refactoring.add_generic_parameter_to_declaration.enabled = true
# RR0179: Implement IEquatable\<T>
roslynator_refactoring.implement_iequatable.enabled = true
# RR0180: Inline using static directive
roslynator_refactoring.inline_using_static.enabled = true
# RR0181: Inline constant declaration
roslynator_refactoring.inline_constant.enabled = true
# RR0182: Use StringBuilder instead of concatenation
roslynator_refactoring.use_stringbuilder_instead_of_concatenation.enabled = true
# RR0183: Use List\<T> instead of yield
roslynator_refactoring.use_list_instead_of_yield.enabled = true
# RR0184: Split if
roslynator_refactoring.split_if.enabled = true
# RR0185: Remove instantiation of a local variable
roslynator_refactoring.remove_instantiation_of_local_variable.enabled = true
# RR0186: Change accessibility
roslynator_refactoring.change_accessibility.enabled = true
# RR0187: Wrap constraint clauses
roslynator_refactoring.wrap_constraint_clauses.enabled = true
# RR0188: Convert 'foreach' to 'for' and reverse loop
roslynator_refactoring.convert_foreach_to_for_and_reverse_loop.enabled = true
# RR0189: Invert if
roslynator_refactoring.invert_if.enabled = true
# RR0190: Split if-else
roslynator_refactoring.split_if_else.enabled = true
# RR0191: Use index initialiser
roslynator_refactoring.use_index_initializer.enabled = true
# RR0192: Convert comment to documentation comment
roslynator_refactoring.convert_comment_to_documentation_comment.enabled = true
# RR0193: Convert interpolated string to concatenation
roslynator_refactoring.convert_interpolated_string_to_concatenation.enabled = true
# RR0194: Split local declaration and assignment
roslynator_refactoring.split_local_declaration_and_assignment.enabled = true
# RR0195: Add member to interface
roslynator_refactoring.add_member_to_interface.enabled = true
# RR0196: Merge if with parent if
roslynator_refactoring.merge_if_with_parent_if.enabled = true
# RR0197: Initialise field from constructor
roslynator_refactoring.initialize_field_from_constructor.enabled = true
# RR0198: Inline property
roslynator_refactoring.inline_property.enabled = true
# RR0199: Remove enum member value(s)
roslynator_refactoring.remove_enum_member_value.enabled = true
# RR0200: Uncomment multi-line comment
roslynator_refactoring.uncomment_multiline_comment.enabled = true
# RR0201: Convert interpolated string to 'string.Format'
roslynator_refactoring.convert_interpolated_string_to_string_format.enabled = true
# RR0202: Move unsafe context to containing declaration
roslynator_refactoring.move_unsafe_context_to_containing_declaration.enabled = true
# RR0203: Extract event handler method
roslynator_refactoring.extract_event_handler_method.enabled = true
# RR0204: Generate property for DebuggerDisplay attribute
roslynator_refactoring.generate_property_for_debuggerdisplay_attribute.enabled = true
# RR0205: Add empty line between declarations
roslynator_refactoring.add_empty_line_between_declarations.enabled = true
# RR0206: Use enumerator explicitly
roslynator_refactoring.use_enumerator_explicitly.enabled = true
# RR0207: Sort case labels
roslynator_refactoring.sort_case_labels.enabled = true
# RR0208: Add tag to documentation comment
roslynator_refactoring.add_tag_to_documentation_comment.enabled = true
# RR0209: Remove async/await
roslynator_refactoring.remove_async_await.enabled = true
# RR0210: Implement custom enumerator
roslynator_refactoring.implement_custom_enumerator.enabled = true
# RR0211: Convert statements to if-else
roslynator_refactoring.convert_statements_to_if_else.enabled = true
# RR0212: Copy switch section
roslynator_refactoring.copy_switch_section.enabled = true
# RR0213: Add parameter to interface member
roslynator_refactoring.add_parameter_to_interface_member.enabled = true
# RR0214: Convert 'switch' expression to 'switch' statement
roslynator_refactoring.convert_switch_expression_to_switch_statement.enabled = true
# RR0215: Expand positional constructor
roslynator_refactoring.expand_positional_constructor.enabled = true
# RR0216: Add all properties to initialiser
roslynator_refactoring.add_all_properties_to_initializer.enabled = true
# RR0217: Deconstruct foreach variable
roslynator_refactoring.deconstruct_foreach_variable.enabled = true

# Roslynator Compiler Diagnostic Code Fixes
# https://josefpihrt.github.io/docs/roslynator/fixes

# CS0019: Operator 'operator' cannot be applied to operands of type 'type' and 'type'.
roslynator_compiler_diagnostic_fix.CS0019.enabled = true
# CS0021: Cannot apply indexing with [] to an expression of type 'type'.
roslynator_compiler_diagnostic_fix.CS0021.enabled = true
# CS0023: Operator 'operator' cannot be applied to operand of type 'type'.
roslynator_compiler_diagnostic_fix.CS0023.enabled = true
# CS0029: Cannot implicitly convert type 'type' to 'type'.
roslynator_compiler_diagnostic_fix.CS0029.enabled = true
# CS0030: Cannot convert type 'type' to 'type'.
roslynator_compiler_diagnostic_fix.CS0030.enabled = true
# CS0037: Cannot convert null to 'type' because it is a non-nullable value type.
roslynator_compiler_diagnostic_fix.CS0037.enabled = true
# CS0069: An event in an interface cannot have add or remove accessors.
roslynator_compiler_diagnostic_fix.CS0069.enabled = true
# CS0077: The as operator must be used with a reference type or nullable type ('type' is a non-nullable value type).
roslynator_compiler_diagnostic_fix.CS0077.enabled = true
# CS0080: Constraints are not allowed on non-generic declarations.
roslynator_compiler_diagnostic_fix.CS0080.enabled = true
# CS0101: The namespace 'namespace' already contains a definition for 'type'.
roslynator_compiler_diagnostic_fix.CS0101.enabled = true
# CS0102: The type 'type name' already contains a definition for 'identifier'.
roslynator_compiler_diagnostic_fix.CS0102.enabled = true
# CS0103: The name 'identifier' does not exist in the current context.
roslynator_compiler_diagnostic_fix.CS0103.enabled = true
# CS0106: The modifier 'modifier' is not valid for this item.
roslynator_compiler_diagnostic_fix.CS0106.enabled = true
# CS0107: More than one protection modifier.
roslynator_compiler_diagnostic_fix.CS0107.enabled = true
# CS0108: 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
roslynator_compiler_diagnostic_fix.CS0108.enabled = true
# CS0109: The member 'member' does not hide an inherited member. The new keyword is not required.
roslynator_compiler_diagnostic_fix.CS0109.enabled = true
# CS0112: A static member 'function' cannot be marked as override, virtual or abstract.
roslynator_compiler_diagnostic_fix.CS0112.enabled = true
# CS0114: 'function1' hides inherited member 'function2'. To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.
roslynator_compiler_diagnostic_fix.CS0114.enabled = true
# CS0115: 'function': no suitable method found to override.
roslynator_compiler_diagnostic_fix.CS0115.enabled = true
# CS0119: 'identifier' is a 'construct', which is not valid in the given context.
roslynator_compiler_diagnostic_fix.CS0119.enabled = true
# CS0120: An object reference is required for the nonstatic field, method, or property 'member'.
roslynator_compiler_diagnostic_fix.CS0120.enabled = true
# CS0123: No overload for 'method' matches delegate 'delegate'.
roslynator_compiler_diagnostic_fix.CS0123.enabled = true
# CS0126: An object of a type convertible to 'type' is required.
roslynator_compiler_diagnostic_fix.CS0126.enabled = true
# CS0127: Since 'function' returns void, a return keyword must not be followed by an object expression.
roslynator_compiler_diagnostic_fix.CS0127.enabled = true
# CS0128: A local variable named 'variable' is already defined in this scope.
roslynator_compiler_diagnostic_fix.CS0128.enabled = true
# CS0131: The left-hand side of an assignment must be a variable, property or indexer.
roslynator_compiler_diagnostic_fix.CS0131.enabled = true
# CS0132: 'constructor': a static constructor must be parameterless.
roslynator_compiler_diagnostic_fix.CS0132.enabled = true
# CS0133: The expression being assigned to 'variable' must be constant.
roslynator_compiler_diagnostic_fix.CS0133.enabled = true
# CS0136: A local variable named 'var' cannot be declared in this scope because it would give a different meaning to 'var', which is already used in a 'parent or current/child' scope to denote something else.
roslynator_compiler_diagnostic_fix.CS0136.enabled = true
# CS0139: No enclosing loop out of which to break or continue.
roslynator_compiler_diagnostic_fix.CS0139.enabled = true
# CS0152: The switch statement contains multiple cases with same label value.
roslynator_compiler_diagnostic_fix.CS0152.enabled = true
# CS0161: 'method': not all code paths return a value.
roslynator_compiler_diagnostic_fix.CS0161.enabled = true
# CS0162: Unreachable code detected.
roslynator_compiler_diagnostic_fix.CS0162.enabled = true
# CS0163: Control cannot fall through from one case label ('label') to another.
roslynator_compiler_diagnostic_fix.CS0163.enabled = true
# CS0164: This label has not been referenced.
roslynator_compiler_diagnostic_fix.CS0164.enabled = true
# CS0165: Use of unassigned local variable 'name'.
roslynator_compiler_diagnostic_fix.CS0165.enabled = true
# CS0168: The variable 'var' is declared but never used.
roslynator_compiler_diagnostic_fix.CS0168.enabled = true
# CS0173: Type of conditional expression cannot be determined because there is no implicit conversion between 'class1' and 'class2'.
roslynator_compiler_diagnostic_fix.CS0173.enabled = true
# CS0177: The out parameter 'parameter' must be assigned to before control leaves the current method.
roslynator_compiler_diagnostic_fix.CS0177.enabled = true
# CS0191: A readonly field cannot be assigned to (except in a constructor or a variable initialiser).
roslynator_compiler_diagnostic_fix.CS0191.enabled = true
# CS0192: Readonly field 'name' cannot be used as ref or out value (except in a constructor).
roslynator_compiler_diagnostic_fix.CS0192.enabled = true
# CS0201: Only assignment, call, increment, decrement, and new object expressions can be used as a statement.
roslynator_compiler_diagnostic_fix.CS0201.enabled = true
# CS0214: Pointers and fixed size buffers may only be used in an unsafe context.
roslynator_compiler_diagnostic_fix.CS0214.enabled = true
# CS0216: The operator 'operator' requires a matching operator 'missing_operator' to also be defined.
roslynator_compiler_diagnostic_fix.CS0216.enabled = true
# CS0219: The variable 'variable' is assigned but its value is never used.
roslynator_compiler_diagnostic_fix.CS0219.enabled = true
# CS0221: Constant value 'value' cannot be converted to a 'type' (use 'unchecked' syntax to override).
roslynator_compiler_diagnostic_fix.CS0221.enabled = true
# CS0225: The params parameter must be a single dimensional array.
roslynator_compiler_diagnostic_fix.CS0225.enabled = true
# CS0238: 'identifier' cannot be sealed because it is not an override.
roslynator_compiler_diagnostic_fix.CS0238.enabled = true
# CS0246: The type or namespace name 'type/namespace' could not be found (are you missing a using directive or an assembly reference?).
roslynator_compiler_diagnostic_fix.CS0246.enabled = true
# CS0260: Missing partial modifier on declaration of type 'type'; another partial declaration of this type exists.
roslynator_compiler_diagnostic_fix.CS0260.enabled = true
# CS0262: Partial declarations of 'type' have conflicting accessibility modifiers.
roslynator_compiler_diagnostic_fix.CS0262.enabled = true
# CS0266: Cannot implicitly convert type 'type1' to 'type2'. An explicit conversion exists (are you missing a cast?).
roslynator_compiler_diagnostic_fix.CS0266.enabled = true
# CS0267: The partial modifier can only appear immediately before 'class', 'struct', or 'interface'.
roslynator_compiler_diagnostic_fix.CS0267.enabled = true
# CS0272: The property or indexer 'name' cannot be used in this context because the set accessor is inaccessible.
roslynator_compiler_diagnostic_fix.CS0272.enabled = true
# CS0275: 'accessor': accessibility modifiers may not be used on accessors in an interface.
roslynator_compiler_diagnostic_fix.CS0275.enabled = true
# CS0305: Using the generic type 'generic type' requires 'number' type arguments.
roslynator_compiler_diagnostic_fix.CS0305.enabled = true
# CS0401: The new() constraint must be the last constraint specified.
roslynator_compiler_diagnostic_fix.CS0401.enabled = true
# CS0403: Cannot convert null to type parameter 'name' because it could be a non-nullable value type. Consider using default('T') instead.
roslynator_compiler_diagnostic_fix.CS0403.enabled = true
# CS0405: Duplicate constraint 'constraint' for type parameter 'type parameter'.
roslynator_compiler_diagnostic_fix.CS0405.enabled = true
# CS0407: 'return-type method' has the wrong return type.
roslynator_compiler_diagnostic_fix.CS0407.enabled = true
# CS0409: A constraint clause has already been specified for type parameter 'type parameter'. All of the constraints for a type parameter must be specified in a single where clause.
roslynator_compiler_diagnostic_fix.CS0409.enabled = true
# CS0428: Cannot convert method group 'identifier' to non-delegate type 'type'. Did you intend to invoke the method?
roslynator_compiler_diagnostic_fix.CS0428.enabled = true
# CS0441: 'class': a class cannot be both static and sealed.
roslynator_compiler_diagnostic_fix.CS0441.enabled = true
# CS0442: 'property': abstract properties cannot have private accessors.
roslynator_compiler_diagnostic_fix.CS0442.enabled = true
# CS0449: The 'class' or 'struct' constraint must come before any other constraints.
roslynator_compiler_diagnostic_fix.CS0449.enabled = true
# CS0450: 'type parameter name': cannot specify both a constraint class and the 'class' or 'struct' constraint.
roslynator_compiler_diagnostic_fix.CS0450.enabled = true
# CS0451: The 'new()' constraint cannot be used with the 'struct' constraint.
roslynator_compiler_diagnostic_fix.CS0451.enabled = true
# CS0472: The result of the expression is always 'value1' since a value of type 'value2' is never equal to 'null' of type 'value3'.
roslynator_compiler_diagnostic_fix.CS0472.enabled = true
# CS0500: 'class member' cannot declare a body because it is marked abstract.
roslynator_compiler_diagnostic_fix.CS0500.enabled = true
# CS0501: 'member function' must declare a body because it is not marked abstract, extern, or partial.
roslynator_compiler_diagnostic_fix.CS0501.enabled = true
# CS0507: 'function1': cannot change access modifiers when overriding 'access' inherited member 'function2'.
roslynator_compiler_diagnostic_fix.CS0507.enabled = true
# CS0508: 'type1': return type must be 'type2' to match overridden member 'member name'.
roslynator_compiler_diagnostic_fix.CS0508.enabled = true
# CS0513 'function' is abstract but it is contained in nonabstract class 'class'.
roslynator_compiler_diagnostic_fix.CS0513.enabled = true
# CS0515: 'function': access modifiers are not allowed on static constructors.
roslynator_compiler_diagnostic_fix.CS0515.enabled = true
# CS0524: 'identifier': interfaces cannot declare types.
roslynator_compiler_diagnostic_fix.CS0524.enabled = true
# CS0525: Interfaces cannot contain fields.
roslynator_compiler_diagnostic_fix.CS0525.enabled = true
# CS0527: Type 'type' in interface list is not an interface.
roslynator_compiler_diagnostic_fix.CS0527.enabled = true
# CS0531: 'member': interface members cannot have a definition.
roslynator_compiler_diagnostic_fix.CS0531.enabled = true
# CS0539: 'member' in explicit interface declaration is not a member of interface
roslynator_compiler_diagnostic_fix.CS0539.enabled = true
# CS0541: 'declaration': explicit interface declaration can only be declared in a class or struct.
roslynator_compiler_diagnostic_fix.CS0541.enabled = true
# CS0549: New virtual member in sealed class.
roslynator_compiler_diagnostic_fix.CS0549.enabled = true
# CS0558: User-defined operator 'operator' must be declared static and public.
roslynator_compiler_diagnostic_fix.CS0558.enabled = true
# CS0567: Interfaces cannot contain operators.
roslynator_compiler_diagnostic_fix.CS0567.enabled = true
# CS0568: Structs cannot contain explicit parameterless constructors.
roslynator_compiler_diagnostic_fix.CS0568.enabled = true
# CS0573: 'field declaration': cannot have instance field initialisers in structs.
roslynator_compiler_diagnostic_fix.CS0573.enabled = true
# CS0574: Name of destructor must match name of class.
roslynator_compiler_diagnostic_fix.CS0574.enabled = true
# CS0575: Only class types can contain destructors.
roslynator_compiler_diagnostic_fix.CS0575.enabled = true
# CS0579: Duplicate 'attribute' attribute.
roslynator_compiler_diagnostic_fix.CS0579.enabled = true
# CS0592: Attribute 'attribute' is not valid on this declaration type. It is valid on 'type' declarations only.
roslynator_compiler_diagnostic_fix.CS0592.enabled = true
# CS0621: 'member': virtual or abstract members cannot be private.
roslynator_compiler_diagnostic_fix.CS0621.enabled = true
# CS0628: member' : new protected member declared in sealed class.
roslynator_compiler_diagnostic_fix.CS0628.enabled = true
# CS0659: 'class' overrides Object.Equals(object o) but does not override Object.GetHashCode().
roslynator_compiler_diagnostic_fix.CS0659.enabled = true
# CS0660: 'class' defines operator == or operator != but does not override Object.Equals(object o).
roslynator_compiler_diagnostic_fix.CS0660.enabled = true
# CS0661: 'class' defines operator == or operator != but does not override Object.GetHashCode().
roslynator_compiler_diagnostic_fix.CS0661.enabled = true
# CS0678: 'variable': a field can not be both volatile and readonly.
roslynator_compiler_diagnostic_fix.CS0678.enabled = true
# CS0693: Type parameter 'type parameter' has the same name as the type parameter from outer type 'type'.
roslynator_compiler_diagnostic_fix.CS0693.enabled = true
# CS0708: 'field': cannot declare instance members in a static class.
roslynator_compiler_diagnostic_fix.CS0708.enabled = true
# CS0710: Static classes cannot have instance constructors
roslynator_compiler_diagnostic_fix.CS0710.enabled = true
# CS0713: Static class 'static type' cannot derive from type 'type'. Static classes must derive from object.
roslynator_compiler_diagnostic_fix.CS0713.enabled = true
# CS0714: Static class cannot implement interfaces.
roslynator_compiler_diagnostic_fix.CS0714.enabled = true
# CS0718: 'type': static types cannot be used as type arguments.
roslynator_compiler_diagnostic_fix.CS0718.enabled = true
# CS0750: A partial method cannot have access modifiers or the virtual, abstract, override, new, sealed, or extern modifiers.
roslynator_compiler_diagnostic_fix.CS0750.enabled = true
# CS0751: A partial method must be declared in a partial class or partial struct.
roslynator_compiler_diagnostic_fix.CS0751.enabled = true
# CS0753: Only methods, classes, structs, or interfaces may be partial.
roslynator_compiler_diagnostic_fix.CS0753.enabled = true
# CS0756: A partial method may not have multiple defining declarations.
roslynator_compiler_diagnostic_fix.CS0756.enabled = true
# CS0759: No defining declaration found for implementing declaration of partial method 'method'.
roslynator_compiler_diagnostic_fix.CS0759.enabled = true
# CS0766: Partial methods must have a void return type.
roslynator_compiler_diagnostic_fix.CS0766.enabled = true
# CS0815: Cannot assign 'expression' to an implicitly typed local.
roslynator_compiler_diagnostic_fix.CS0815.enabled = true
# CS0819: Implicitly typed locals cannot have multiple declarators.
roslynator_compiler_diagnostic_fix.CS0819.enabled = true
# CS0822: Implicitly typed locals cannot be const.
roslynator_compiler_diagnostic_fix.CS0822.enabled = true
# CS1002: ; expected.
roslynator_compiler_diagnostic_fix.CS1002.enabled = true
# CS1003: Syntax error, 'char' expected.
roslynator_compiler_diagnostic_fix.CS1003.enabled = true
# CS1004: Duplicate 'modifier' modifier.
roslynator_compiler_diagnostic_fix.CS1004.enabled = true
# CS1012: Too many characters in character literal.
roslynator_compiler_diagnostic_fix.CS1012.enabled = true
# CS1023: Embedded statement cannot be a declaration or labeled statement.
roslynator_compiler_diagnostic_fix.CS1023.enabled = true
# CS1031: Type expected.
roslynator_compiler_diagnostic_fix.CS1031.enabled = true
# CS1057: 'member': static classes cannot contain protected members.
roslynator_compiler_diagnostic_fix.CS1057.enabled = true
# CS1061: 'type' does not contain a definition for 'member' and no extension method 'name' accepting a first argument of type 'type' could be found (are you missing a using directive or an assembly reference?).
roslynator_compiler_diagnostic_fix.CS1061.enabled = true
# CS1100: Method 'name' has a parameter modifier 'this' which is not on the first parameter.
roslynator_compiler_diagnostic_fix.CS1100.enabled = true
# CS1105: Extension methods must be static.
roslynator_compiler_diagnostic_fix.CS1105.enabled = true
# CS1106: Extension methods must be defined in a non-generic static class.
roslynator_compiler_diagnostic_fix.CS1106.enabled = true
# CS1503: Argument 'number' cannot convert from 'type1' to 'type2'.
roslynator_compiler_diagnostic_fix.CS1503.enabled = true
# CS1522: Empty switch block.
roslynator_compiler_diagnostic_fix.CS1522.enabled = true
# CS1526: A new expression requires (), [], or {} after type.
roslynator_compiler_diagnostic_fix.CS1526.enabled = true
# CS1527: Elements defined in a namespace cannot be explicitly declared as private, protected, protected internal or private protected.
roslynator_compiler_diagnostic_fix.CS1527.enabled = true
# CS1591: Missing XML comment for publicly visible type or member 'name'.
roslynator_compiler_diagnostic_fix.CS1591.enabled = true
# CS1597: Semicolon after method or accessor block is not valid.
roslynator_compiler_diagnostic_fix.CS1597.enabled = true
# CS1609: Modifiers cannot be placed on event accessor declarations.
roslynator_compiler_diagnostic_fix.CS1609.enabled = true
# CS1615: Argument 'number' should not be passed with the 'keyword' keyword.
roslynator_compiler_diagnostic_fix.CS1615.enabled = true
# CS1620: Argument 'number' must be passed with the 'keyword' keyword.
roslynator_compiler_diagnostic_fix.CS1620.enabled = true
# CS1621: The yield statement cannot be used inside an anonymous method or lambda expression.
roslynator_compiler_diagnostic_fix.CS1621.enabled = true
# CS1622: Cannot return a value from an iterator. Use the yield return statement to return a value, or yield break to end the iteration.
roslynator_compiler_diagnostic_fix.CS1622.enabled = true
# CS1623: Iterators cannot have ref or out parameters.
roslynator_compiler_diagnostic_fix.CS1623.enabled = true
# CS1624: The body of 'identifier' cannot be an iterator block because 'type' is not an iterator interface type.
roslynator_compiler_diagnostic_fix.CS1624.enabled = true
# CS1643: Not all code paths return a value in method of type 'type'.
roslynator_compiler_diagnostic_fix.CS1643.enabled = true
# CS1674: 'T': type used in a using statement must be implicitly convertible to 'System.IDisposable'.
roslynator_compiler_diagnostic_fix.CS1674.enabled = true
# CS1689: Attribute 'attribute' is only valid on methods or attribute classes.
roslynator_compiler_diagnostic_fix.CS1689.enabled = true
# CS1715: 'type1': type must be 'type2' to match overridden member 'member'.
roslynator_compiler_diagnostic_fix.CS1715.enabled = true
# CS1717: Assignment made to same variable; did you mean to assign something else?
roslynator_compiler_diagnostic_fix.CS1717.enabled = true
# CS1722: Base class 'class' must come before any interfaces.
roslynator_compiler_diagnostic_fix.CS1722.enabled = true
# CS1737: Optional parameters must appear after all required parameters.
roslynator_compiler_diagnostic_fix.CS1737.enabled = true
# CS1741: A ref or out parameter cannot have a default value.
roslynator_compiler_diagnostic_fix.CS1741.enabled = true
# CS1743: Cannot specify a default value for the 'this' parameter.
roslynator_compiler_diagnostic_fix.CS1743.enabled = true
# CS1750: A value of type 'type1' cannot be used as a default parameter because there are no standard conversions to type 'type2.
roslynator_compiler_diagnostic_fix.CS1750.enabled = true
# CS1751: Cannot specify a default value for a parameter array.
roslynator_compiler_diagnostic_fix.CS1751.enabled = true
# CS1955: Non-invocable member 'name' cannot be used like a method.
roslynator_compiler_diagnostic_fix.CS1955.enabled = true
# CS1983: The return type of an async method must be void, Task or Task<T>.
roslynator_compiler_diagnostic_fix.CS1983.enabled = true
# CS1988: Async methods cannot have ref or out parameters.
roslynator_compiler_diagnostic_fix.CS1988.enabled = true
# CS1994: The 'async' modifier can only be used in methods that have a body.
roslynator_compiler_diagnostic_fix.CS1994.enabled = true
# CS1997: Since 'RemoveReturnKeywordOrReturnExpression.FooAsync()' is an async method that returns 'Task', a return keyword must not be followed by an object expression. Did you intend to return 'Task<T>>'?
roslynator_compiler_diagnostic_fix.CS1997.enabled = true
# CS3000: Methods with variable arguments are not CLS-compliant.
roslynator_compiler_diagnostic_fix.CS3000.enabled = true
# CS3001: Argument type 'type' is not CLS-compliant.
roslynator_compiler_diagnostic_fix.CS3001.enabled = true
# CS3002: Return type of 'method' is not CLS-compliant.
roslynator_compiler_diagnostic_fix.CS3002.enabled = true
# CS3003: Type of 'variable' is not CLS-compliant.
roslynator_compiler_diagnostic_fix.CS3003.enabled = true
# CS3005: Identifier 'identifier' differing only in case is not CLS-compliant.
roslynator_compiler_diagnostic_fix.CS3005.enabled = true
# CS3006: Overloaded method 'method' differing only in ref or out, or in array rank, is not CLS-compliant.
roslynator_compiler_diagnostic_fix.CS3006.enabled = true
# CS3007: Overloaded method 'method' differing only by unnamed array types is not CLS-compliant.
roslynator_compiler_diagnostic_fix.CS3007.enabled = true
# CS3008: Identifier 'identifier' is not CLS-compliant.
roslynator_compiler_diagnostic_fix.CS3008.enabled = true
# CS3009: Base type 'type' is not CLS-compliant.
roslynator_compiler_diagnostic_fix.CS3009.enabled = true
# CS3016: Arrays as attribute arguments is not CLS-compliant.
roslynator_compiler_diagnostic_fix.CS3016.enabled = true
# CS3024: Constraint type 'type' is not CLS-compliant.
roslynator_compiler_diagnostic_fix.CS3024.enabled = true
# CS3027: 'type_1' is not CLS-compliant because base interface 'type_2' is not CLS-compliant.
roslynator_compiler_diagnostic_fix.CS3027.enabled = true
# CS7036: There is no argument given that corresponds to the required formal parameter 'parameter' of 'member'.
roslynator_compiler_diagnostic_fix.CS7036.enabled = true
# CS8050: Only auto-implemented properties can have initialisers.
roslynator_compiler_diagnostic_fix.CS8050.enabled = true
# CS8070: Control cannot fall out of switch from final case label ('default').
roslynator_compiler_diagnostic_fix.CS8070.enabled = true
# CS8112: 'function' is a local function and must therefore always have a body.
roslynator_compiler_diagnostic_fix.CS8112.enabled = true
# CS8139: Cannot change tuple element names when overriding inherited member.
roslynator_compiler_diagnostic_fix.CS8139.enabled = true
# CS8340: Instance fields of read-only structs must be read-only.
roslynator_compiler_diagnostic_fix.CS8340.enabled = true
# CS8403: Method with an iterator block must be 'async' to return 'IAsyncEnumerable<T>'.
roslynator_compiler_diagnostic_fix.CS8403.enabled = true
# CS8600: Converting null literal or possible null value to non-nullable type.
roslynator_compiler_diagnostic_fix.CS8600.enabled = true
# CS8602: Dereference of a possibly null reference.
roslynator_compiler_diagnostic_fix.CS8602.enabled = true
# CS8604: Possible null reference argument for parameter.
roslynator_compiler_diagnostic_fix.CS8604.enabled = true
# CS8610: Nullability of reference types in type of parameter doesn't match overridden member.
roslynator_compiler_diagnostic_fix.CS8610.enabled = true
# CS8618: Non-nullable member is uninitialised. Consider declaring the member as nullable.
roslynator_compiler_diagnostic_fix.CS8618.enabled = true
# CS8625: Cannot convert null literal to non-nullable reference type.
roslynator_compiler_diagnostic_fix.CS8625.enabled = true
# CS8632: The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
roslynator_compiler_diagnostic_fix.CS8632.enabled = true
# CS8765: Nullability of type of parameter doesn't match overridden member.
roslynator_compiler_diagnostic_fix.CS8765.enabled = true
# CS8767: Nullability of reference types in type of parameter doesn't match implicitly implemented member.
roslynator_compiler_diagnostic_fix.CS8767.enabled = true

# Miscellaneous Roslynator options provided by both Roslynator packages.

# ROS0002: Analyser option is obsolete
# Obsolete analyser options should not be used.
# Please keep this rule's severity above suggestion to actively avoid obsolete analyser options.
dotnet_diagnostic.ROS0002.severity = warning
# ROS0003: An analyser is enabled but required option is not set.
# Required options for enabled analysers should always be set.
# Please keep this rule's severity above suggestion to actively avoid improperly configured analysers.
dotnet_diagnostic.ROS0003.severity = warning
# Disable code analysis to detect Unity-specific code
roslynator_unity_code_analysis.enabled = false

# ! ErrorProne.NET does not yet have a v1.0+ release & unfinished documentation, making this analyser difficult to understand.
# This analyser will not be used.
# https://github.com/SergeyTeplyakov/ErrorProne.NET

# ! Gu.Analyzers has unfinished documentation, making this analyser difficult to understand.
# This analyser will not be used.
# https://github.com/GuOrg/Gu.Analyzers

# Meziantou.Analyzer
# https://www.nuget.org/packages/Meziantou.Analyzer/
# https://github.com/meziantou/Meziantou.Analyzer/tree/main/docs
# https://www.nuget.org/packages/Meziantou.Analyzer.Annotations/
# https://github.com/meziantou/Meziantou.Analyzer/tree/main/src/Meziantou.Analyzer.Annotations

# MA0001: StringComparison is missing
# CA1307 should control StringComparison preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0001.severity = none
# Please see CA1307 instead.

# MA0002: IEqualityComparer<string> or IComparer<string> is missing
# Default rules for various string manipulation methods yields inconsistent case & culture.
# Please keep this rule's severity above suggestion to actively encourage explicitly specifying how strings should be compared.
dotnet_diagnostic.MA0002.severity = warning
# Include the rules from code generated by query operators (e.g. from item in collection orderby item select item)
MA0002.exclude_query_operator_syntaxes = false
# MA0003: Add parameter name to improve readability
# You should name the parameter when you call a method with a literal value.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.MA0003.severity = suggestion
# Only consider methods with 1 or more parameters
MA0003.minimum_method_arguments = 1
# MA0004: Use Task.ConfigureAwait
# VSTHRD111 should control ConfigureAwait preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0004.severity = none
# (default) Try to detect the current context and report only if it considers ConfigureAwait is needed
MA0004.report = DetectContext
# Please see VSTHRD111 instead.

# MA0005: Use Array.Empty<T>()
# CA1825 should control Array.Empty<T>() over new T[0] preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0005.severity = none
# Please see CA1825 instead.

# MA0006: Use String.Equals instead of equality operator
# You should use string.Equals instead of == or !=, to make string comparison rules explicit.
# Please keep this rule's severity above suggestion to actively encourage explicitly specifying how strings should be compared.
dotnet_diagnostic.MA0006.severity = warning
# MA0007: Add a comma after the last value
# Trailing commas are typically invalid, and thus should be avoided.
# Please keep this rule's severity disabled to avoid always expecting being able to place a trailing comma.
dotnet_diagnostic.MA0007.severity = none
# MA0008: Add StructLayoutAttribute
# Using [StructLayout] optimises the struct for performance.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0008.severity = warning
# MA0009: Add regex evaluation timeout
# Certain regexes are vulnerable to certain inputs taking abnormally long to process.
# Please keep this rule's severity above suggestion to actively avoid using too many resources to process regexes.
dotnet_diagnostic.MA0009.severity = warning
# MA0010: Mark attributes with AttributeUsageAttribute
# CA1018 should control [AttributeUsage] preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0010.severity = none
# Please see CA1018 instead.

# MA0011: IFormatProvider is missing
# CA1304 should control missing CultureInfo preferences.
# CA1305 should control missing IFormatProvider preferences.
# CA1311 should control missing CultureInfo for ToUpper/ToLower preferences.
# Please keep this rule's severity above suggestion to actively encourage explicitly specifying how data should be converted to string.
dotnet_diagnostic.MA0011.severity = none
# Include ToString methods.
MA0011.exclude_tostring_methods = false
# Report Nullable<T>.ToString when T is culture-sensitive
MA0011.consider_nullable_types = true
# Please see CA1304 for missing CultureInfo preferences.
# Please see CA1305 for missing IFormatProvider preferences.
# Please see CA1311 for missing CultureInfo for ToUpper/ToLower preferences.

# MA0012: Do not raise reserved exception type
# CA2201 should control raising reserved exception type preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0012.severity = none
# Please see CA2201 instead.

# MA0013: Types should not extend System.ApplicationException
# System.Exception should be extended, not System.ApplicationException.
# Please keep this rule's severity above suggestion to actively avoid extending the wrong exception type.
dotnet_diagnostic.MA0013.severity = warning
# MA0014: Do not raise System.ApplicationException type
# CA2201 should control throwing general or reserved exceptions preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0014.severity = none
# Please see CA2201 instead.

# MA0015: Specify the parameter name in ArgumentException
# CA2208 should control calling argument exceptions correctly preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0015.severity = none
# Please see CA2208 instead.

# MA0016: Prefer using collection abstraction instead of implementation
# CA1002 should control exposing generic list preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0016.severity = none
# Please see CA1002 instead.

# MA0017: Abstract types should not have public or internal constructors
# S3442 should control abstract types with public/internal constructor preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0017.severity = none
# Please see S3442 instead.

# MA0018: Do not declare static members on generic types (deprecated; use CA1000 instead)
# This rule is deprecated.
# Please keep this rule's severity disabled to avoid using deprecated rules.
dotnet_diagnostic.MA0018.severity = none
# Please see CA1000 instead.

# MA0019: Use EventArgs.Empty
# RCS1204 should control EventArgs.Empty preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0019.severity = none
# Please see RCS1204 instead.

# MA0020: Use direct methods instead of LINQ methods
# LINQ methods are less performant than direct methods.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0020.severity = warning
# Flag violations even when arguments need to be converted by default.
MA0020.report_when_conversion_needed = true
# MA0021: Use StringComparer.GetHashCode instead of string.GetHashCode
# string.GetHashCode does not explicitly specify how strings should be compared.
# Please keep this rule's severity above suggestion to actively encourage explicitly specifying how strings should be compared.
dotnet_diagnostic.MA0021.severity = warning
# MA0022: Return Task.FromResult instead of returning null
# VSTHRD114 should control returning Task.FromResult instead of null preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0022.severity = none
# Please see VSTHRD114 instead.

# MA0023: Add RegexOptions.ExplicitCapture
# Using named groups clarifies what is to be captured. It also makes the regex more performant, as unnamed groups will not be captured needlessly.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0023.severity = warning
# MA0024: Use an explicit StringComparer when possible
# Using an explicit StringComparer specifies how strings should be compared.
# Please keep this rule's severity above suggestion to actively encourage explicitly specifying how strings should be compared.
dotnet_diagnostic.MA0024.severity = warning
# MA0025: Implement the functionality instead of throwing NotImplementedException
# NotImplementedException should not be left behind.
# Please keep this rule's severity above silent to actively encourage implementing functionality.
dotnet_diagnostic.MA0025.severity = suggestion
# MA0026: Fix TODO comment
# TODO comments should not be left behind.
# Please keep this rule's severity above silent to actively encourage resolving TODO comments.
dotnet_diagnostic.MA0026.severity = suggestion
# MA0027: Prefer rethrowing an exception implicitly
# CA2200 should control rethrowing exception preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0027.severity = none
# Please see CA2200 instead.

# MA0028: Optimise StringBuilder usage
# Optimising StringBuilder usage yields more performant code.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0028.severity = warning
# MA0029: Combine LINQ methods
# Combine LINQ methods when possible for more performant code.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0029.severity = warning
# MA0030: Remove useless OrderBy call
# Remove duplicate OrderBy methods, or replace the second OrderBy with ThenBy.
# Please keep this rule's severity above suggestion to actively avoid redundant code.
dotnet_diagnostic.MA0030.severity = warning
# MA0031: Optimise Enumerable.Count() usage
# CA1827 should control optimising Count() with Any() preferences.
# CA1829 should control optimising Count() with Length/Count preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0031.severity = none
# Please see CA1827 & CA1829 instead.

# MA0032: Use an overload with a CancellationToken argument
# You should pass a CancellationToken when calling a method if there is an overload of the method that supports it.
# Please keep this rule's severity above silent to actively encourage propagating cancellation.
dotnet_diagnostic.MA0032.severity = suggestion
# MA0033: Do not tag instance fields with ThreadStaticAttribute
# CA2259 should control [ThreadStatic] on instance field preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0033.severity = none
# Please see CA2259 instead.

# MA0035: Do not use dangerous threading methods
# Use safer threading methods.
# Please keep this rule's severity above suggestion to actively encourage using safer threading methods.
dotnet_diagnostic.MA0035.severity = warning
# MA0036: Make class static
# If the class only contains static or const members, you should consider making the class static.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.MA0036.severity = suggestion
# MA0037: Remove empty statement
# RCS1259 should control empty statement preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0037.severity = none
# Please see RCS1259 instead.

# MA0038: Make method static (deprecated, use CA1822 instead)
# This rule is deprecated.
# Please keep this rule's severity disabled to avoid using deprecated rules.
dotnet_diagnostic.MA0038.severity = none
# Please see CA1822 instead.

# MA0039: Do not write your own certificate validation method
# You should not write methods to validate certificates. Those methods are often used to bypass validation altogether, which is bad for security.
# Please keep this rule's severity above suggestion to actively avoid writing your own certificate validation methods.
dotnet_diagnostic.MA0039.severity = warning
# MA0040: Forward the CancellationToken parameter to methods that take one
# CA2016 should control CancellationToken preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0040.severity = none
# Please see CA2016 instead.

# MA0041: Make property static (deprecated, use CA1822 instead)
# This rule is deprecated.
# Please keep this rule's severity disabled to avoid using deprecated rules.
dotnet_diagnostic.MA0041.severity = none
# Please see CA1822 instead.

# MA0042: Do not use blocking calls in an async method
# VSTHRD103 & CA1849 should control using async overloads when available preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0042.severity = none
# Please see VSTHRD103 & CA1849 instead.

# MA0043: Use nameof operator in ArgumentException
# CA1507 should control nameof preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0043.severity = none
# Please see CA1507 instead.

# MA0044: Remove useless ToString call
# RCS1097 should control useless ToString call preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0044.severity = none
# Please see RCS1097 instead.

# MA0045: Do not use blocking calls in a sync method (need to make calling method async)
# You should replace blocking calls, such as Wait or Result, with an async call using await. The calling method will need to become async.
# Please keep this rule's severity above suggestion to actively avoid deadlocks.
dotnet_diagnostic.MA0045.severity = warning
# MA0046: Use EventHandler<T> to declare events
# CA1003 should control event handler signature preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0046.severity = none
# Please see CA1003 instead.

# MA0047: Declare types in namespaces
# CA1050 should control global namespace usage preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0047.severity = none
# Please see CA1050 instead.

# MA0048: File name must match type name
# The name of the class must match to name of the file.
# Please keep this rule's severity above suggestion to actively encourage organised types & files.
dotnet_diagnostic.MA0048.severity = warning
# MA0049: Type name should not match containing namespace
# For usability, you should not name a type as the namespace. This would be harder to use it in the code.
# Please keep this rule's severity above suggestion to actively avoid type names matching containing namespace.
dotnet_diagnostic.MA0049.severity = warning
# MA0050: Validate arguments correctly in iterator methods
# When a method contains a yield statement, the evaluation of the method is deferred until the first enumeration.
# This rule ensures that arguments are validated immediately, while execution of the rest of the method is still deferred.
# Please keep this rule's severity above suggestion to actively encourage validating arguments correctly in iterator methods.
dotnet_diagnostic.MA0050.severity = warning
# MA0051: Method is too long
# CA1505 should control excessively complex method preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0051.severity = none
# Allow up to 60 LOCs in a method.
MA0051.maximum_lines_per_method = 60
# Allow up to 40 statements in a method.
MA0051.maximum_statements_per_method = 40
# Do not skip local functions when counting statements.
MA0051.skip_local_functions = false
# Please see CA1505 instead.

# MA0052: Replace constant Enum.ToString with nameof
# You should use nameof instead of calling ToString on a constant enumeration value. This is mainly for performance reasons.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0052.severity = warning
# MA0053: Make class sealed
# Classes should be sealed when there is no inheritor.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0053.severity = warning
# Flag public, not just internal.
MA0053.public_class_should_be_sealed = true
# Do not flag classes with virtual members.
MA0053.class_with_virtual_member_should_be_sealed = false
# Do not flag exceptions.
MA0053.exceptions_should_be_sealed = false
# MA0054: Embed the caught exception as innerException
# You should include the original exception when throwing a new exception from a catch block.
# Providing the original exception could make it easier to debug.
# Please keep this rule's severity above suggestion to actively encourage easier to debug code.
dotnet_diagnostic.MA0054.severity = warning
# MA0055: Do not use finaliser
# Since .NET 2.0, you should better encapsulate the native resources into a SafeHandle.
# Please keep this rule's severity above suggestion to actively encourage safer methods to release native resources.
dotnet_diagnostic.MA0055.severity = warning
# MA0056: Do not call overridable members in constructor
# CA2214 should control overridable methods being called in constructors preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0056.severity = none
# Please see CA2214 instead.

# MA0057: Class name should end with 'Attribute'
# MA0058: Class name should end with 'Exception'
# MA0059: Class name should end with 'EventArgs'
# CA1710 should control identifier suffix preferences.
# Please keep these rules' severities disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0057.severity = none
dotnet_diagnostic.MA0059.severity = none
dotnet_diagnostic.MA0058.severity = none
# Please see CA1710 instead.

# MA0060: The value returned by Stream.Read/Stream.ReadAsync is not used
# S2674 should control unused Stream.Read/Stream.ReadAsync return value preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0060.severity = none
# Please see S2674 instead.

# MA0061: Method overrides should not change default values
# Specifying default values is useless and confusing.
# Please keep this rule's severity above suggestion to actively avoid unintended behaviour.
dotnet_diagnostic.MA0061.severity = warning
# MA0062: Non-flags enums should not be marked with "FlagsAttribute".
# CA2217 should control misusing [Flags] preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0062.severity = none
# Allow an 'All' flag.
MA0062.allow_all_bits_set_value = true
# Please see CA2217 instead.

# MA0063: Use Where before OrderBy
# RCS1077 should control Where before OrderBy preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0063.severity = none
# Please see RCS1077 instead.

# MA0064: Avoid locking on publicly accessible instance
# CA2002 should control weak lock preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0064.severity = none
# Please see CA2002 instead.

# MA0065: Default ValueType.Equals or HashCode is used for struct equality
# The default implementation of Equals and GetHashCode is not performant. You should override those methods in the type.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0065.severity = warning
# MA0066: Hash table unfriendly type is used in a hash table
# The default implementation of Equals and GetHashCode is not performant. Those methods are used by HashSet, Dictionary, and similar types.
# You should override them in the type or use a custom IEqualityComparer<T>.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0066.severity = warning
# MA0067: Use Guid.Empty
# S4581 should control Guid.Empty preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0067.severity = none
# Please see S4581 instead.

# MA0068: Invalid parameter name for nullable attribute
# Valid parameter names should be used for nullable attributes.
# Please keep this rule's severity above suggestion to actively encourage valid parameter names for nullable attributes.
dotnet_diagnostic.MA0068.severity = warning
# MA0069: Non-constant static fields should not be visible
# CA2211 should control non-constant static field visibility preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0069.severity = none
# Please see CA2211 instead.

# MA0070: Obsolete attributes should include explanations
# CA1041 should control [Obsolete] explanation preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0070.severity = none
# Please see CA1041 instead.

# MA0071: Avoid using redundant else
# Redundant else statements can be simplified into more readable code.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.MA0071.severity = suggestion
# MA0072: Do not throw from a finally block
# CA2219 should control throwing from finally block preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0072.severity = none
# Please see CA2219 instead.

# MA0073: Avoid comparison with bool constant
# IDE0100 should control comparison with bool constant preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0073.severity = none
# Please see IDE0100 instead.

# MA0074: Avoid implicit culture-sensitive methods
# CA1310 should control implicit culture-sensitive method preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0074.severity = none
# Please see CA1310 instead.

# MA0075: Do not use implicit culture-sensitive ToString
# An implicit call to obj.ToString() may differ based on the current culture.
# Please keep this rule's severity above suggestion to actively avoid unintended behaviour.
dotnet_diagnostic.MA0075.severity = warning
# Include ToString methods.
MA0075.exclude_tostring_methods = false
# Report Nullable<T>.ToString when T is culture-sensitive
MA0075.consider_nullable_types = true
# MA0076: Do not use implicit culture-sensitive ToString in interpolated strings
# Culture-sensitive ToString in interpolated strings can lead to inconsistent behaviour.
# Please keep this rule's severity above suggestion to actively avoid unintended behaviour.
dotnet_diagnostic.MA0076.severity = warning
# Include ToString methods.
MA0076.exclude_tostring_methods = false
# Report Nullable<T>.ToString when T is culture-sensitive
MA0076.consider_nullable_types = true
# MA0077: A class that provides Equals(T) should implement IEquatable<T>
# An Equals(T) method implies IEquatable<T> should be implemented.
# Please keep this rule's severity above suggestion to actively encourage properly implementing equality.
dotnet_diagnostic.MA0077.severity = warning
# MA0078: Use 'Cast' instead of 'Select' to cast
# Cast is more performant than Select.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0078.severity = warning
# MA0079: Forward the CancellationToken using .WithCancellation()
# CancellationTokens should be forwarded to propagate cancellation.
# Please keep this rule's severity above silent to actively encourage propagating operation cancellation notifications.
dotnet_diagnostic.MA0079.severity = suggestion
# MA0080: Use a cancellation token using .WithCancellation()
# CancellationTokens should be forwarded to propagate cancellation.
# Please keep this rule's severity above silent to actively encourage propagating operation cancellation notifications.
dotnet_diagnostic.MA0080.severity = suggestion
# MA0081: Method overrides should not omit params keyword
# RCS1193 should control params keyword consistency preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0081.severity = none
# Please see RCS1193 instead.

# MA0082: NaN should not be used in comparisons
# Comparing to NaN always returns false. Use T.IsNaN(t) instead.
# Please keep this rule's severity above suggestion to actively avoid unintended behaviour.
dotnet_diagnostic.MA0082.severity = warning
# MA0083: ConstructorArgument parameters should exist in constructors
# [ConstructorArgument] is reserved for constructor parameters.
# Please keep this rule's severity above suggestion to actively encourage properly implementing [ConstructorArgument].
dotnet_diagnostic.MA0083.severity = warning
# MA0084: Local variables should not hide other symbols
# Hiding symbols makes code very hard to read.
# Please keep this rule's severity above suggestion to actively avoid hiding symbols.
dotnet_diagnostic.MA0084.severity = warning
# MA0085: Anonymous delegates should not be used to unsubscribe from Events
# Unsubscribing from Events via anonymous delegates doesn't actually remove the handler.
# Please keep this rule's severity above suggestion to actively encourage properly unsubscribing from events.
dotnet_diagnostic.MA0085.severity = warning
# MA0086: Do not throw from a finaliser
# CA1065 should control throwing exceptions from finaliser preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0086.severity = none
# Please see CA1065 instead.

# MA0087: Parameters with [DefaultParameterValue] attributes should also be marked [Optional]
# A default parameter value implies that the parameter is optional.
# Please keep this rule's severity above suggestion to actively encourage properly designed parameters.
dotnet_diagnostic.MA0087.severity = warning
# MA0088: Use [DefaultParameterValue] instead of [DefaultValue]
# DefaultValue does not initialise the member to the default value. DefaultParameterValue does.
# Please keep this rule's severity above suggestion to actively avoid unintended behaviour.
dotnet_diagnostic.MA0088.severity = warning
# MA0089: Optimise string method usage
# Chars are more performant than strings.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0089.severity = warning
# MA0090: Remove empty else/finally block
# RCS1259 should control empty syntax preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0090.severity = none
# Please see RCS1259 instead.

# MA0091: Sender should be 'this' for instance events
# Inputting this into sender arguments for instance events is proper use of sender arguments.
# Please keep this rule's severity above suggestion to actively encourage properly using sender arguments.
dotnet_diagnostic.MA0091.severity = warning
# MA0092: Sender should be 'null' for static events
# Inputting null into sender arguments for static events is proper use of sender arguments.
# Please keep this rule's severity above suggestion to actively encourage properly using sender arguments.
dotnet_diagnostic.MA0092.severity = warning
# MA0093: EventArgs should not be null
# Using EventArgs.Empty over null avoids NullReferenceExceptions.
# Please keep this rule's severity above suggestion to actively avoid NullReferenceExceptions.
dotnet_diagnostic.MA0093.severity = warning
# MA0094: A class that provides CompareTo(T) should implement IComparable<T>
# Providing CompareTo(T) implies that IComparable<T> should be implemented.
# Please keep this rule's severity above suggestion to actively encourage properly implementing comparisons.
dotnet_diagnostic.MA0094.severity = warning
# MA0095: A class that implements IEquatable<T> should override Equals(object)
# CA1067 should control overriding Equals(object) when IEquatable<T> is implemented preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0095.severity = none
# Please see CA1067 instead.

# MA0096: A class that implements IComparable<T> should also implement IEquatable<T>
# Implementing IComparable<T> implies IEquatable<T> should also be implemented.
# Please keep this rule's severity above suggestion to actively encourage properly implementing comparison.
dotnet_diagnostic.MA0096.severity = warning
# MA0097: A class that implements IComparable<T> or IComparable should override comparison operators
# CA1036 should control overriding comparison operators when implementing IComparable preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0097.severity = none
# Please see CA1036 instead.

# MA0098: Use indexer instead of LINQ methods
# Indexers are more performant than LINQ methods.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0098.severity = warning
# MA0099: Use Explicit enum value instead of 0
# 0 as an enum value is ambiguous between invalid & default values.
# Please keep this rule's severity above suggestion to actively avoid ambiguous values.
dotnet_diagnostic.MA0099.severity = warning
# MA0100: Await task before disposing of resources
# Otherwise dispose will fail and never complete.
# Please keep this rule's severity above suggestion to actively encourage properly disposing resources.
dotnet_diagnostic.MA0100.severity = warning
# MA0101: String contains an implicit end of line character
# Implicit EOL chars depend on the user configuration.
# Please keep this rule's severity above silent to actively avoid implicit EOL chars.
dotnet_diagnostic.MA0101.severity = suggestion
# MA0102: Make member readonly
# A struct member should use the readonly modifier when it does not modify state.
# Please keep this rule's severity above silent to actively encourage explicitly label struct members that don't modify state.
dotnet_diagnostic.MA0102.severity = suggestion
# MA0103: Use SequenceEqual instead of equality operator
# Equality operator compares reference, SequenceEqual compares items.
# Please keep this rule's severity above suggestion to actively avoid unintended behaviour.
dotnet_diagnostic.MA0103.severity = warning
# MA0104: Do not create a type with a name from the BCL
# Creating types with a name from the BCL is very confusing.
# Please keep this rule's severity above suggestion to actively avoid poorly named types.
dotnet_diagnostic.MA0104.severity = warning
# Consider all types, not just public ones.
MA0104.only_consider_public_symbols = false
# MA0105: Use the lambda parameters instead of using a closure
# Lambda parameters are more performant than using a closure.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0105.severity = warning
# MA0106: Avoid closure by using an overload with the 'factoryArgument' parameter
# Avoiding closure by using an overload with the 'factoryArgument' parameter is more performant.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0106.severity = warning
# MA0107: Do not use culture-sensitive object.ToString
# object.ToString is culture-sensitive by default.
# Please keep this rule's severity above suggestion to actively avoid culture-sensitive methods.
dotnet_diagnostic.MA0107.severity = warning
# MA0108: Remove redundant argument value
# ArgumentNullException.ThrowIfNull's paramName argument can safely be omitted.
# Please keep this rule's severity above silent to actively avoid useless code.
dotnet_diagnostic.MA0108.severity = suggestion
# MA0109: Consider adding an overload with a Span<T> or Memory<T>
# Span<T> or Memory<T> may be more performant than arrays in certain cases.
# Please keep this rule's severity above silent to actively encourage providing overloads to allow potential performance enhancements.
dotnet_diagnostic.MA0109.severity = suggestion
# MA0110: Use the Regex source generator
# Using the Regex source generator requires C# 11+ & .NET 7+.
# Please keep this rule's severity disabled to avoid using C# 11+ features.
dotnet_diagnostic.MA0110.severity = none
# MA0110 is for .NET 7 & C# 11+ only.

# MA0111: Use string.Create instead of FormattableString
# string.Create is more performant than FormattableString.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0111.severity = warning
# MA0112: Use 'Count > 0' instead of 'Any()'
# Count > 0 is more performant than Any().
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0112.severity = warning
# MA0113: Use DateTime.UnixEpoch
# DateTime.UnixEpoch's logic does not need to be implemented multiple times.
# Please keep this rule's severity above silent to actively encourage implementing DateTime.UnixEpoch properly.
dotnet_diagnostic.MA0113.severity = suggestion
# MA0114: Use DateTimeOffset.UnixEpoch
# DateTimeOffset.UnixEpoch's logic does not need to be implemented multiple times.
# Please keep this rule's severity above silent to actively encourage implementing DateTimeOffset.UnixEpoch properly.
dotnet_diagnostic.MA0114.severity = suggestion
# MA0115: Unknown component parameter
# Only known, valid parameters are to be used in Razor components.
# Please keep this rule's severity above suggestion to actively encourage properly using parameters in Razor components.
dotnet_diagnostic.MA0115.severity = warning
# MA0116: Parameters with [SupplyParameterFromQuery] attributes should also be marked as [Parameter]
# [SupplyParameterFromQuery] implies [Parameter] for parameters.
# Please keep this rule's severity above suggestion to actively encourage properly using [SupplyParameterFromQuery] on parameters.
dotnet_diagnostic.MA0116.severity = warning
# MA0117: Parameters with [EditorRequired] attributes should also be marked as [Parameter]
# [EditorRequired] implies [Parameter] for parameters.
# Please keep this rule's severity above suggestion to actively encourage properly using [EditorRequired] on parameters.
dotnet_diagnostic.MA0117.severity = warning
# MA0118: [JSInvokable] methods must be public
# Non-public methods marked with [JSInvokable] are improper.
# Please keep this rule's severity above suggestion to actively encourage properly using [JSInvokable].
dotnet_diagnostic.MA0118.severity = warning
# MA0119: JSRuntime must not be used in OnInitialised or OnInitialisedAsync
# JSRuntime is not available in OnInitialise or OnInitialiseAsync.
# Please keep this rule's severity above suggestion to actively encourage properly implementing JSRuntime.
dotnet_diagnostic.MA0119.severity = warning
# MA0120: Use InvokeVoidAsync when the returned value is not used
# InvokeVoidAsync is more performant then InvokeAsync.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0120.severity = warning
# MA0121: Do not overwrite parameter value
# Overwriting Razor component parameter values results in unintended side effects, such as loss of performance.
# Please keep this rule's severity above suggestion to actively avoid unintended behaviour.
dotnet_diagnostic.MA0121.severity = warning
# MA0122: Parameters with [SupplyParameterFromQuery] attributes are only valid in routable components (@page)
# Component parameters can only receive query parameter values in routable components with an @page directive.
# Please keep this rule's severity above suggestion to actively avoid misusing [SupplyParameterFromQuery].
dotnet_diagnostic.MA0122.severity = warning
# MA0123: Sequence number must be a constant
# Using a calculation or counter to generate the sequence number can lead to poor performance.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0123.severity = warning
# MA0124: Log Parameter type is not valid
# Only valid log parameter types should be used for Microsoft.Extensions.Logging's logger.
# Please keep this rule's severity above suggestion to actively avoid using invalid log parameter types.
dotnet_diagnostic.MA0124.severity = warning
# MA0125: The list of log parameter types contains an invalid type
# The configuration file for the rule MA0124 contains a type that is not found in the current compilation.
# Please keep this rule's severity above suggestion to actively avoid invalid types in the log parameter type list.
dotnet_diagnostic.MA0125.severity = warning
# MA0126: The list of log parameter types contains a duplicate
# The configuration file for the rule MA0124 contains duplicated names.
# Please keep this rule's severity above suggestion to actively avoid duplicate entries.
dotnet_diagnostic.MA0126.severity = warning
# MA0127: Use String.Equals instead of is pattern
# The is pattern does not support explicitly stating how the strings should be compared.
# Please keep this rule's severity above suggestion to actively encourage explicitly stating how strings should be compared.
dotnet_diagnostic.MA0127.severity = warning
# MA0128: Use 'is' operator instead of SequenceEqual
# Using is operator simplifies code for readability.
# Please keep this rule's severity disabled to avoid using C# 11+ features.
dotnet_diagnostic.MA0128.severity = none
# MA0128 is for C# 11+ only.

# MA0129: Await task in using statements
# A Task doesn't need to be disposed. When used in a using statement, most of the time, developers forgot to await it.
# Please keep this rule's severity above suggestion to actively encourage properly using tasks in await statements.
dotnet_diagnostic.MA0129.severity = warning
# MA0130: GetType() should not be used on System.Type instances
# GetType() allows to get the current type. Most of the time, when using on an instance of type System.Type, it's an error.
# Please keep this rule's severity above suggestion to actively encourage properly using GetType.
dotnet_diagnostic.MA0130.severity = warning
# MA0131: ArgumentNullException.ThrowIfNull should not be used with non-nullable types
# ArgumentNullException.ThrowIfNull will never throw with non-nullable types.
# Please keep this rule's severity above suggestion to actively encourage properly using ArgumentNullException.ThrowIfNull.
dotnet_diagnostic.MA0131.severity = warning
# MA0132: Do not convert implicitly to DateTimeOffset
# Doing so very likely leads to side effects, such as relying on a local time or mixing up DateTime with DateTimeOffset.
# Please keep this rule's severity above suggestion to actively avoid unintended behaviour.
dotnet_diagnostic.MA0132.severity = warning
# MA0133: Use DateTimeOffset instead of relying on the implicit conversion
# Replace DateTime.UtcNow or DateTime.Now with DateTimeOffset.UtcNow or DateTimeOffset.Now to avoid an implicit conversion.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.MA0133.severity = suggestion
# MA0134: Observe result of async calls
# The result of awaitable method should be observed by using await, Result, Wait, or other methods.
# Please keep this rule's severity above suggestion to actively encourage properly using async calls.
dotnet_diagnostic.MA0134.severity = warning
# MA0135: The log parameter has no configured type
# This rule ensures the parameters for Microsoft.Extensions.Logging's logger can be found in the configuration file.
# Please keep this rule's severity above suggestion to ensure the configuration file contains parameters for Microsoft.Extensions.Logging's logger.
dotnet_diagnostic.MA0135.severity = warning
# MA0136: Raw String contains an implicit end of line character
# The end of line may depend on the user's configuration.
# Please keep this rule's severity above suggestion to actively avoid implicit EOL chars.
dotnet_diagnostic.MA0136.severity = warning
# MA0137: Use 'Async' suffix when a method returns an awaitable type
# VSTHRD200 should control async method naming preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0137.severity = none
# Please see VSTHRD200 instead.

# MA0138: Do not use 'Async' suffix when a method does not return an awaitable type
# VSTHRD200 should control async method naming preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0138.severity = none
# Please see VSTHRD200 instead.

# MA0139: Log Parameter type is not valid
# Only valid log parameter types should be used for Serilog's logger.
# Please keep this rule's severity above suggestion to actively avoid using invalid log parameter types.
dotnet_diagnostic.MA0139.severity = warning
# MA0140: Both if and else branch have identical code
# S1871 should control identical branch preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0140.severity = none
# Please see S1871 instead.

# MA0141: Use pattern matching instead of inequality operators for null check
# Inequality operators can be overridden, unlike pattern matching.
# This rule covers unique cases that other rules do not. (ie. Null checks)
# Please keep this rule's severity above silent to actively encourage consistent behaviour.
dotnet_diagnostic.MA0141.severity = suggestion
# MA0142: Use pattern matching instead of equality operators for null check
# Equality operators can be overridden, unlike pattern matching.
# This rule covers unique cases that other rules do not. (ie. Null checks)
# Please keep this rule's severity above silent to actively encourage consistent behaviour.
dotnet_diagnostic.MA0142.severity = suggestion
# MA0143: Primary constructor parameters should be readonly
# Primary constructor parameters should not be treated as readonly.
# Please keep this rule's severity disabled to avoid misusing primary constructor parameters.
dotnet_diagnostic.MA0143.severity = none
# MA0143 is C# 12+ only, but would still be disabled even if it were available.

# MA0144: Use System.OperatingSystem to check the current OS
# System.OperatingSystem is more performant to check for the current OS.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0144.severity = warning
# MA0145: Signature for [UnsafeAccessorAttribute] method is not valid
# The signature for UnsafeAccessorAttribute method should be valid.
# Please keep this rule's severity above suggestion to actively encourage properly using UnsafeAccessorAttribute methods.
dotnet_diagnostic.MA0145.severity = warning
# MA0146: Name must be set explicitly on local functions
# Local function names are mangled by the compiler, so the Name named constructor parameter is required.
# Please keep this rule's severity above suggestion to actively encourage properly using [UnsafeAccessor].
dotnet_diagnostic.MA0146.severity = warning
# MA0147: Avoid async void method for delegate
# Delegates expect sync methods, not async ones.
# Please keep this rule's severity above suggestion to actively avoid misusing delegates.
dotnet_diagnostic.MA0147.severity = warning
# MA0148: Use pattern matching instead of equality operators for discrete value
# Equality operators can be overridden, unlike pattern matching.
# Please keep this rule's severity above silent to actively encourage consistent behaviour.
dotnet_diagnostic.MA0148.severity = suggestion
# MA0149: Use pattern matching instead of inequality operators for discrete value
# Equality operators can be overridden, unlike pattern matching.
# Please keep this rule's severity above silent to actively encourage consistent behaviour.
dotnet_diagnostic.MA0149.severity = suggestion
# MA0150: Do not call the default object.ToString explicitly
# Microsoft recommends overriding ToString when you create new types.
# Please keep this rule's severity above suggestion to actively avoid culture-sensitive string conversions.
dotnet_diagnostic.MA0150.severity = warning
# MA0151: DebuggerDisplay must contain valid members
# DebuggerDisplay should contain valid members.
# Please keep this rule's severity above suggestion to actively encourage using valid members for DebuggerDisplay.
dotnet_diagnostic.MA0151.severity = warning
# MA0152: Use Unwrap instead of using await twice
# Unwrap is more performant than using await twice.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0152.severity = warning
# MA0153: Do not log symbols decorated with DataClassificationAttribute directly
# Sensitive data should not be logged.
# Please keep this rule's severity above suggestion to actively avoid logging sensitive data.
dotnet_diagnostic.MA0153.severity = warning
# MA0154: Use langword in XML comment
# Using langword explicitly communicates that a language keyword is being used.
# Please keep this rule's severity above silent to actively encourage using langword in XML comments for readability.
dotnet_diagnostic.MA0154.severity = suggestion
# MA0155: Do not use async void methods
# VSTHRD100 should control async void method preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0155.severity = none
# Please see VSTHRD100 instead.

# MA0156: Use 'Async' suffix when a method returns IAsyncEnumerable<T>
# Async methods should be suffixed with 'Async'.
# Please keep this rule's severity above silent to actively encourage suffixing methods that return IAsyncEnumerable<T> with 'Async' for maintainability.
dotnet_diagnostic.MA0156.severity = suggestion
# MA0157: Do not use 'Async' suffix when a method does not return IAsyncEnumerable<T>
# Non-async methods should avoid using the 'Async' suffix.
# Please keep this rule's severity above silent to actively avoid suffixing non-async methods with 'Async' for maintainability.
dotnet_diagnostic.MA0157.severity = suggestion
# MA0158: Use System.Threading.Lock
# Starting with .NET 9 and C# 13, you can use System.Threading.Lock objects instead of regular objects only used inside lock statements.
# Please keep this rule's severity disabled to avoid using .NET 9+ & C# 13+ features.
dotnet_diagnostic.MA0158.severity = none
# MA0158 is for C# 13+ and .NET 9+ only.

# MA0159: Use 'Order' instead of 'OrderBy'
# Order is more performant than OrderBy.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0159.severity = warning
# MA0160: Use ContainsKey instead of TryGetValue
# ContainsKey is more performant than TryGetValue.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.MA0160.severity = warning
# MA0161: UseShellExecute must be explicitly set
# The default value for UseShellExecute is true on .NET Framework apps and false on .NET Core apps.
# Please keep this rule's severity above silent to actively encourage explicitly setting UseShellExecute for readability.
dotnet_diagnostic.MA0161.severity = suggestion
# MA0162: Use Process.Start overload with ProcessStartInfo
# Specifying a ProcessStartInfo allows specifying the UseShellExecute property, of which the default value is true for .NET Framework apps and false for .NET Core apps.
# Please keep this rule's severity above silent to actively encourage explicitly setting UseShellExecute for readability.
dotnet_diagnostic.MA0162.severity = suggestion
# MA0163: UseShellExecute must be false when redirecting standard input or output
# The default value for UseShellExecute is true on .NET Framework apps and false on .NET Core apps. It must be set to false when redirecting I/O to avoid issues at runtime.
# Please keep this rule's severity above suggestion to actively encourage setting UseShellExecute to false when redirecting I/O to avoid issues at runtime.
dotnet_diagnostic.MA0163.severity = warning
# MA0164: Use parentheses to not pattern clearer
# Not patterns are often wrongly used in combination with the or operator. Using parentheses makes evaluation clearer.
# Please keep this rule's severity above suggestion to actively encourage using parentheses to make not patterns easier to read.
dotnet_diagnostic.MA0164.severity = warning
# MA0165: Make interpolated string
# Interpolated raw strings are C# 11+ only.
# IDE0071 should control string interpolation preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.MA0165.severity = none
# MA0165 is C# 11+ only.
# Please see IDE0071 instead.

# SharpSource
# https://www.nuget.org/packages/SharpSource/
# https://github.com/Vannevelj/SharpSource/tree/master/docs

# SS001: AsyncMethodWithVoidReturnType
# VSTHRD100 should control async void method preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS001.severity = none
# Please see VSTHRD100 instead.

# SS002: DateTimeNow
# S6563 should control DateTimeNow preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS002.severity = none
# Please see S6563 instead.

# SS003: DivideIntegerByInteger
# The operands of a divisive expression are both integers and result in an implicit rounding.
# Please keep this rule's severity above suggestion to actively avoid unexpected behaviour.
dotnet_diagnostic.SS003.severity = warning
# SS004: ElementaryMethodsOfTypeInCollectionNotOverridden
# Collections use Equals & GetHashcode to fetch objects but by default they use reference equality. Depending on where your objects come from, they might be missed in the lookup.
# Please keep this rule's severity above suggestion to actively avoid unexpected behaviour.
dotnet_diagnostic.SS004.severity = warning
# SS005: EqualsAndGetHashcodeNotImplementedTogether
# Implement Equals() and GetHashcode() together. Implement both to ensure consistent behaviour around lookups.
# Please keep this rule's severity above suggestion to actively avoid unexpected behaviour.
dotnet_diagnostic.SS005.severity = warning
# SS006: ThrowNull
# Throwing null will always result in a runtime exception.
# Please keep this rule's severity above suggestion to actively avoid guaranteed runtime exceptions.
dotnet_diagnostic.SS006.severity = warning
# SS007: FlagsEnumValuesAreNotPowersOfTwo
# CA2217 should control misusing [Flags] preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS007.severity = none
# Please see CA2217 instead.

# SS008: GetHashCodeRefersToMutableMember
# Mutable members used for hash codes result in inconsistent hashes.
# Please keep this rule's severity above suggestion to actively encourage consistent hashes.
dotnet_diagnostic.SS008.severity = warning
# SS009: LoopedRandomInstantiation
# System.Random uses a time-based seed so usage within fast loops will result in duplicate results.
# Please keep this rule's severity above suggestion to actively avoid unexpected behaviour.
dotnet_diagnostic.SS009.severity = warning
# SS010: NewGuid
# S4581 should control Guid.Empty preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS010.severity = none
# Please see S4581 instead.

# SS011: OnPropertyChangedWithoutNameofOperator
# Providing property names via nameof avoids magic strings.
# Please keep this rule's severity above suggestion to actively avoid magic strings.
dotnet_diagnostic.SS011.severity = warning
# SS012: RecursiveOperatorOverload
# Recursively using overloaded operator will result in a stack overflow when attempting to use it.
# Please keep this rule's severity above suggestion to actively avoid guaranteed stack overflows.
dotnet_diagnostic.SS012.severity = warning
# SS013: RethrowExceptionWithoutLosingStacktrace
# CA2200 should control rethrowing exception preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS013.severity = none
# Please see CA2200 instead.

# SS014: StringDotFormatWithDifferentAmountOfArguments
# A string.Format() call lacks arguments and will cause a runtime exception.
# Please keep this rule's severity above suggestion to actively avoid guaranteed runtime exceptions.
dotnet_diagnostic.SS014.severity = warning
# SS015: StringPlaceholdersInWrongOrder
# Orders the arguments of a string.Format() call in ascending order according to index. This reduces the likelihood of the resulting string having data in the wrong place.
# Please keep this rule's severity above suggestion to actively encourage ordering string placeholders correctly.
dotnet_diagnostic.SS015.severity = warning
# SS017: StructWithoutElementaryMethodsOverridden
# Structs should implement Equals(), GetHashCode(), and ToString(). By default they use reflection which comes with performance penalties.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.SS017.severity = warning
# SS018: SwitchDoesNotHandleAllEnumOptions
# IDE0010 should control missing switch cases for enum options.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS018.severity = none
# Please see IDE0010 instead.

# SS019: SwitchIsMissingDefaultLabel
# IDE0010 should control missing switch label preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS019.severity = none
# Please see IDE0010 instead.

# SS020: TestMethodWithoutPublicModifier
# Some test frameworks require test methods to have public access modifier to discover unit tests.
# Please keep this rule's severity above suggestion to actively encourage properly discoverable test methods.
dotnet_diagnostic.SS020.severity = warning
# SS021: TestMethodWithoutTestAttribute
# A method might be missing a test attribute.
# Please keep this rule's severity above suggestion to actively encourage properly discoverable test methods.
dotnet_diagnostic.SS021.severity = warning
# SS022: ExceptionThrownFromImplicitOperator
# SS023: ExceptionThrownFromPropertyGetter
# SS024: ExceptionThrownFromStaticConstructor
# SS025: ExceptionThrownFromFinallyBlock
# SS026: ExceptionThrownFromEqualityOperator
# SS027: ExceptionThrownFromDispose
# SS028: ExceptionThrownFromFinaliser
# SS029: ExceptionThrownFromGetHashCode
# SS030: ExceptionThrownFromEquals
# CA1065 should control disallowed exception throwing preferences.
# CA2219 should control throwing exceptions within finally block preferences.
# Please keep these rules' severities disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS022.severity = none
dotnet_diagnostic.SS023.severity = none
dotnet_diagnostic.SS024.severity = none
dotnet_diagnostic.SS025.severity = none
dotnet_diagnostic.SS026.severity = none
dotnet_diagnostic.SS027.severity = none
dotnet_diagnostic.SS028.severity = none
dotnet_diagnostic.SS029.severity = none
dotnet_diagnostic.SS030.severity = none
# Please see CA2219 instead for throwing exceptions from finally block preferences.
# Please see CA1065 instead for all other disallowed exception throwing preferences.

# SS032: ThreadSleepInAsyncMethod
# VSTHRD103 & CA1849 should control using blocking calls in an async method preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS032.severity = none
# Please see VSTHRD103 & CA1849 instead.

# SS033: AsyncOverloadsAvailable
# VSTHRD103 & CA1849 should control using async overloads when available preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS033.severity = none
# Please see VSTHRD103 & CA1849 instead.

# SS034: AccessingTaskResultWithoutAwait
# Use await to get the result of an asynchronous operation.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.SS034.severity = suggestion
# SS035: SynchronousTaskWait
# VSTHRD103 should control using blocking calls in an async method preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS035.severity = none
# Please see VSTHRD103 instead.

# SS036: ExplicitEnumValues
# An enum should explicitly specify its values.
# Please keep this rule's severity above silent to actively encourage more readable code.
dotnet_diagnostic.SS036.severity = suggestion
# SS037: HttpClientInstantiatedDirectly
# HttpClient was instantiated directly. This can result in socket exhaustion and DNS issues in long-running scenarios. Use IHttpClientFactory instead.
# Please keep this rule's severity above suggestion to actively avoid socket exhaustion & DNS issues.
dotnet_diagnostic.SS037.severity = warning
# SS038: HttpContextStoredInField
# HttpContext was stored in a field. This can result in a previous context being used for subsequent requests. Use IHttpContextAccessor instead.
# Please keep this rule's severity above suggestion to actively avoid using previous contexts for subsequent requests.
dotnet_diagnostic.SS038.severity = warning
# SS039: EnumWithoutDefaultValue
# CA1008 should control enums without default value preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS039.severity = none
# Please see CA1008 instead.

# SS040: UnusedResultOnImmutableObject
# An unused result of an operation on a string likely means the desired operation has not been performed.
# Please keep this rule's severity above suggestion to actively avoid redundant operation results.
dotnet_diagnostic.SS040.severity = warning
# SS041: UnnecessaryEnumerableMaterialisation
# An IEnumerable was materialised before a deferred execution call. This generally results in unnecessary work being done.
# Please keep this rule's severity above suggestion to actively avoide unnecessary code.
dotnet_diagnostic.SS041.severity = warning
# SS042: InstanceFieldWithThreadStatic
# CA2259 should control [ThreadStatic] on instance field preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS042.severity = none
# Please see CA2259 instead.

# SS043: MultipleFromBodyParameters
# Only one [FromBody] is allowed.
# Please keep this rule's severity above suggestion to actively avoid misusing [FromBody].
dotnet_diagnostic.SS043.severity = warning
# SS044: AttributeMustSpecifyAttributeUsage
# CA1018 should control [AttributeUsage] preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS044.severity = none
# Please see CA1018 instead.

# SS045: StaticInitialiserAccessedBeforeInitialisation
# S3263 should control using static fields before they have been initialised preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS045.severity = none
# Please see S3263 instead.

# SS046: UnboundedStackalloc
# An array is stack allocated without checking whether the length is within reasonable bounds. This can result in performance degradations and security risks.
# Please keep this rule's severity above suggestion to actively avoid carelessly allocating unreasonably large amounts of memory.
dotnet_diagnostic.SS046.severity = warning
# SS047: LinqTraversalBeforeFilter
# Using Where before an IEnumerable extension method is more performant than using Where after an IEnumerable extension method.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.SS047.severity = warning
# SS048: LockingOnDiscouragedObject
# CA2002 should control locking onto discouraged object preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS048.severity = none
# Please see CA2002 instead.

# SS049: ComparingStringsWithoutStringComparison
# RCS1155 should control comparing strings without string comparison preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS049.severity = none
# Please see RCS1155 instead.

# SS050: ParameterAssignedInConstructor
# A parameter was assigned in a constructor
# Please keep this rule's severity above suggestion to actively avoid unintended behaviour.
dotnet_diagnostic.SS050.severity = warning
# SS051: LockingOnMutableReference
# A lock was obtained on a mutable field which can lead to deadlocks when a new value is assigned. Mark the field as readonly to prevent re-assignment after a lock is taken.
# Please keep this rule's severity above suggestion to actively avoid locking onto discouraged objects.
dotnet_diagnostic.SS051.severity = warning
# SS052: ThreadStaticWithInitialiser
# CA2019 should control [ThreadStatic] with initialiser preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS052.severity = none
# Please see CA2019 instead.

# SS053: PointlessCollectionToString
# .ToString() was called on a collection which results in impractical output. Considering using string.Join() to display the values instead.
# Please keep this rule's severity above suggestion to actively avoid unintended behaviour.
dotnet_diagnostic.SS053.severity = warning
# SS054: NewtonsoftMixedWithSystemTextJson
# Newtonsoft & System.Text Json should not be mixed.
# Please keep this rule's severity above suggestion to actively avoid unintended behaviour.
dotnet_diagnostic.SS054.severity = warning
# SS055: MultipleOrderByCalls
# MA0030 should control multiple OrderBy call preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.SS055.severity = none
# Please see MA0030 instead.

# SS056: FormReadSynchronously
# Synchronously accessed HttpRequest.Form which uses sync-over-async. Use HttpRequest.ReadFormAsync() instead.
# Please keep this rule's severity above suggestion to actively avoid using sync-over-async.
dotnet_diagnostic.SS056.severity = warning
# SS057: CollectionManipulatedDuringTraversal
# Manipulating collections during traversal can cause a InvalidOperationException to be thrown.
# Please keep this rule's severity above suggestion to actively avoid manipulating collections during traversal.
dotnet_diagnostic.SS057.severity = warning
# SS058: StringConcatenatedInLoop
# Concatenating strings within loops causes intermediate allocations, which can be avoided by using a StringBuilder or pre-allocated string instead.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.SS058.severity = warning
# SS059: DisposeAsyncDisposable
# An object implements IAsyncDisposable and can be disposed of asynchronously in the context it is used.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.SS059.severity = warning
# SS060: ConcurrentDictionaryEmptyCheck
# A ConcurrentDictionary is checked for emptiness without using .IsEmpty. Alternatives will take a global lock on the entire dictionary, which can harm performance.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.SS060.severity = warning

# ! Blowin.Required is for C# 11+.
# This analyser will not be used.
# https://github.com/blowin/Blowin.Required

# ! BlowinCleanCode has unfinished documentation, making this analyser difficult to understand.
# This analyser will not be used.
# https://github.com/blowin/BlowinCleanCode/

# ! Selectorlyzer.Analyzers does not have a v1.0 release. It is used for project-specific analysers using a CSS selector-like syntax.
# This analyser will not be used.
# https://github.com/rlgnak/Selectorlyzer.Analyzers

# ! Menees.Analzyers is mostly replaceable by other analysers.
# This analyser will not be used.
# https://github.com/menees/Analyzers

# ! SecurityCodeScan is designed for security. It should only be used in security-critical projects. Using it slows down the IDE significantly.
# This analyser will not be used.
# https://github.com/security-code-scan/security-code-scan

# ! Puma Scan is designed for security. It should only be used in security-critical projects. It is not free, either.
# This paid analyser will not be used.
# https://pumasecurity.io/

# ! AngleSharp is for ASP.NET Core and web. It should only be used for ASP.NET Core & web related projects.
# This analyser will not be used.
# https://www.nuget.org/packages/AngleSharp

# ! AspNetCoreAnalyzers is for ASP.NET Core and web. It should only be used for ASP.NET Core & web related projects.
# This analyser will not be used.
# https://www.nuget.org/packages/AspNetCoreAnalyzers

# ! AsyncFixer's link does not work. It is unclear which NuGet package awesome-analyzers is trying to refer to.
# This analyser will not be used.
# http://www.asyncfixer.com/

# ! SmartAnalyzers.MultithreadingAnalyzer lacks documentation, making this analyser difficult to understand.
# This analyser will not be used.
# https://github.com/cezarypiatek/MultithreadingAnalyzer

# ! Asyncify does not have a v1.0 release. The last release was in 2015.
# This analyser will not be used.
# https://www.nuget.org/packages/Asyncify

# Microsoft.VisualStudio.Threading.Analyzers
# https://www.nuget.org/packages/Microsoft.VisualStudio.Threading.Analyzers
# https://github.com/microsoft/vs-threading/blob/main/doc/analyzers/index.md

# Critical rules, VSTHRD0xx:

# VSTHRD001: Avoid legacy thread switching methods
# Legacy thread switching methods can cause deadlocks & threadpool starvation.
# Please keep this rule's severity above suggestion to actively avoid deadlocks.
dotnet_diagnostic.VSTHRD001.severity = warning
# VSTHRD002: Avoid problematic synchronous waits
# Synchronously waiting on Task, ValueTask, or awaiters is dangerous and may cause dead locks.
# Please keep this rule's severity above suggestion to actively avoid deadlocks.
dotnet_diagnostic.VSTHRD002.severity = warning
# VSTHRD003: Avoid awaiting foreign Tasks
# Awaiting foreign Tasks can result in deadlocks.
# Please keep this rule's severity above suggestion to actively avoid deadlocks.
dotnet_diagnostic.VSTHRD003.severity = warning
# VSTHRD004: Await SwitchToMainThreadAsync
# Calls to JoinableTaskFactory.SwitchToMainThreadAsync must be awaited or it is a no-op.
# Please keep this rule's severity above suggestion to actively encourage awaiting SwitchToMainThreadAsync.
dotnet_diagnostic.VSTHRD004.severity = warning
# VSTHRD010: Invoke single-threaded types on Main thread
# Acquiring, casting, or invoking single-threaded objects should be done after ensuring that your code is running on the main thread.
# Please keep this rule's severity above suggestion to actively encourage invoking single-threaded types on Main thread.
dotnet_diagnostic.VSTHRD010.severity = warning
# VSTHRD011: Use AsyncLazy<T>
# Using AsyncLazy<T> avoids deadlocks.
# Please keep this rule's severity above suggestion to actively avoid deadlocks.
dotnet_diagnostic.VSTHRD011.severity = warning
# VSTHRD012: Provide JoinableTaskFactory where allowed
# Providing JoinableTaskFactory is preferred.
# Please keep this rule's severity above suggestion to actively encourage providing JoinableTaskFactory where possible.
dotnet_diagnostic.VSTHRD012.severity = warning

# Advisory rules, VSTHRD1xx:

# VSTHRD100: Avoid async void methods
# Such methods make it impossible for the caller to track the entire asynchronous operation & handle exceptions that may be thrown by that method.
# If the method throws an exception, it crashes the process.
# Please keep this rule's severity above suggestion to actively anecourage properly implementing async methods.
dotnet_diagnostic.VSTHRD100.severity = warning
# VSTHRD101: Avoid unsupported async delegates
# Unsupported async delegates lead to async void.
# Please keep this rule's severity above suggestion to actively avoid unsupported async delegates.
dotnet_diagnostic.VSTHRD101.severity = warning
# VSTHRD102: Implement internal logic asynchronously
# Implementing internal logic asynchronously allows for public members to be truly async.
# Please keep this rule's severity above silent to actively encourage properly implementing async logic.
dotnet_diagnostic.VSTHRD102.severity = suggestion
# VSTHRD103: Call async methods when in an async method
# In a method which is already asynchronous, calls to other methods should be to their async versions, where they exist.
# Please keep this rule's severity above suggestion to actively encourage properly implementing async methods.
dotnet_diagnostic.VSTHRD103.severity = warning
# VSTHRD104: Offer async option
# When a publicly accessible method uses JoinableTaskFactory.Run,
# there should be another way to access the async behavior without synchronously blocking the thread so that an async caller can be async throughout.
# Please keep this rule's severity above silent to actively avoid synchronously blocking the thread.
dotnet_diagnostic.VSTHRD104.severity = suggestion
# VSTHRD105: Avoid method overloads that assume TaskScheduler.Current
# Relying on TaskScheduler.Current can lead to unexpected behaviour, deadlocks or responsiveness issues.
# Please keep this rule's severity above suggestion to actively avoid relying on TaskScheduler.Current.
dotnet_diagnostic.VSTHRD105.severity = warning
# VSTHRD106: Use InvokeAsync to raise async events
# Asynchronous events must be raised carefully to ensure all event handlers are invoked and awaited on.
# Please keep this rule's severity above suggestion to actively encourage properly raise asynchronous events.
dotnet_diagnostic.VSTHRD106.severity = warning
# VSTHRD107: Await Task within using expression
# Awaiting Task within using expression avoids accidentally disposing of Task<T> when disposing the T result itself is intended.
# Please keep this rule's severity above suggestion to actively encourage properly disposing objects.
dotnet_diagnostic.VSTHRD107.severity = warning
# VSTHRD108: Assert thread affinity unconditionally
# Conditionally asserting thread affinity can lead to hiding calls on the wrong thread.
# Please keep this rule's severity above suggestion to actively encourage properly implementing thread affinity.
dotnet_diagnostic.VSTHRD108.severity = warning
# VSTHRD109: Switch instead of assert in async methods
# Switching instead of assert in async methods allows callers to invoke any async method from any thread without concern.
# Please keep this rule's severity above suggestion to actively encourage switching threads instead of asserting where possible.
dotnet_diagnostic.VSTHRD109.severity = warning
# VSTHRD110: Observe result of async calls
# Simply invoking async methods does not guarantee work is complete/successful.
# Awaiting them suspends the calling method until completion & rethrows any exceptions thrown by the method, however.
# Please keep this rule's severity above suggestion to actively encourage properly using async methods.
dotnet_diagnostic.VSTHRD110.severity = warning
# VSTHRD111: Use .ConfigureAwait(bool)
# Omitting the suffix is more readable than .ConfigureAwait(true).
# Please keep this rule's severity disabled to avoid harming readability.
dotnet_diagnostic.VSTHRD111.severity = none
# VSTHRD112: Implement System.IAsyncDisposable
# VSTHRD113: Check for System.IAsyncDisposable
# Microsoft.VisualStudio.Threading.IAsyncDisposable is obsolete. Implement System.IAsyncDisposable instead.
# Please keep these rules' severities above suggestion to actively encourage implementing non-obsolete interfaces.
dotnet_diagnostic.VSTHRD112.severity = warning
dotnet_diagnostic.VSTHRD113.severity = warning
# VSTHRD114: Avoid returning null from a Task-returning method.
# Returning null from a Task-returning method will cause a NullReferenceException.
# Please keep this rule's severity above suggestion to actively avoid NullReferenceExceptions.
dotnet_diagnostic.VSTHRD114.severity = warning
# VSTHRD115: Avoid creating a JoinableTaskContext with an explicit null SynchronisationContext
# Doing so uses the current synchronisation context, and if its non-null, the constructor may unexpectedly configure the new instance as if a main thread were present.
# Please keep this rule's severity above suggestion to actively avoid unexpected behaviour.
dotnet_diagnostic.VSTHRD115.severity = warning

# Guideline rules, VSTHRD2xx:

# VSTHRD200: Use Async naming convention
# Async methods should be suffixed with 'Async' for readability.
# Please keep this rule's severity above suggestion to actively encourage properly naming async methods.
dotnet_diagnostic.VSTHRD200.severity = warning

# ! Moq.Analyzers is for writing unit tests for the Moq mocking library.
# This analyser will not be used.
# https://www.nuget.org/packages/Moq.Analyzers

# ! Roslynator.Testing.CSharp.Xunit is for unit testing of Roslyn analysers, refactorings & code fixes.
# This analyser will not be used.
# https://www.nuget.org/packages/Roslynator.Testing.CSharp.Xunit

# ! xunit.analyzers is for projects using xUnit.net.
# This analyser will not be used.
# https://www.nuget.org/packages/xunit.analyzers

# ! ZeroFormatter.Analyzer is for projects that use ZeroFormatter.
# This analyser will not be used.
# https://www.nuget.org/packages/ZeroFormatter.Analyzer

# SvSoft.Analyzers.ClosedTypeHierarchyDiagnosticSuppression
# https://www.nuget.org/packages/SvSoft.Analyzers.ClosedTypeHierarchyDiagnosticSuppression
# https://github.com/shuebner/ClosedTypeHierarchyDiagnosticSuppressor

# Explicitly states that records should not be ignored.
# Record types can never achieve closed type hierarchies, so don't suppress diagnostics for them.
dotnet_diagnostic.CTH001.suppress_on_record_hierarchies = false

# ! SvSoft.OneOf.Analyzers.SwitchDiagnosticSuppression is for projects that use the OneOf library.
# This analyser will not be used.
# https://github.com/shuebner/OneOfDiagnosticSuppressor

# ! NSubstitute is for projects that use NSubstitute.
# This analyser will not be used.
# https://www.nuget.org/packages/NSubstitute

# ! System.IO.Abstractions.Analyzer is for projects that use the System.IO.Abstractions package.
# This analyser will not be used.
# https://github.com/TestableIO/System.IO.Abstractions.Analyzers

# ! MappingGenerator is paywalled with a free trial.
# This paid analyser will not be used.
# https://github.com/cezarypiatek/MappingGenerator

# NetFabric.Hyperlinq.Analyzer
# https://www.nuget.org/packages/NetFabric.Hyperlinq.Analyzer/
# https://github.com/NetFabric/NetFabric.Hyperlinq.Analyzer

# HLQ001: Assigment causes boxing of enumerator
# Boxing of enumerators can be avoided for more performant code.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.HLQ001.severity = warning
# HLQ002: Enumerable methods should not return null
# S1168 should control enumerable methods returning null preferences.
# Please keep this rule's severity disabled to avoid using multiple analysers to control the same preferences.
dotnet_diagnostic.HLQ002.severity = none
# Please see S1168 instead.

# HLQ003: Public methods should return highest admissible level interfaces
# Higher admissable level interfaces is more performant.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.HLQ003.severity = warning
# HLQ004: The enumerator returns a reference to the item.
# Returning a reference results in a copy of each item.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.HLQ004.severity = warning
# HLQ005: Avoid use of Single(), SingleOrDefault(), SingleAsync() and SingleOrDefaultAsync() operations
# Using First instead of Single is more performant.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.HLQ005.severity = warning
# HLQ006: GetEnumerator() and GetAsyncEnumerator() should return an instance of a value-typed enumerator
# Returning a value type is more performant than a reference type.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.HLQ006.severity = warning
# HLQ007: Consider returning a non-disposable enumerator
# Non-disposable enumerators avoid calling empty dispose methods, which helps performance.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.HLQ007.severity = warning
# HLQ008: Consider adding readonly.
# Adding readonly avoids extra copies being made, which helps performance.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.HLQ008.severity = warning
# HLQ009: Consider removing an empty optional enumerator method.
# Empty methods should be removed for performance.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.HLQ009.severity = warning
# HLQ011: Mutable value-type enumerators cannot be stored in a 'readonly' field.
# Storing mutable value-type enumerators causes copies to be made to change state, which is less performant.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.HLQ011.severity = warning
# HLQ012: Use CollectionsMarshal.AsSpan() to iterate List<T>.
# CollectionsMarshal is .NET 5+ only.
# Please keep this rule's severity disabled to avoid using .NET 5+ features.
dotnet_diagnostic.HLQ012.severity = none
# HLQ012 is for .NET 5+ only.

# HLQ013: Use foreach loop
# For loops rely on bounds checking while foreach doesn't, which makes foreach loops more performant.
# Please keep this rule's severity above suggestion to actively encourage more performant code.
dotnet_diagnostic.HLQ013.severity = warning

# ! SmartAnalyzers.ExceptionAnalyzer lacks documentation, making this analyser difficult to understand.
# This analyser will not be used.
# https://github.com/cezarypiatek/ExceptionAnalyzer

# ! DotNetAnalyzers.DocumentationAnalyzers does not have any non-beta releases & has not had any releases since 2018.
# This analyser will not be used.
# https://www.nuget.org/packages/DotNetAnalyzers.DocumentationAnalyzers

# ! IDisposableAnalyzers has a concerningly high number of false positives mentioned in open issues on the repository.
# Certain documentation pages are also unfinished.
# This analyser will not be used.
# https://www.nuget.org/packages/IDisposableAnalyzers/

# End of awesome-analyzers

# Unit Testing C# files
[Tests/**.cs]

# NUnit.Analyzers, which should only be used while developing unit tests via NUnit.
# https://www.nuget.org/packages/NUnit.Analyzers
# https://github.com/nunit/nunit.analyzers/tree/master/documentation

# Structure Rules NUnit1XXX

# NUnit1001: The individual arguments provided by a TestCaseAttribute must match the type of the corresponding parameter of the method
# The individual arguments provided by a TestCaseAttribute must match the type of the corresponding parameter of the method.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1001.severity = warning
# NUnit1002: The TestCaseSource should use nameof operator to specify target
# The TestCaseSource should use nameof operator to specify target.
# Please keep this rule's severity above suggestion to actively avoid magic strings.
dotnet_diagnostic.NUnit1002.severity = warning
# NUnit1003: The TestCaseAttribute provided too few arguments
# The number of arguments provided by a TestCaseAttribute must match the number of parameters of the method.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1003.severity = warning
# NUnit1004: The TestCaseAttribute provided too many arguments
# The number of arguments provided by a TestCaseAttribute must match the number of parameters of the method.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1004.severity = warning
# NUnit1005: The type of the value specified via ExpectedResult must match the return type of the method
# The type of the value specified via ExpectedResult must match the return type of the method. Otherwise, this will lead to an error at run-time.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1005.severity = warning
# NUnit1006: ExpectedResult must not be specified when the method returns void
# ExpectedResult must not be specified when the method returns void. This will lead to an error at run-time.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1006.severity = warning
# NUnit1007: The method has non-void return type, but no result is expected in ExpectedResult
# The method has non-void return type, but no result is expected in ExpectedResult.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1007.severity = warning
# NUnit1008: Specifying ParallelScope.Self on assembly level has no effect
# Specifying ParallelScope.Self on assembly level has no effect.
# Please keep this rule's severity above suggestion to actively avoid redundant code.
dotnet_diagnostic.NUnit1008.severity = warning
# NUnit1009: One may not specify ParallelScope.Children on a non-parameterised test method
# One may not specify ParallelScope.Children on a non-parameterised test method.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1009.severity = warning
# NUnit1010: One may not specify ParallelScope.Fixtures on a test method
# One may not specify ParallelScope.Fixtures on a test method.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1010.severity = warning
# NUnit1011: The TestCaseSource argument does not specify an existing member
# The TestCaseSource argument does not specify an existing member. This will lead to an error at run-time.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1011.severity = warning
# NUnit1012: The async test method must have a non-void return type
# The async test method must have a non-void return type.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1012.severity = warning
# NUnit1013: The async test method must have a non-generic Task return type when no result is expected
# The async test method must have a non-generic Task return type when no result is expected.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1013.severity = warning
# NUnit1014: The async test method must have a Task<T> return type when a result is expected
# The async test method must have a Task<T> return type when a result is expected.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1014.severity = warning
# NUnit1015: The source type does not implement IEnumerable
# The source type must implement IEnumerable in order to provide test cases.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1015.severity = warning
# NUnit1016: The source type does not have a default constructor
# The source type must have a default constructor in order to provide test cases.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1016.severity = warning
# NUnit1017: The specified source is not static
# The specified source must be static.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1017.severity = warning
# NUnit1018: The number of parameters provided by the TestCaseSource does not match the number of parameters in the target method
# The number of parameters provided by the TestCaseSource must match the number of parameters in the target method.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1018.severity = warning
# NUnit1019: The source specified by the TestCaseSource does not return an IEnumerable or a type that implements IEnumerable
# The source specified by the TestCaseSource must return an IEnumerable or a type that implements IEnumerable.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1019.severity = warning
# NUnit1020: The TestCaseSource provides parameters to a source - field or property - that expects no parameters
# The TestCaseSource must not provide any parameters when the source is a field or a property.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1020.severity = warning
# NUnit1021: The ValueSource should use nameof operator to specify target
# The ValueSource should use nameof operator to specify target.
# Please keep this rule's severity above suggestion to actively avoid magic strings.
dotnet_diagnostic.NUnit1021.severity = warning
# NUnit1022: The specified source is not static
# The specified source must be static.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1022.severity = warning
# NUnit1023: The target method expects parameters which cannot be supplied by the ValueSource
# The target method expects parameters which cannot be supplied by the ValueSource.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1023.severity = warning
# NUnit1024: The source specified by the ValueSource does not return an IEnumerable or a type that implements IEnumerable
# The source specified by the ValueSource must return an IEnumerable or a type that implements IEnumerable.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1024.severity = warning
# NUnit1025: The ValueSource argument does not specify an existing member
# The ValueSource argument does not specify an existing member. This will lead to an error at run-time.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1025.severity = warning
# NUnit1026: The test or setup/teardown method is not public
# The test or setup/teardown method is not public.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction, as NUnit only runs public test methods.
dotnet_diagnostic.NUnit1026.severity = warning
# NUnit1027: The test method has parameters, but no arguments are supplied by attributes
# The test method has parameters, but no arguments are supplied by attributes.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1027.severity = warning
# NUnit1028: The non-test method is public
# A fixture should not contain any public non-test methods. There are two exceptions: A public constructor and an IDisposable.Dispose method implementation.
# Please keep this rule's severity above silent to actively encourage properly designing test fixtures.
dotnet_diagnostic.NUnit1028.severity = suggestion
# NUnit1029: The number of parameters provided by the TestCaseSource does not match the number of parameters in the Test method
# The number of parameters provided by the TestCaseSource must match the number of parameters in the Test method.
# Please keep this rule's severity above suggestion to actively encourage using correct number of parameters.
dotnet_diagnostic.NUnit1029.severity = warning
# NUnit1030: The type of parameter provided by the TestCaseSource does not match the type of the parameter in the Test method
# The type of parameters provided by the TestCaseSource must match the type of parameters in the Test method.
# Please keep this rule's severity above suggestion to actively encourage using correct number of parameters.
dotnet_diagnostic.NUnit1030.severity = warning
# NUnit1031: The individual arguments provided by a ValuesAttribute must match the type of the corresponding parameter of the method
# The individual arguments provided by a ValuesAttribute must match the type of the corresponding parameter of the method.
# Please keep this rule's severity above suggestion to actively avoid tests failing at runtime due to improper construction.
dotnet_diagnostic.NUnit1031.severity = warning
# NUnit1032: An IDisposable field/property should be Disposed in a TearDown method
# An IDisposable field/property should be Disposed in a TearDown method.
# Please keep this rule's severity above suggestion to actively avoid memory leaks and/or failing tests.
dotnet_diagnostic.NUnit1032.severity = warning
# NUnit1033: The Write methods on TestContext will be marked as Obsolete and eventually removed
# Direct Write calls should be replaced with Out.Write.
# Please keep this rule's severity above suggestion to actively avoid using obsolete methods.
dotnet_diagnostic.NUnit1033.severity = warning

# Assertion Rules NUnit2XXX

# NUnit2001: Consider using Assert.That(expr, Is.False) instead of Assert.False(expr)
# Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.False(expr).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2001.severity = suggestion
# NUnit2002: Consider using Assert.That(expr, Is.False) instead of Assert.IsFalse(expr)
# Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2002.severity = suggestion
# NUnit2003: Consider using Assert.That(expr, Is.True) instead of Assert.IsTrue(expr)
# Consider using the constraint model, Assert.That(expr, Is.True), instead of the classic model, Assert.IsTrue(expr).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2003.severity = suggestion
# NUnit2004: Consider using Assert.That(expr, Is.True) instead of Assert.True(expr)
# Consider using the constraint model, Assert.That(expr, Is.True), instead of the classic model, Assert.True(expr).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2004.severity = suggestion
# NUnit2005: Consider using Assert.That(actual, Is.EqualTo(expected)) instead of Assert.AreEqual(expected, actual)
# Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual).
# Please keep this rule's severity above suggestion to actively avoid mixing up expected & actual values.
dotnet_diagnostic.NUnit2005.severity = warning
# NUnit2006: Consider using Assert.That(actual, Is.Not.EqualTo(expected)) instead of Assert.AreNotEqual(expected, actual)
# Consider using the constraint model, Assert.That(actual, Is.Not.EqualTo(expected)), instead of the classic model, Assert.AreNotEqual(expected, actual).
# Please keep this rule's severity above suggestion to actively avoid mixing up expected & actual values.
dotnet_diagnostic.NUnit2006.severity = warning
# NUnit2007: The actual value should not be a constant
# The actual value should not be a constant. This indicates that the actual value and the expected value have switched places.
# Please keep this rule's severity above suggestion to actively avoid mixing up expected & actual values.
dotnet_diagnostic.NUnit2007.severity = warning
# NUnit2008: Incorrect IgnoreCase usage
# The IgnoreCase modifier should only be used for string or char arguments. Using it on another type will not have any effect.
# Please keep this rule's severity above silent to actively avoid redundant code.
dotnet_diagnostic.NUnit2008.severity = suggestion
# NUnit2009: The same value has been provided as both the actual and the expected argument
# The same value has been provided as both the actual and the expected argument. This indicates a coding error.
# Please keep this rule's severity above suggestion to actively avoid redundant code.
dotnet_diagnostic.NUnit2009.severity = warning
# NUnit2010: Use EqualConstraint for better assertion messages in case of failure
# Using EqualConstraint will lead to better assertion messages in case of failure.
# Please keep this rule's severity above silent to actively encourage better assertion messages.
dotnet_diagnostic.NUnit2010.severity = suggestion
# NUnit2011: Use ContainsConstraint for better assertion messages in case of failure
# Using constraints instead of boolean methods will lead to better assertion messages in case of failure.
# Please keep this rule's severity above silent to actively encourage better assertion messages.
dotnet_diagnostic.NUnit2011.severity = suggestion
# NUnit2012: Use StartsWithConstraint for better assertion messages in case of failure
# Using constraints instead of boolean methods will lead to better assertion messages in case of failure.
# Please keep this rule's severity above silent to actively encourage better assertion messages.
dotnet_diagnostic.NUnit2012.severity = suggestion
# NUnit2013: Use EndsWithConstraint for better assertion messages in case of failure
# Using constraints instead of boolean methods will lead to better assertion messages in case of failure.
# Please keep this rule's severity above silent to actively encourage better assertion messages.
dotnet_diagnostic.NUnit2013.severity = suggestion
# NUnit2014: Use SomeItemsConstraint for better assertion messages in case of failure
# Using SomeItemsConstraint will lead to better assertion messages in case of failure.
# Please keep this rule's severity above silent to actively encourage better assertion messages.
dotnet_diagnostic.NUnit2014.severity = suggestion
# NUnit2015: Consider using Assert.That(actual, Is.SameAs(expected)) instead of Assert.AreSame(expected, actual)
# Consider using the constraint model, Assert.That(actual, Is.SameAs(expected)), instead of the classic model, Assert.AreSame(expected, actual).
# Please keep this rule's severity above suggestion to actively avoid mixing up expected & actual values.
dotnet_diagnostic.NUnit2015.severity = warning
# NUnit2016: Consider using Assert.That(expr, Is.Null) instead of Assert.Null(expr)
# Consider using the constraint model, Assert.That(expr, Is.Null), instead of the classic model, Assert.Null(expr).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2016.severity = suggestion
# NUnit2017: Consider using Assert.That(expr, Is.Null) instead of Assert.IsNull(expr)
# Consider using the constraint model, Assert.That(expr, Is.Null), instead of the classic model, Assert.IsNull(expr).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2017.severity = suggestion
# NUnit2018: Consider using Assert.That(expr, Is.Not.Null) instead of Assert.NotNull(expr)
# Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.NotNull(expr).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2018.severity = suggestion
# NUnit2019: Consider using Assert.That(expr, Is.Not.Null) instead of Assert.IsNotNull(expr)
# Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2019.severity = suggestion
# NUnit2020: Incompatible types for SameAs constraint
# The SameAs constraint always fails because the actual and expected values have mutually exclusive types.
# Please keep this rule's severity above suggestion to actively avoid assertions that always fail.
dotnet_diagnostic.NUnit2020.severity = warning
# NUnit2021: Incompatible types for EqualTo constraint
# The EqualTo constraint always fails as the actual and the expected value cannot be equal.
# Please keep this rule's severity above suggestion to actively avoid assertions that always fail.
dotnet_diagnostic.NUnit2021.severity = warning
# NUnit2022: Missing property required for constraint
# The actual argument should have the required property for the constraint.
# Please keep this rule's severity above suggestion to actively avoid missing required properties for constraints.
dotnet_diagnostic.NUnit2022.severity = warning
# NUnit2023: Invalid NullConstraint usage
# NullConstraint is allowed only for reference types or nullable value types.
# Please keep this rule's severity above suggestion to actively avoid misusing NullConstraints.
dotnet_diagnostic.NUnit2023.severity = warning
# NUnit2024: Wrong actual type used with String Constraint
# The type of the actual argument is not a string and hence cannot be used with a String Constraint.
# Please keep this rule's severity above suggestion to actively avoid misusing string constraints.
dotnet_diagnostic.NUnit2024.severity = warning
# NUnit2025: Wrong actual type used with ContainsConstraint
# The ContainsConstraint requires the type of the actual value to be either a string or a collection of strings.
# Please keep this rule's severity above suggestion to actively avoid misusing ContainsConstraints.
dotnet_diagnostic.NUnit2025.severity = warning
# NUnit2026: Wrong actual type used with the SomeItemsConstraint with EqualConstraint
# The SomeItemsConstraint with EqualConstraint requires the actual argument to be a collection where the element type can match the type of the expected argument.
# Please keep this rule's severity above suggestion to actively avoid misusing constraints.
dotnet_diagnostic.NUnit2026.severity = warning
# NUnit2027: Consider using Assert.That(actual, Is.GreaterThan(expected)) instead of Assert.Greater(actual, expected)
# Consider using the constraint model, Assert.That(actual, Is.GreaterThan(expected)), instead of the classic model, Assert.Greater(actual, expected).
# Please keep this rule's severity above suggestion to actively avoid mixing up expected & actual values.
dotnet_diagnostic.NUnit2027.severity = warning
# NUnit2028: Consider using Assert.That(actual, Is.GreaterThanOrEqualTo(expected)) instead of Assert.GreaterOrEqual(actual, expected)
# Consider using the constraint model, Assert.That(actual, Is.GreaterThanOrEqualTo(expected)), instead of the classic model, Assert.GreaterOrEqual(actual, expected).
# Please keep this rule's severity above suggestion to actively avoid mixing up expected & actual values.
dotnet_diagnostic.NUnit2028.severity = warning
# NUnit2029: Consider using Assert.That(actual, Is.LessThan(expected)) instead of Assert.Less(actual, expected)
# Consider using the constraint model, Assert.That(actual, Is.LessThan(expected)), instead of the classic model, Assert.Less(actual, expected).
# Please keep this rule's severity above suggestion to actively avoid mixing up expected & actual values.
dotnet_diagnostic.NUnit2029.severity = warning
# NUnit2030: Consider using Assert.That(actual, Is.LessThanOrEqualTo(expected)) instead of Assert.LessOrEqual(actual, expected)
# Consider using the constraint model, Assert.That(actual, Is.LessThanOrEqualTo(expected)), instead of the classic model, Assert.LessOrEqual(actual, expected).
# Please keep this rule's severity above suggestion to actively avoid mixing up expected & actual values.
dotnet_diagnostic.NUnit2030.severity = warning
# NUnit2031: Consider using Assert.That(actual, Is.Not.SameAs(expected)) instead of Assert.AreNotSame(expected, actual)
# Consider using the constraint model, Assert.That(actual, Is.Not.SameAs(expected)), instead of the classic model, Assert.AreNotSame(expected, actual).
# Please keep this rule's severity above suggestion to actively avoid mixing up expected & actual values.
dotnet_diagnostic.NUnit2031.severity = warning
# NUnit2032: Consider using Assert.That(expr, Is.Zero) instead of Assert.Zero(expr)
# Consider using the constraint model, Assert.That(expr, Is.Zero), instead of the classic model, Assert.Zero(expr).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2032.severity = suggestion
# NUnit2033: Consider using Assert.That(expr, Is.Not.Zero) instead of ClassicAssert.NotZero(expr)
# Consider using the constraint model, Assert.That(expr, Is.Not.Zero), instead of the classic model, ClassicAssert.NotZero(expr).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2033.severity = suggestion
# NUnit2034: Consider using Assert.That(expr, Is.NaN) instead of ClassicAssert.IsNaN(expr)
# Consider using the constraint model, Assert.That(expr, Is.NaN), instead of the classic model, ClassicAssert.IsNaN(expr).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2034.severity = suggestion
# NUnit2035: Consider using Assert.That(collection, Is.Empty) instead of ClassicAssert.IsEmpty(collection)
# Consider using the constraint model, Assert.That(collection, Is.Empty), instead of the classic model, ClassicAssert.IsEmpty(collection).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2035.severity = suggestion
# NUnit2036: Consider using Assert.That(collection, Is.Not.Empty) instead of ClassicAssert.IsNotEmpty(collection)
# Consider using the constraint model, Assert.That(collection, Is.Not.Empty), instead of the classic model, ClassicAssert.IsNotEmpty(collection).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2036.severity = suggestion
# NUnit2037: Consider using Assert.That(collection, Does.Contain(instance)) instead of ClassicAssert.Contains(instance, collection)
# Consider using the constraint model, Assert.That(collection, Does.Contain(instance)), instead of the classic model, ClassicAssert.Contains(instance, collection).
# Please keep this rule's severity above suggestion to actively avoid mixing up expected & actual values.
dotnet_diagnostic.NUnit2037.severity = warning
# NUnit2038: Consider using Assert.That(actual, Is.InstanceOf(expected)) instead of ClassicAssert.IsInstanceOf(expected, actual)
# Consider using the constraint model, Assert.That(actual, Is.InstanceOf(expected)), instead of the classic model, ClassicAssert.IsInstanceOf(expected, actual).
# Please keep this rule's severity above suggestion to actively avoid mixing up expected & actual values.
dotnet_diagnostic.NUnit2038.severity = warning
# NUnit2039: Consider using Assert.That(actual, Is.Not.InstanceOf(expected)) instead of ClassicAssert.IsNotInstanceOf(expected, actual)
# Consider using the constraint model, Assert.That(actual, Is.Not.InstanceOf(expected)), instead of the classic model, ClassicAssert.IsNotInstanceOf(expected, actual).
# Please keep this rule's severity above suggestion to actively avoid mixing up expected & actual values.
dotnet_diagnostic.NUnit2039.severity = warning
# NUnit2040: Non-reference types for SameAs constraint
# The SameAs constraint always fails on value types as the actual and the expected value cannot be the same reference.
# Please keep this rule's severity above suggestion to actively avoid constraints that always fail.
dotnet_diagnostic.NUnit2040.severity = warning
# NUnit2041: Incompatible types for comparison constraint
# The comparison constraint always fails as the actual and the expected value are not comparable.
# Please keep this rule's severity above suggestion to actively avoid constraints that always fail.
dotnet_diagnostic.NUnit2041.severity = warning
# NUnit2042: Comparison constraint on object
# The comparison constraint might fail as the actual and the expected value might not implement IComparable.
# Please keep this rule's severity above silent to actively avoid using comparison constraints on objects that do not implement IComparable.
dotnet_diagnostic.NUnit2042.severity = suggestion
# NUnit2043: Use ComparisonConstraint for better assertion messages in case of failure
# Using ComparisonConstraint will lead to better assertion messages in case of failure.
# Please keep this rule's severity above silent to actively encourage better assertion messages.
dotnet_diagnostic.NUnit2043.severity = suggestion
# NUnit2044: Non-delegate actual parameter
# The actual argument needs to be evaluated by the Assert to catch any exceptions.
# Please keep this rule's severity above suggestion to actively encourage properly catching exceptions.
dotnet_diagnostic.NUnit2044.severity = warning
# NUnit2045: Use Assert.Multiple
# Hosting Asserts inside an Assert.Multiple allows detecting more than one failure.
# Please keep this rule's severity above suggestion to actively encourage detecting multiple failures.
dotnet_diagnostic.NUnit2045.severity = warning
# NUnit2046: Use CollectionConstraint for better assertion messages in case of failure
# Use Has.Length/Has.Count/Is.Empty instead of testing property directly.
# Please keep this rule's severity above silent to actively encourage better assertion messages.
dotnet_diagnostic.NUnit2046.severity = suggestion
# NUnit2047: Incompatible types for Within constraint
# The Within modifier should only be used for numeric or Date/Time arguments or tuples containing only these element types. Using it on other types will not have any effect.
# Please keep this rule's severity above suggestion to actively avoid redundant code.
dotnet_diagnostic.NUnit2047.severity = warning
# NUnit2048: Consider using Assert.That(...) instead of StringAssert(...)
# Consider using the constraint model, Assert.That(actual, {0}(expected)), instead of the classic model, StringAssert.{1}(expected, actual).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2048.severity = suggestion
# NUnit2049: Consider using Assert.That(...) instead of CollectionAssert(...)
# Consider using the constraint model, Assert.That(actual, {0}(expected)), instead of the classic model, CollectionAssert.{1}(expected, actual).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2049.severity = suggestion
# NUnit2050: NUnit 4 no longer supports string.Format specification
# Interpolated strings are more informational than format specifications.
# Please keep this rule's severity above suggestion to actively encourage more informational failure messages.
dotnet_diagnostic.NUnit2050.severity = warning
# NUnit2051: Consider using Assert.That(expr, Is.Positive) instead of ClassicAssert.Positive(expr)
# Consider using the constraint model, Assert.That(expr, Is.Positive), instead of the classic model, ClassicAssert.Positive(expr).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2051.severity = warning
# NUnit2052: Consider using Assert.That(expr, Is.Negative) instead of ClassicAssert.Negative(expr)
# Consider using the constraint model, Assert.That(expr, Is.Negative), instead of the classic model, ClassicAssert.Negative(expr).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2052.severity = warning
# NUnit2053: Consider using Assert.That(actual, Is.AssignableFrom(expected)) instead of ClassicAssert.IsAssignableFrom(expected, actual)
# Consider using the constraint model, Assert.That(expr, Is.Negative), instead of the classic model, ClassicAssert.Negative(expr).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2053.severity = warning
# NUnit2054: Consider using Assert.That(actual, Is.Not.AssignableFrom(expected)) instead of ClassicAssert.IsNotAssignableFrom(expected, actual)
# Consider using the constraint model, Assert.That(actual, Is.Not.AssignableFrom(expected)), instead of the classic model, ClassicAssert.IsNotAssignableFrom(expected, actual).
# Please keep this rule's severity above silent to actively encourage using more flexible constraint models.
dotnet_diagnostic.NUnit2054.severity = warning

# Suppressor Rules NUnit3XXX - N/A

# Style Rules NUnit4XXX

# NUnit4001: Simplify the Values attribute
# When used without any arguments, the ValuesAttribute on a (nullable) boolean or an (nullable) enum parameter will automatically include all possible values.
# Please keep this rule's severity above silent to actively encourage simplifying code.
dotnet_diagnostic.NUnit4001.severity = suggestion

# End of configuration.

# Please note that everything in this file is subject to change.
# This file configures very flexible guidelines, they do not and should not be followed verbatim in every situation.
# Certain analysers may be incompatible for various reasons, and there may be problems that still need to be resolved in this file.
# So far, no quality standard is guaranteed.

# Copyright SwifterTheDragon, and the SwifterTheDragon.VerboseSourceRevisionIdBuilder contributors, 2024-2025. All Rights Reserved.
